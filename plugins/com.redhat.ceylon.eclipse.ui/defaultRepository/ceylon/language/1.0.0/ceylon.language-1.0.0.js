(function(define) {
define(function(require, exports, module) {
//the Ceylon language module
var $CCMM$={"ceylon.language.impl":{"rethrow":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Throwable"},"$mt":"prm","$nm":"x"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Rethrows an exception without declaring it. This is used as a cheap replacement for\nUnsafe.throwException() in our Java Util class, used by the metamodel."],"by":["Stephane Epardaud"]},"$nm":"rethrow"}},"$mod-name":"ceylon.language","ceylon.language.meta.declaration":{"Import":{"satisfies":[{"$pk":"ceylon.language","$nm":"Identifiable"},{"$pk":"ceylon.language","$nm":"Annotated"}],"$mt":"ifc","$an":{"shared":[],"doc":["Model of an `import` declaration \nwithin a module declaration."]},"$at":{"shared":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this imported module is shared."]},"$nm":"shared"},"container":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Module"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The containing module."]},"$nm":"container"},"optional":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this imported module is optional."]},"$nm":"optional"},"name":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The name of the imported module."]},"$nm":"name"},"version":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The compile-time version of the imported module."]},"$nm":"version"}},"$nm":"Import"},"AnnotatedDeclaration":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"Module"},{"$pk":"ceylon.language.meta.declaration","$nm":"Package"}],"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"Declaration"},{"$pk":"ceylon.language","$nm":"Annotated"}],"$mt":"ifc","$an":{"shared":[],"doc":["Declaration which can be annotated, such as:\n\n- [[NestableDeclaration]]\n- [[Module]]\n- [[Package]]\n\nYou can query annotations that are placed on a given annotated declaration with:\n\n"]},"$m":{"annotations":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Annotation"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotation"}],"variance":"out","$nm":"Annotation"}],"$an":{"shared":[],"formal":[],"doc":["The annotation instances of the given \nannotation type on this declaration.\n\nFor example, you can list all the [[See|ceylon.language::See]] \nannotations on [[List|ceylon.language::List]]\nwith the following code:\n\n    for(annot in `interface List`.annotations<See>()){\n        for(elems in annot.programElements){\n            print(\"See: ``elems``\");\n        }\n    }\n\nAlternatively, you can use the [[ceylon.language.meta::annotations]] \nfunction.\n"]},"$nm":"annotations"}},"$nm":"AnnotatedDeclaration"},"Variance":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"invariant"},{"$pk":"ceylon.language.meta.declaration","$nm":"covariant"},{"$pk":"ceylon.language.meta.declaration","$nm":"contravariant"}],"$mt":"ifc","$an":{"shared":[],"doc":["Variance information."]},"$nm":"Variance"},"OpenTypeVariable":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$mt":"ifc","$an":{"shared":[],"doc":["An open type variable."]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"TypeParameter"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This type variable's type parameter declaration."]},"$nm":"declaration"}},"$nm":"OpenTypeVariable"},"OpenIntersection":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$mt":"ifc","$an":{"shared":[],"doc":["An open intersection type."]},"$at":{"satisfiedTypes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This intersection's list of satisfied open types."]},"$nm":"satisfiedTypes"}},"$nm":"OpenIntersection"},"OpenType":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"nothingType"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenClassOrInterfaceType"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenTypeVariable"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenUnion"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenIntersection"}],"$mt":"ifc","$an":{"shared":[],"doc":["An open type.\n\nAn open type is a type which may contain unbound type variables, such as `List<T>`."]},"$nm":"OpenType"},"SetterDeclaration":{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotated"}],"$mt":"ifc","$an":{"shared":[],"doc":["A setter declaration for a variable `ValueDeclaration`."]},"$at":{"variable":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"ValueDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The variable value this setter is for."]},"$nm":"variable"}},"$nm":"SetterDeclaration"},"Module":{"satisfies":[{"$pk":"ceylon.language","$nm":"Identifiable"},{"$pk":"ceylon.language.meta.declaration","$nm":"AnnotatedDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["A `module` declaration\nfrom a `module.ceylon` compilation unit"]},"$m":{"resourceByPath":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Resource"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"path"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Searches for a resource by its path inside the module."]},"$nm":"resourceByPath"},"findImportedPackage":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"Package"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Finds a package by name in this module or in its dependencies. Note that all transitive `shared`\ndependencies are searched. Returns `null` if not found."]},"$nm":"findImportedPackage"},"findPackage":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"Package"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Finds a package by name. Returns `null` if not found."]},"$nm":"findPackage"}},"$at":{"dependencies":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Import"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The modules this module depends on."]},"$nm":"dependencies"},"members":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Package"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The package members of the module."]},"$nm":"members"},"version":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The module version."]},"$nm":"version"}},"$nm":"Module"},"InterfaceDeclaration":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["An interface declaration.\n\n<a name=\"toplevel-sample\"><\/a>\n### Usage sample for toplevel interfaces\n\nBecause some interfaces have type parameters, getting a model requires applying type arguments to the\ninterface declaration with [[interfaceApply]] in order to be able to get a closed type. For example, here is how you would\nobtain an interface model from a toplevel interface declaration:\n\n    interface Foo<T> satisfies List<T> {\n    }\n    \n    void test(){\n        \/\/ We need to apply the Integer closed type to the Foo declaration in order to get the Foo<Integer> closed type\n        Interface<Foo<Integer>> interfaceModel = `interface Foo`.interfaceApply<Foo<Integer>>(`Integer`);\n        \/\/ This will print: ceylon.language::List<ceylon.language::Integer>\n        for(satisfiedType in interfaceModel.satisfiedTypes){\n            print(satisfiedType);\n        }\n    }\n\n<a name=\"member-sample\"><\/a>\n### Usage sample for member interfaces\n\nFor member interfaces it is a bit longer, because member interfaces need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberInterfaceApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared interface Inner<T> satisfies List<T> {\n        }\n    }\n\n    void test(){\n        \/\/ apply the containing closed type `Outer` to the member class declaration `Outer.Inner`\n        MemberInterface<Outer,Outer.Inner<Integer>> memberInterfaceModel = `interface Outer.Inner`.memberInterfaceApply<Outer,Outer.Inner<Integer>>(`Outer`, `Integer`);\n        \/\/ This will print: ceylon.language::List<ceylon.language::Integer>\n        for(satisfiedType in memberInterfaceModel.satisfiedTypes){\n            print(satisfiedType);\n        }\n    }\n"]},"$m":{"interfaceApply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"Interface"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Applies the given closed type arguments to this toplevel interface declaration in order to obtain an interface model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."]},"$nm":"interfaceApply"},"memberInterfaceApply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"MemberInterface"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"containerType"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result's container type or type parameters."],"doc":["Applies the given closed container type and type arguments to this member interface declaration in order to obtain a member interface model. \nSee [this code sample](#member-sample) for an example on how to use this."]},"$nm":"memberInterfaceApply"}},"$nm":"InterfaceDeclaration"},"TypeParameter":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"Declaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["A type parameter declaration."]},"$at":{"caseTypes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The `of` enumerated bounds for this type parameter."]},"$nm":"caseTypes"},"defaultTypeArgument":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}]},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This type parameter's default type argument, if it has one."]},"$nm":"defaultTypeArgument"},"container":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The declaration that declared this type parameter. This is either a [[ClassOrInterfaceDeclaration]] or a\n[[FunctionDeclaration]]."]},"$nm":"container"},"variance":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Variance"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This type parameter's variance, as defined by `in` or `out` keywords."]},"$nm":"variance"},"satisfiedTypes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The `satisfies` upper bounds for this type parameter."]},"$nm":"satisfiedTypes"},"defaulted":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this type parameter has a default type argument and can be omitted."]},"$nm":"defaulted"}},"$nm":"TypeParameter"},"FunctionalDeclaration":{"$mt":"ifc","$an":{"shared":[],"doc":["Declaration which can be invoked, and may have parameters. Classes\nand functions are functional declarations.\n\nNote that multiple-parameter lists are not reified at runtime, so if you\nhave a function declaration like this:\n\n    Integer add(Integer a)(Integer b) => a + b;\n\nIt will only have a single parameter list at runtime (the first), and its return\ntype will be `Callable<Integer,[Integer]>`.\n"]},"$m":{"getParameterDeclaration":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Gets a parameter declaration by name. Returns `null` if no such parameter exists."]},"$nm":"getParameterDeclaration"}},"$at":{"annotation":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if the current declaration is an annotation class or function."]},"$nm":"annotation"},"parameterDeclarations":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The list of parameter declarations for this functional declaration."]},"$nm":"parameterDeclarations"}},"$nm":"FunctionalDeclaration"},"$pkg-shared":"1","GenericDeclaration":{"$mt":"ifc","$an":{"shared":[],"doc":["A declaration that can have type parameters."]},"$m":{"getTypeParameterDeclaration":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"TypeParameter"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Finds a type parameter by name. Returns `null` if not found."]},"$nm":"getTypeParameterDeclaration"}},"$at":{"typeParameterDeclarations":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"TypeParameter"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The list of type parameters declared on this generic declaration."]},"$nm":"typeParameterDeclarations"}},"$nm":"GenericDeclaration"},"invariant":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"Variance"}],"$mt":"obj","$an":{"shared":[],"doc":["Invariant means that neither subtype nor supertype can be accepted, the\ntype has to be exactly that which is declared."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"invariant"},"OpenInterfaceType":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenClassOrInterfaceType"}],"$mt":"ifc","$an":{"shared":[],"doc":["An open interface type."]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"InterfaceDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This declaration's package container."],"actual":[]},"$nm":"declaration"}},"$nm":"OpenInterfaceType"},"Package":{"satisfies":[{"$pk":"ceylon.language","$nm":"Identifiable"},{"$pk":"ceylon.language.meta.declaration","$nm":"AnnotatedDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["Model of a `package` declaration \nfrom a `package.ceylon` compilation unit"]},"$m":{"getValue":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"ValueDeclaration"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The value with the given name. Returns `null` if not found."]},"$nm":"getValue"},"getAlias":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"AliasDeclaration"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The type alias with the given name. Returns `null` if not found."]},"$nm":"getAlias"},"getMember":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Kind"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"doc":["Looks up a member declaration by name, provided it satisfies the given `Kind` type\nargument. Returns `null` if no such member matches."]},"$nm":"getMember"},"getFunction":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionDeclaration"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The function with the given name. Returns `null` if not found."]},"$nm":"getFunction"},"annotatedMembers":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"},{"$nm":"Annotation"}],"$an":{"shared":[],"formal":[],"doc":["Returns the list of member declarations that satisfy the given `Kind` type argument and\nthat are annotated with the given `Annotation` type argument"]},"$nm":"annotatedMembers"},"getClassOrInterface":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The class or interface with the given name. Returns `null` if not found."]},"$nm":"getClassOrInterface"},"members":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"doc":["Returns the list of member declarations that satisfy the given `Kind` type argument."]},"$nm":"members"}},"$at":{"shared":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this package is shared."]},"$nm":"shared"},"container":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Module"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The module this package belongs to."]},"$nm":"container"}},"$nm":"Package"},"OpenClassType":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenClassOrInterfaceType"}],"$mt":"ifc","$an":{"shared":[],"doc":["An open class type."]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"ClassDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This class declaration."],"actual":[]},"$nm":"declaration"}},"$nm":"OpenClassType"},"TypedDeclaration":{"$mt":"ifc","$an":{"shared":[],"doc":["Declaration which has an open type."]},"$at":{"openType":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The open type for this declaration. For example, the open type for `List<T> f<T>()` is `List<T>`."]},"$nm":"openType"}},"$nm":"TypedDeclaration"},"OpenUnion":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$mt":"ifc","$an":{"shared":[],"doc":["An open union type."]},"$at":{"caseTypes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The list of case types for this open union type."]},"$nm":"caseTypes"}},"$nm":"OpenUnion"},"NestableDeclaration":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"AliasDeclaration"}],"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"AnnotatedDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"TypedDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["A declaration which can be contained in a [[Package]] or in another [[NestableDeclaration]].\n\nFunctions, values, classes, interfaes and aliases are such declarations."]},"$at":{"shared":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this declaration is annotated with [[shared|ceylon.language::shared]]."]},"$nm":"shared"},"containingModule":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Module"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This declaration's module container."]},"$nm":"containingModule"},"toplevel":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this declaration is a toplevel declaration."]},"$nm":"toplevel"},"formal":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this declaration is annotated with [[formal|ceylon.language::formal]]."]},"$nm":"formal"},"default":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this declaration is annotated with [[default|ceylon.language::default]]."]},"$nm":"default"},"container":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"Package"}]},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This declaration's immediate container, which can be either a [[NestableDeclaration]]\nor a [[Package]]."]},"$nm":"container"},"containingPackage":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Package"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This declaration's package container."]},"$nm":"containingPackage"},"actual":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this declaration is annotated with [[actual|ceylon.language::actual]]."]},"$nm":"actual"}},"$nm":"NestableDeclaration"},"FunctionDeclaration":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"GenericDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionalDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["A function declaration.\n\n<a name=\"toplevel-sample\"><\/a>\n### Usage sample for toplevel function\n\nBecause some functions have type parameters, getting a model requires applying type arguments to the\nfunction declaration with [[apply]] in order to be able to invoke that function. For example, here is how you would\nobtain a function model that you can invoke from a toplevel function declaration:\n\n    String foo<T>(){\n        return \"Hello, our T is: ``typeLiteral<T>()``\";\n    }\n    \n    void test(){\n        \/\/ We need to apply the Integer closed type to the foo declaration in order to get the foo<Integer> function model\n        Function<String,[]> functionModel = `function foo`.apply<String,[]>(`Integer`);\n        \/\/ This will print: Hello, our T is: ceylon.language::Integer\n        print(functionModel());\n    }\n\n<a name=\"member-sample\"><\/a>\n### Usage sample for methods\n\nFor methods it is a bit longer, because methods need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared String hello() => \"Hello\";\n    }\n\n    void test(){\n        \/\/ apply the containing closed type `Outer` to the method declaration `Outer.hello`\n        Method<Outer,String,[]> methodModel = `function Outer.hello`.memberApply<Outer,String,[]>(`Outer`);\n        \/\/ We now have a Method, which needs to be applied to a containing instance in order to become an\n        \/\/ invokable function:\n        Function<String,[]> boundMethodModel = methodModel(Outer());\n        \/\/ This will print: Hello\n        print(boundMethodModel());\n    }\n"]},"$m":{"apply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Function"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Return"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Applies the given closed type arguments to this function declaration in order to obtain a function model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."]},"$nm":"apply"},"memberInvoke":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","$def":"1","$nm":"typeArguments"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"arguments"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"throws":["IncompatibleTypeException","If the specified container, type or value arguments are not compatible with this method."],"doc":["Invokes the underlying method, by applying the specified type arguments and value arguments."]},"$nm":"memberInvoke"},"invoke":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","$def":"1","$nm":"typeArguments"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"arguments"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"throws":["IncompatibleTypeException","If the specified type or value arguments are not compatible with this toplevel function."],"doc":["Invokes the underlying toplevel function, by applying the specified type arguments and value arguments."]},"$nm":"invoke"},"memberApply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Method"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"containerType"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Return"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result's container type or type parameters."],"doc":["Applies the given closed container type and type arguments to this method declaration in order to obtain a method model. \nSee [this code sample](#member-sample) for an example on how to use this."]},"$nm":"memberApply"}},"$nm":"FunctionDeclaration"},"Declaration":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"AnnotatedDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"TypeParameter"}],"$mt":"ifc","$an":{"shared":[],"doc":["A declaration.\n\nThere are only two types of declarations:\n\n- [[AnnotatedDeclaration]]s such as modules, packages, classes or functions, and\n- [[TypeParameter]] declarations."]},"$at":{"qualifiedName":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The qualified name of this declaration. This includes the container qualified name. For\nexample, the [[Declaration]] class' qualified name is \"ceylon.language.meta.declaration::Declaration\"."]},"$nm":"qualifiedName"},"name":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The name of this declaration. For example, the [[Declaration]] class is named \"Declaration\"."]},"$nm":"name"}},"$nm":"Declaration"},"ClassOrInterfaceDeclaration":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"ClassDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"InterfaceDeclaration"}],"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"GenericDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["A class or interface declaration.\n\n<a name=\"toplevel-sample\"><\/a>\n### Usage sample for toplevel classes\n\nBecause some classes have type parameters, getting a model requires applying type arguments to the\nclass declaration with [[apply]] in order to be able to instantiate that class. For example, here is how you would\nobtain a class or interface model that you can instantiate from a toplevel class declaration:\n\n    class Foo<T>() {\n        string => \"Hello, our T is: ``typeLiteral<T>()``\";\n    }\n    \n    void test(){\n        \/\/ We need to apply the Integer closed type to the Foo declaration in order to get the Foo<Integer> closed type\n        ClassOrInterface<Foo<Integer>> classOrInterfaceModel = `class Foo`.apply<Foo<Integer>>(`Integer`);\n        assert(is Class<Foo<Integer>,[]> classOrInterfaceModel);\n        \/\/ This will print: Hello, our T is: ceylon.language::Integer\n        print(classOrInterfaceModel());\n    }\n\nNote that there are more specialised versions of [[apply]] in [[ClassDeclaration.classApply]] and \n[[InterfaceDeclaration.interfaceApply]].\n\n<a name=\"member-sample\"><\/a>\n### Usage sample for member classes\n\nFor member classes or interfaces it is a bit longer, because member types need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared class Inner(){\n            string => \"Hello\";\n        }\n    }\n\n    void test(){\n        \/\/ apply the containing closed type `Outer` to the member class declaration `Outer.Inner`\n        value memberClassModel = `class Outer.Inner`.memberApply<Outer,Outer.Inner>(`Outer`);\n        assert(is MemberClass<Outer,Outer.Inner,[]> memberClassModel);\n        \/\/ We now have a MemberClass, which needs to be applied to a containing instance in order to become an\n        \/\/ invokable class model:\n        Class<Outer.Inner,[]> boundMemberClassModel = memberClassModel(Outer());\n        \/\/ This will print: Hello\n        print(boundMemberClassModel());\n    }\n\nNote that there are more specialised versions of [[memberApply]] in [[ClassDeclaration.memberClassApply]] and \n[[InterfaceDeclaration.memberInterfaceApply]].\n"]},"$m":{"memberDeclarations":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"doc":["Returns the list of member declarations that satisfy the given `Kind` type argument."]},"$nm":"memberDeclarations"},"apply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Applies the given closed type arguments to this toplevel class or interface declaration in order to obtain a class or interface model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."]},"$nm":"apply"},"getDeclaredMemberDeclaration":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Kind"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"doc":["Looks up a member declaration by name, provided it satisfies the given `Kind` type\nargument. Returns `null` if no such member matches."]},"$nm":"getDeclaredMemberDeclaration"},"memberApply":{"$t":{"comp":"i","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"}],"$pk":"ceylon.language.meta.model","$nm":"Member"},{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"}]},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"containerType"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result's container type or type parameters."],"doc":["Applies the given closed container type and type arguments to this member class or interface declaration in order to obtain a \nmember class or interface model. See [this code sample](#member-sample) for an example on how to use this."]},"$nm":"memberApply"},"annotatedDeclaredMemberDeclarations":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"},{"$nm":"Annotation"}],"$an":{"shared":[],"formal":[],"doc":["Returns the list of member declarations that satisfy the given `Kind` type argument and\nthat are annotated with the given `Annotation` type argument"]},"$nm":"annotatedDeclaredMemberDeclarations"},"annotatedMemberDeclarations":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"},{"$nm":"Annotation"}],"$an":{"shared":[],"formal":[],"doc":["Returns the list of member declarations that satisfy the given `Kind` type argument and\nthat are annotated with the given `Annotation` type argument"]},"$nm":"annotatedMemberDeclarations"},"getMemberDeclaration":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Kind"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"doc":["Looks up a member declaration by name, provided it satisfies the given `Kind` type\nargument. Returns `null` if no such member matches."]},"$nm":"getMemberDeclaration"},"declaredMemberDeclarations":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"doc":["Returns the list of member declarations that satisfy the given `Kind` type argument."]},"$nm":"declaredMemberDeclarations"}},"$at":{"extendedType":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenClassType"}]},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This type's extended type, unless this is the class for [[Anything|ceylon.language::Anything]], which\nis the root of the type hierarchy and thus does not have any extended type."]},"$nm":"extendedType"},"caseTypes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["If this type has an `of` clause, this is the list of case types for the current type."]},"$nm":"caseTypes"},"satisfiedTypes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenInterfaceType"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The list of types satisfied by this type."]},"$nm":"satisfiedTypes"},"isAlias":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this type is an alias type, in which case the [[extendedType]] will \ncontain the substituted type."]},"$nm":"isAlias"}},"$nm":"ClassOrInterfaceDeclaration"},"OpenClassOrInterfaceType":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenClassType"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenInterfaceType"}],"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$mt":"ifc","$an":{"shared":[],"doc":["An open class or interface, with open type arguments.\n\nFor example, `List<T>` is an open interface type, with a type argument which is the\n[[OpenTypeVariable]] `T`."]},"$at":{"extendedType":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"OpenClassType"}]},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The extended type of this open type."]},"$nm":"extendedType"},"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The class or interface declaration for this open type."]},"$nm":"declaration"},"typeArguments":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"TypeParameter"},{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$pk":"ceylon.language","$nm":"Map"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The set of open type arguments."]},"$nm":"typeArguments"},"satisfiedTypes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"OpenInterfaceType"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The satisfied types of this open type."]},"$nm":"satisfiedTypes"}},"$nm":"OpenClassOrInterfaceType"},"covariant":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"Variance"}],"$mt":"obj","$an":{"shared":[],"doc":["Covariant means that subtypes of the given type may be returned."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"covariant"},"nothingType":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"}],"$mt":"obj","$an":{"shared":[],"doc":["The singleton open type for [[Nothing|ceylon.language::nothing]]."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"nothingType"},"ClassDeclaration":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionalDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["Class declaration.\n\n<a name=\"toplevel-sample\"><\/a>\n### Usage sample for toplevel classes\n\nBecause some classes have type parameters, getting a model requires applying type arguments to the\nclass declaration with [[classApply]] in order to be able to instantiate that class. For example, here is how you would\nobtain a class model that you can instantiate from a toplevel class declaration:\n\n    class Foo<T>(){\n        string => \"Hello, our T is: ``typeLiteral<T>()``\";\n    }\n    \n    void test(){\n        \/\/ We need to apply the Integer closed type to the Foo declaration in order to get the Foo<Integer> closed type\n        Class<Foo<Integer>,[]> classModel = `class Foo`.classApply<Foo<Integer>,[]>(`Integer`);\n        \/\/ This will print: Hello, our T is: ceylon.language::Integer\n        print(classModel());\n    }\n\n<a name=\"member-sample\"><\/a>\n### Usage sample for member classes\n\nFor member classes it is a bit longer, because member classes need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberClassApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared class Inner(){\n            string => \"Hello\";\n        }\n    }\n\n    void test(){\n        \/\/ apply the containing closed type `Outer` to the member class declaration `Outer.Inner`\n        MemberClass<Outer,Outer.Inner,[]> memberClassModel = `class Outer.Inner`.memberClassApply<Outer,Outer.Inner,[]>(`Outer`);\n        \/\/ We now have a MemberClass, which needs to be applied to a containing instance in order to become an\n        \/\/ invokable class model:\n        Class<Outer.Inner,[]> boundMemberClassModel = memberClassModel(Outer());\n        \/\/ This will print: Hello\n        print(boundMemberClassModel());\n    }\n"]},"$m":{"instantiate":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","$def":"1","$nm":"typeArguments"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"arguments"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"throws":["IncompatibleTypeException","If the specified type or value arguments are not compatible with this toplevel class."],"doc":["Creates a new instance of this toplevel class, by applying the specified type arguments and value arguments."]},"$nm":"instantiate"},"memberInstantiate":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","$def":"1","$nm":"typeArguments"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"arguments"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"throws":["IncompatibleTypeException","If the specified container, type or value arguments are not compatible with this method."],"doc":["Creates a new instance of this member class, by applying the specified type arguments and value arguments."]},"$nm":"memberInstantiate"},"memberClassApply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"MemberClass"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"containerType"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result's container type or type parameters."],"doc":["Applies the given closed container type and type arguments to this member class declaration in order to obtain a member class model. \nSee [this code sample](#member-sample) for an example on how to use this."]},"$nm":"memberClassApply"},"classApply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Class"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"typeArguments"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Applies the given closed type arguments to this toplevel class declaration in order to obtain a class model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."]},"$nm":"classApply"}},"$at":{"anonymous":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if the class is an object class."]},"$nm":"anonymous"},"abstract":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if the class has an [[abstract|ceylon.language::abstract]] annotation."]},"$nm":"abstract"},"final":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if the class has a [[final|ceylon.language::final]] annotation."]},"$nm":"final"}},"$nm":"ClassDeclaration"},"ValueDeclaration":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["A value declaration.\n\n<a name=\"toplevel-sample\"><\/a>\n### Usage sample for toplevel value\n\nGetting a model requires applying type arguments to the\nvalue declaration with [[apply]] in order to be able to read that value. For example, here is how you would\nobtain a value model that you can read from a toplevel attribute declaration:\n\n    String foo = \"Hello\";\n    \n    void test(){\n        \/\/ We need to apply the the foo declaration in order to get the foo value model\n        Value<String> valueModel = `value foo`.apply<String>();\n        \/\/ This will print: Hello\n        print(valueModel.get());\n    }\n\n<a name=\"member-sample\"><\/a>\n### Usage sample for attributes\n\nFor attributes it is a bit longer, because attributes need to be applied the containing type, so you should \nuse [[memberApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared String foo => \"Hello\";\n    }\n\n    void test(){\n        \/\/ Apply the containing closed type `Outer` to the attribute declaration `Outer.foo`\n        Attribute<Outer,String> valueModel = `value Outer.foo`.memberApply<Outer,String>(`Outer`);\n        \/\/ We now have an Attribute, which needs to be applied to a containing instance in order to become a\n        \/\/ readable value:\n        Value<String> boundValueModel = valueModel(Outer());\n        \/\/ This will print: Hello\n        print(boundValueModel.get());\n    }\n"]},"$m":{"apply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"Value"},"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Get"},{"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Set"}],"$an":{"shared":[],"formal":[],"throws":["IncompatibleTypeException","If the specified `Get` or `Set` type arguments are not compatible with the actual result."],"doc":["Applies this value declaration in order to obtain a value model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."]},"$nm":"apply"},"get":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Reads the current value of this toplevel value."]},"$nm":"get"},"memberSet":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"},{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"newValue"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"throws":["IncompatibleTypeException","If the specified container or new value type is not compatible with this attribute."],"doc":["Sets the current value of this attribute on the given container instance."]},"$nm":"memberSet"},"set":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"newValue"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Sets the current value of this toplevel value."]},"$nm":"set"},"memberApply":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"Attribute"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Container"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"containerType"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Get"},{"$def":{"$pk":"ceylon.language.meta.declaration","$nm":"Nothing"},"$nm":"Set"}],"$an":{"shared":[],"formal":[],"throws":["IncompatibleTypeException","If the specified `Container`, `Get` or `Set` type arguments are not compatible with the actual result."],"doc":["Applies the given closed container type to this attribute declaration in order to obtain an attribute model. \nSee [this code sample](#member-sample) for an example on how to use this."]},"$nm":"memberApply"},"memberGet":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"throws":["IncompatibleTypeException","If the specified container is not compatible with this attribute."],"doc":["Reads the current value of this attribute on the given container instance."]},"$nm":"memberGet"}},"$at":{"setter":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"SetterDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["Returns the setter declaration for this variable.\n\nFor modelling purposes `variable` reference \nvalues have a SetterDeclaration even though there is no \nsuch setter explicit in the source code."]},"$nm":"setter"},"variable":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this declaration is annotated with [[variable|ceylon.language::variable]]."]},"$nm":"variable"}},"$nm":"ValueDeclaration"},"contravariant":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"Variance"}],"$mt":"obj","$an":{"shared":[],"doc":["Contravariant means that supertypes of the given type may be accepted."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"contravariant"},"FunctionOrValueDeclaration":{"of":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"ValueDeclaration"}],"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["A function or value declaration."]},"$at":{"parameter":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this function or value is a parameter to a [[FunctionalDeclaration]]."]},"$nm":"parameter"},"variadic":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this function or value is a parameter and is variadic (accepts a list of values)."]},"$nm":"variadic"},"defaulted":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["True if this function or value is a parameter and has a default value."]},"$nm":"defaulted"}},"$nm":"FunctionOrValueDeclaration"},"AliasDeclaration":{"satisfies":[{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"GenericDeclaration"}],"$mt":"ifc","$an":{"shared":[],"doc":["Type alias declaration. While type aliases are erased (substituted for what they alias is a better term) from every \ndeclaration that uses them during compile-time, the declaration of the type alias is still visible at run-time."]},"$at":{"extendedType":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"OpenType"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The open type that is substituted by this type alias."]},"$nm":"extendedType"}},"$nm":"AliasDeclaration"}},"$mod-version":"1.0.0","ceylon.language.meta":{"$pkg-shared":"1","sequencedAnnotations":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"SequencedAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"Class"},"$mt":"prm","$nm":"annotationType"},{"$t":{"$nm":"ProgramElement"},"$mt":"prm","$nm":"programElement"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"SequencedAnnotation"}],"$nm":"Value"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotated"}],"variance":"in","$nm":"ProgramElement"}],"$an":{"shared":[],"doc":["The values of given sequenced annotation type on the given program element, \nor empty if the program element was not annotated with that annotation type.\nFor example:\n\n    \/\/ Does the sum declaration have any ThrownException annotations?\n    value throwsSomething = sequencedAnnotation(`ThrownException`, `function sum`) nonempty;\n\nThe annotations may be returned in any order.\n"]},"$nm":"sequencedAnnotations"},"optionalAnnotation":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Value"}]},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"Class"},"$mt":"prm","$nm":"annotationType"},{"$t":{"$nm":"ProgramElement"},"$mt":"prm","$nm":"programElement"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$nm":"Value"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotated"}],"variance":"in","$nm":"ProgramElement"}],"$an":{"shared":[],"doc":["The value of given optional annotation type on the given program element, \nor null if the program element was not annotated with that annotation type.\nFor example:\n\n    \/\/ Does the process declaration have the Shared annotation?\n    value isShared = optionalAnnotation(`Shared`, `value process`) exists;\n"]},"$nm":"optionalAnnotation"},"typeLiteral":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Anything"}],"variance":"out","$nm":"Type"}],"$an":{"shared":[],"native":[],"doc":["Functional equivalent to type literals. Allows you to get a closed type instance\nfor a given type argument.\n\nFor example:\n\n    assert(is Interface<List<Integer>> listOfIntegers = typeLiteral<List<Integer>>());\n"]},"$nm":"typeLiteral"},"annotations":{"$t":{"$nm":"Values"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"Values"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"ConstrainedAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"Class"},"$mt":"prm","$nm":"annotationType"},{"$t":{"$nm":"ProgramElement"},"$mt":"prm","$nm":"programElement"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"Values"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"ConstrainedAnnotation"}],"$nm":"Value"},{"$nm":"Values"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotated"}],"variance":"in","$nm":"ProgramElement"}],"$an":{"shared":[],"native":[],"doc":["The annotations of the given type on the given program element. For example:\n\n    \/\/ Does the process declaration have the Shared annotation?\n    value isShared = annotations(`Shared`, `value process`) exists;\n\nThe annotations may be returned in any order.\n"]},"$nm":"annotations"},"modules":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"obj","$an":{"shared":[],"native":[],"doc":["Represents the list of Ceylon modules currently loaded at runtime.\n\nNote that this contains all loaded modules, including those that are\nnot imported by your module.\n\nSince Ceylon supports module isolation at runtime, it is possible that\nthere are more than one version of a given module loaded at the same time.\n\n### Usage example\n\nHere's how you would iterate all the loaded modules and print their name and version:\n\n    import ceylon.language.meta { modules }\n\n    for(mod in modules.list){\n        print(\"Module: ``mod.name``\/``mod.version``\");\n    }\n"]},"$m":{"find":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"Module"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"version"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Finds a module by name and version, returns `null` if not found."]},"$nm":"find"}},"$at":{"default":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language.meta.declaration","$nm":"Module"}]},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Returns the default module, if there is one. This is only the case when\nyou are running the default module."]},"$nm":"default"},"list":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Module"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Returns the list of all currently loaded modules. This may include modules that\nwere not imported directly but your module, and multiple versions of the same\nmodule."]},"$nm":"list"}},"$nm":"modules"},"type":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$pk":"ceylon.language.meta","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"ClassModel"},"$ps":[[{"$t":{"$nm":"Type"},"$mt":"prm","$nm":"instance"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Anything"}],"variance":"out","$nm":"Type"}],"$an":{"shared":[],"native":[],"doc":["Returns the closed type and model of a given instance. Since only classes\ncan be instantiated, this will always be a [[ClassModel]] model."]},"$nm":"type"}},"ceylon.language.meta.model":{"Member":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Kind"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Container"},{"$pk":"ceylon.language.meta.model","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"}],"$mt":"ifc","$tp":[{"variance":"in","$nm":"Container"},{"satisfies":[{"$pk":"ceylon.language.meta.model","$nm":"Model"}],"variance":"out","$nm":"Kind"}],"$an":{"shared":[],"doc":["Model for members that can be bound to a containing instance to turn them into toplevel models.\n\nYou can bind a member to an instance by invoking that member with the instance as parameter:\n\n    shared class Outer(String name){\n        shared class Inner(){\n            shared String hello => \"Hello \"+name;\n        }\n    }\n    \n    void test(){\n        Member<Outer,Class<Outer.Inner,[]>> memberClass = `Outer.Inner`;\n        Class<Outer.Inner,[]> c = memberClass(Outer(\"Stef\"));\n        \/\/ This will print: Hello Stef\n        print(c().hello);\n    }\n"]},"$m":{"bind":{"$t":{"$pk":"ceylon.language.meta.model","$nm":"Model"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"throws":["IncompatibleTypeException","If the container is not assignable to this member's container"],"doc":["Type-unsafe container binding, to be used when the container type is unknown until runtime.\n\nThis has the same behaviour as invoking this `Member` directly, but exchanges compile-time type\nsafety with runtime checks."]},"$nm":"bind"}},"$at":{"declaringType":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The declaring closed type. This is the type that declared this member."]},"$nm":"declaringType"}},"$nm":"Member"},"Model":{"of":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"},{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"FunctionModel"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"},{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"ValueModel"}],"$mt":"ifc","$an":{"shared":[],"doc":["The root of all models. There are several types of models:\n\n- [[ClassOrInterface]]\n- [[FunctionModel]]\n- [[ValueModel]]\n"]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"NestableDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The declaration for this model."]},"$nm":"declaration"},"container":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}]},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The container type of this model, or `null` if this is a toplevel model."]},"$nm":"container"}},"$nm":"Model"},"InterfaceModel":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"}],"$an":{"shared":[],"doc":["An interface model represents the model of a Ceylon interface that you can inspect.\n\nAn interface model can be either a toplevel [[Interface]] or a member [[MemberInterface]].\n"]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"InterfaceDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"declaration"}},"$nm":"InterfaceModel"},"Method":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"FunctionModel"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Function"}],"$pk":"ceylon.language.meta.model","$nm":"Member"}],"$mt":"ifc","$tp":[{"variance":"in","$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Arguments"}],"$an":{"shared":[],"doc":["A function model represents the model of a Ceylon function that you can invoke and inspect.\n\nA method is a member function: it is declared on classes or interfaces.\n\nThis is both a [[FunctionModel]] and a [[Member]]: you can invoke it with an instance value\nto bind it to that instance and obtain a [[Function]]:\n\n    class Outer(){\n        shared String foo(String name) => \"Hello \"+name;\n    }\n    \n    void test(){\n        Method<Outer,String,[String]> method = `Outer.foo`;\n        \/\/ Bind it to an instance value\n        Function<String,[String]> f = method(Outer());\n        \/\/ This will print: Hello Stef\n        print(f(\"Stef\"));\n    }\n"]},"$m":{"bind":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Function"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"bind"}},"$nm":"Method"},"Type":{"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"}],"$an":{"shared":[],"doc":["A closed type.\n\nA closed type is a type which is fully resolved and bound and contains no open type variables.\nAll instance types are closed at runtime.\n\nYou have only four sorts of types:\n\n- [[ClassOrInterface]]\n- [[UnionType]]\n- [[IntersectionType]]\n- [[nothingType]]"]},"$m":{"exactly":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"type"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["True if the given type is a exactly this type."]},"$nm":"exactly"},"subtypeOf":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"type"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["True if the given type is a subtype of this type."]},"$nm":"subtypeOf"},"typeOf":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"instance"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["True if the given instance is of this type, or is of a subtype of this type."]},"$nm":"typeOf"},"supertypeOf":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"type"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["True if the given type is a supertype of this type."]},"$nm":"supertypeOf"}},"$nm":"Type"},"IntersectionType":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Intersection"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Intersection"}],"$an":{"shared":[],"doc":["A closed intersection type."]},"$at":{"satisfiedTypes":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The list of closed satisfied types of this intersection."]},"$nm":"satisfiedTypes"}},"$nm":"IntersectionType"},"UnionType":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Union"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Union"}],"$an":{"shared":[],"doc":["A closed union type."]},"$at":{"caseTypes":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Union"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The list of closed case types of this union."]},"$nm":"caseTypes"}},"$nm":"UnionType"},"$pkg-shared":"1","FunctionModel":{"satisfies":[{"$pk":"ceylon.language.meta.model","$nm":"Model"},{"$pk":"ceylon.language.meta.model","$nm":"Generic"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Arguments"}],"$an":{"shared":[],"doc":["A function model represents the model of a Ceylon function that you can inspect.\n\nA function model can be either a toplevel [[Function]] or a member [[Method]].\n"]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This function's declaration."],"actual":[]},"$nm":"declaration"},"type":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This function's return closed type."]},"$nm":"type"},"parameterTypes":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This function's parameter closed types"]},"$nm":"parameterTypes"}},"$nm":"FunctionModel"},"ValueModel":{"satisfies":[{"$pk":"ceylon.language.meta.model","$nm":"Model"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Get"},{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Set"}],"$an":{"shared":[],"doc":["A value model represents the model of a Ceylon value that you can inspect.\n\nA value model can be either a toplevel [[Value]] or a member [[Attribute]].\n"]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"ValueDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This value's declaration."],"actual":[]},"$nm":"declaration"},"type":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Get"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This value's closed type."]},"$nm":"type"}},"$nm":"ValueModel"},"ClassModel":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Arguments"}],"$an":{"shared":[],"doc":["A class model represents the model of a Ceylon class that you can inspect.\n\nA class model can be either a toplevel [[Class]] or a member [[MemberClass]].\n"]},"$at":{"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"ClassDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"declaration"},"parameterTypes":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["This function's parameter closed types"]},"$nm":"parameterTypes"}},"$nm":"ClassModel"},"Attribute":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"ValueModel"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"Value"}],"$pk":"ceylon.language.meta.model","$nm":"Member"}],"$mt":"ifc","$tp":[{"variance":"in","$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Get"},{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Set"}],"$an":{"shared":[],"doc":["An attribute model represents the model of a Ceylon attribute that you can read and inspect.\n\nAn attribute is a member value: it is declared on classes or interfaces.\n\nThis is both a [[ValueModel]] and a [[Member]]: you can invoke it with an instance value\nto bind it to that instance and obtain a [[Value]]:\n\n    class Outer(){\n        shared String foo = \"Hello\";\n    }\n    \n    void test(){\n        Attribute<Outer,String> attribute = `Outer.foo`;\n        Value<String> boundAttribute = attribute(Outer());\n        \/\/ This will print: Hello\n        print(boundAttribute.get());\n    }\n"]},"$m":{"bind":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"Value"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"bind"}},"$nm":"Attribute"},"Value":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"ValueModel"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Get"},{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Set"}],"$an":{"shared":[],"doc":["A value model represents the model of a Ceylon value that you can read and inspect.\n\nA value is a toplevel binding, declared on a package.\n\nThis is a [[ValueModel]] that you can query for a value declaration's current value:\n\n    shared String foo = \"Hello\";\n    \n    void test(){\n        Value<String> val = `foo`;\n        \/\/ This will print: Hello\n        print(val.get());\n    }\n"]},"$m":{"get":{"$t":{"$nm":"Get"},"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Reads the current value for this value binding. Note that in the case of getter\nvalues, this can throw if the getter throws."]},"$nm":"get"},"set":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$nm":"Set"},"$mt":"prm","$nm":"newValue"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Changes this variable's value to the given new value. Note that in the case of\nsetter attributes, this can throw if the setter throws."]},"$nm":"set"},"setIfAssignable":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"newValue"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"throws":["MutationException","If this value is not variable"],"doc":["Non type-safe equivalent to [[Value.set]], to be used when you don't know the \nvariable type at compile-time. This only works if the underlying value is \nvariable. Note that if the underlying variable is a setter, this can throw \nexceptions thrown in the setter block."]},"$nm":"setIfAssignable"}},"$nm":"Value"},"InvocationException":{"super":{"$pk":"ceylon.language","$nm":"Exception"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"message"}],"$mt":"cls","$an":{"shared":[],"doc":["Thrown when attempting to invoke something which can't be invoked, like abstract class\ninitialisers."]},"$at":{"message":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$nm":"message"}},"$nm":"InvocationException"},"Function":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"FunctionModel"},{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language","$nm":"Callable"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Arguments"}],"$an":{"shared":[],"doc":["A function model represents the model of a Ceylon function that you can invoke and inspect.\n\nA function is a toplevel binding, declared on a package.\n\nThis is a [[FunctionModel]] that you can also invoke:\n\n    shared String foo(String name) => \"Hello \"+name;\n    \n    void test(){\n        Function<String,[String]> f = `foo`;\n        \/\/ This will print: Hello Stef\n        print(f(\"Stef\"));\n    }\n"]},"$m":{"apply":{"$t":{"$nm":"Type"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"arguments"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"throws":["InvocationException","If there are not enough or too many provided arguments"],"doc":["Type-unsafe function application, to be used when the argument types are unknown until runtime.\n\nThis has the same behaviour as invoking this `Function` directly, but exchanges compile-time type\nsafety with runtime checks."]},"$nm":"apply"}},"$nm":"Function"},"TypeApplicationException":{"super":{"$pk":"ceylon.language","$nm":"Exception"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"message"}],"$mt":"cls","$an":{"shared":[],"doc":["Thrown when declarations are applied with invalid or incompatible type arguments.\n\nFor example if you try to apply `Foo` with `String`, hoping to get a `Foo<String>`\nbut the type parameter for `Foo` only accepts types that satisfy `Numeric`.\n"]},"$at":{"message":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$nm":"message"}},"$nm":"TypeApplicationException"},"MemberClass":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"ClassModel"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Class"}],"$pk":"ceylon.language.meta.model","$nm":"Member"}],"$mt":"ifc","$tp":[{"variance":"in","$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Arguments"}],"$an":{"shared":[],"doc":["A class model represents the model of a Ceylon class that you can instantiate and inspect.\n\nA member class is is declared on classes or interfaces.\n\nThis is both a [[ClassModel]] and a [[Member]]: you can invoke it with an instance value\nto bind it to that instance and obtain a [[Class]]:\n\n    shared class Outer(String name){\n        shared class Inner(){\n            shared String hello => \"Hello \"+name;\n        }\n    }\n    \n    void test(){\n        MemberClass<Outer,Outer.Inner,[]> memberClass = `Outer.Inner`;\n        Class<Outer.Inner,[]> c = memberClass(Outer(\"Stef\"));\n        \/\/ This will print: Hello Stef\n        print(c().hello);\n    }\n"]},"$m":{"bind":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Class"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"bind"}},"$nm":"MemberClass"},"MutationException":{"super":{"$pk":"ceylon.language","$nm":"Exception"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"message"}],"$mt":"cls","$an":{"shared":[],"doc":["Thrown when you try to change the value of a non-variable value"]},"$at":{"message":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$nm":"message"}},"$nm":"MutationException"},"Interface":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"InterfaceModel"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"}],"$an":{"shared":[],"doc":["An interface model that you can inspect."]},"$nm":"Interface"},"Class":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"ClassModel"},{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language","$nm":"Callable"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"variance":"in","$nm":"Arguments"}],"$an":{"shared":[],"doc":["A class model represents the model of a Ceylon class that you can instantiate and inspect.\n\nA class is a toplevel type, declared on a package.\n\nThis is a [[ClassModel]] that you can also invoke to instantiate new instances of the class:\n\n    shared class Foo(String name){\n        shared String hello => \"Hello \"+name;\n    }\n    \n    void test(){\n        Class<Foo,[String]> c = `Foo`;\n        \/\/ This will print: Hello Stef\n        print(c(\"Stef\").hello);\n    }\n"]},"$m":{"apply":{"$t":{"$nm":"Type"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"arguments"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"throws":["InvocationException","If there are not enough or too many provided arguments"],"doc":["Type-unsafe initialiser application, to be used when the argument types are unknown until runtime.\n\nThis has the same behaviour as invoking this `Class` directly, but exchanges compile-time type\nsafety with runtime checks."]},"$nm":"apply"}},"$nm":"Class"},"nothingType":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$mt":"obj","$an":{"shared":[],"doc":["The singleton closed type for [[Nothing|ceylon.language::nothing]]."]},"$m":{"exactly":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"type"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"exactly"},"subtypeOf":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"type"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"subtypeOf"},"typeOf":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"instance"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"typeOf"},"supertypeOf":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"},"$mt":"prm","$nm":"type"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"supertypeOf"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"nothingType"},"Generic":{"$mt":"ifc","$an":{"shared":[],"doc":["A generic model which has closed type arguments."]},"$at":{"typeArguments":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"TypeParameter"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Map"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The map of type parameter declaration to type arguments for this generic model."]},"$nm":"typeArguments"}},"$nm":"Generic"},"ClassOrInterface":{"of":[{"$tp":[{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"ClassModel"},{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"InterfaceModel"}],"satisfies":[{"$pk":"ceylon.language.meta.model","$nm":"Model"},{"$pk":"ceylon.language.meta.model","$nm":"Generic"},{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$mt":"ifc","$tp":[{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"}],"$an":{"shared":[],"doc":["Model of a class or interface that you can inspect.\n\nThe models of classes and interfaces are also closed types."]},"$m":{"getClass":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"MemberClass"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a member class by name. Returns `null` if not found."]},"$nm":"getClass"},"getDeclaredClassOrInterface":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language.meta.model","$nm":"Member"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"}],"$def":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"},"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a member class or interface by name. Returns `null` if not found."]},"$nm":"getDeclaredClassOrInterface"},"getDeclaredInterface":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"MemberInterface"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a member interface by name. Returns `null` if not found."]},"$nm":"getDeclaredInterface"},"getMethod":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Method"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a method by name. Returns `null` if not found."]},"$nm":"getMethod"},"getDeclaredMethod":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"Method"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a method by name. Returns `null` if not found."]},"$nm":"getDeclaredMethod"},"getInterface":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"MemberInterface"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a member interface by name. Returns `null` if not found."]},"$nm":"getInterface"},"getDeclaredAttribute":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"Attribute"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Get"},{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Set"}],"$an":{"shared":[],"formal":[],"throws":["IncompatibleTypeException","If the specified `Container`, `Get` or `Set` type arguments are not compatible with the actual result."],"doc":["Gets an attribute by name. Returns `null` if not found."]},"$nm":"getDeclaredAttribute"},"getAttribute":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Get"},{"$mt":"tpm","$nm":"Set"}],"$pk":"ceylon.language.meta.model","$nm":"Attribute"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Get"},{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Set"}],"$an":{"shared":[],"formal":[],"throws":["IncompatibleTypeException","If the specified `Container`, `Get` or `Set` type arguments are not compatible with the actual result."],"doc":["Gets an attribute by name. Returns `null` if not found."]},"$nm":"getAttribute"},"getClassOrInterface":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Kind"}],"$pk":"ceylon.language.meta.model","$nm":"Member"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"}],"$def":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"ClassOrInterface"},"$nm":"Kind"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a member class or interface by name. Returns `null` if not found."]},"$nm":"getClassOrInterface"},"getDeclaredClass":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$nm":"Type"},{"$mt":"tpm","$nm":"Arguments"}],"$pk":"ceylon.language.meta.model","$nm":"MemberClass"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"},{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"Type"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$nm":"types"}]],"$mt":"mthd","$tp":[{"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"$nm":"Type"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language.meta.model","$nm":"Nothing"},"$nm":"Arguments"}],"$an":{"shared":[],"formal":[],"throws":["TypeApplicationException","If the specified closed type argument values are not compatible with the actual result's type parameters."],"doc":["Gets a member class by name. Returns `null` if not found."]},"$nm":"getDeclaredClass"}},"$at":{"extendedType":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"},{"$mt":"tpm","$pk":"ceylon.language.meta.model","$nm":"Nothing"}],"$pk":"ceylon.language.meta.model","$nm":"ClassModel"}]},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The extended closed type for this class or interface. Note that the [[Anything|ceylon.language::Anything]] type\nhas no extended type since it is the top of the type hierarchy."]},"$nm":"extendedType"},"declaration":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The declaration for this class or interface."],"actual":[]},"$nm":"declaration"},"satisfiedTypes":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language.meta.model","$nm":"InterfaceModel"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The list of closed types that this class or interface satisfies."]},"$nm":"satisfiedTypes"}},"$nm":"ClassOrInterface"},"IncompatibleTypeException":{"super":{"$pk":"ceylon.language","$nm":"Exception"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"message"}],"$mt":"cls","$an":{"shared":[],"doc":["Thrown when you invoke metamodel methods with invalid or incompatible type arguments.\n\nFor example if you try to get an attribute from a class and expect an attribute of `String`\ntype but it is an attribute of `Integer` type.\n"]},"$at":{"message":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$nm":"message"}},"$nm":"IncompatibleTypeException"},"MemberInterface":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"InterfaceModel"},{"$tp":[{"$mt":"tpm","$nm":"Container"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"Interface"}],"$pk":"ceylon.language.meta.model","$nm":"Member"}],"$mt":"ifc","$tp":[{"variance":"in","$nm":"Container"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Type"}],"$an":{"shared":[],"doc":["A member interface model that you can inspect."]},"$m":{"bind":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Type"}],"$pk":"ceylon.language.meta.model","$nm":"Interface"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"container"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"bind"}},"$nm":"MemberInterface"}},"ceylon.language":{"Iterator":{"$mt":"ifc","$tp":[{"variance":"out","$nm":"Element"}],"$an":{"shared":[],"see":["Iterable"],"doc":["Produces elements of an [[Iterable]] object."],"by":["Gavin"]},"$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The next element, or [[finished]] if there are no more \nelements to be iterated."]},"$nm":"next"}},"$nm":"Iterator"},"LateAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"LateAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"ValueDeclaration"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[late]]."]},"$annot":"1","$nm":"LateAnnotation"},"Callable":{"$mt":"ifc","$tp":[{"variance":"out","$nm":"Return"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"variance":"in","$nm":"Arguments"}],"$an":{"shared":[],"see":["Tuple"],"doc":["A reference to a function. The type arguments encode the \n[[return type|Return]] of the function along with its \n[[parameter types|Arguments]]. The parameter types are \nrepresented by a tuple type. Functions declared `void`\nare considered to have the return type `Anything`.\n\nFor example, the type of the function reference \n`plus<Float>` to the function [[plus]] is:\n\n    Callable<Float, [Float,Float]>\n\nwhich we usually abbreviate `Float(Float,Float)`.\n\nA variadic function is represented using an unterminated \ntuple type. For example, the type of the function reference\n`concatenate<Object>` to the function [[concatenate]] is:\n\n    Callable<Object[], [{Object*}*]>\n\nwhich we usually abbreviate `Object({Object*}*)`.\n\nA function with defaulted parameters is represented using\na union type. For example, the type of the method reference\n`process.writeLine` to the method [[process.writeLine]] is:\n\n    Callable<Anything, [String]|[]>\n\nwhich we usually abbreviate `Anything(String=)`.\n\nAny instance of `Callable` may be _invoked_ by supplying a \npositional argument list:\n\n    Float(Float,Float) add = plus<Float>;\n    value four = add(2.0, 2.0);\n\nor by supplying a tuple containing the arguments:\n\n    Float(Float,Float) add = plus<Float>;\n    [Float,Float] twoAndTwo = [2.0, 2.0];\n    value four = add(*twoAndTwo);\n\nThe type of the tuple must be assignable to the type \nargument of `Arguments`.\n\nThis interface may not be implemented by user code."]},"$nm":"Callable"},"ThrownExceptionAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Declaration"},"$mt":"prm","$an":{"shared":[],"doc":["The [[Exception]] type that this thrown."]},"$nm":"type"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$an":{"shared":[],"doc":["A description, in Markdown syntax, of the circumstances \nthat cause this exception to be thrown."]},"$nm":"when"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"ThrownExceptionAnnotation"},{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"ClassDeclaration"}]}],"$pk":"ceylon.language","$nm":"SequencedAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[throws]]."]},"$annot":"1","$at":{"when":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"doc":["A description, in Markdown syntax, of the circumstances \nthat cause this exception to be thrown."]},"$nm":"when"},"type":{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Declaration"},"$mt":"attr","$an":{"shared":[],"doc":["The [[Exception]] type that this thrown."]},"$nm":"type"}},"$nm":"ThrownExceptionAnnotation"},"Array":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"}],"$pk":"ceylon.language","$nm":"Ranged"}],"$mt":"cls","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"final":[],"native":[],"doc":["A fixed-sized array of mutable elements. An _empty_ array \nis an array of [[size]] `0`. Any element of an array may be\nset to a new value.\n\n    value array = Array { \"hello\", \"world\" };\n    array.set(0, \"goodbye\");\n\nThis class is provided primarily to support interoperation \nwith Java, and for some performance-critical low-level \nprogramming tasks."]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["A new array with the same elements as this array."],"actual":[]},"$nm":"clone"},"copyTo":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$mt":"prm","$an":{"doc":["The array into which to copy the elements."]},"$nm":"other"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$def":"1","$an":{"doc":["The index of the first element in this array to copy."]},"$nm":"sourcePosition"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$def":"1","$an":{"doc":["The index in the given array into which to \ncopy the first element."]},"$nm":"destinationPosition"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$def":"1","$an":{"doc":["The number of elements to copy."]},"$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Efficiently copy the elements in the segment\n`sourcePosition:length` of this array to the segment \n`destinationPosition:length` of the given \n[[array|other]]."]},"$nm":"copyTo"},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"get"},"spanTo":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"spanTo"},"segment":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"segment"},"set":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$an":{"doc":["The index of the element to replace."]},"$nm":"index"},{"$t":{"$nm":"Element"},"$mt":"prm","$an":{"doc":["The new element."]},"$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"throws":["AssertionError","if the given index is out of bounds, that is, \nif `index<0` or if `index>lastIndex`"],"doc":["Replace the existing element at the specified index \nwith the given element."]},"$nm":"set"},"spanFrom":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"spanFrom"},"span":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"span"}},"$at":{"lastIndex":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"lastIndex"},"rest":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The rest of the array, without the first element."],"actual":[]},"$nm":"rest"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Reverse this array, returning a new array."],"actual":[]},"$nm":"reversed"},"elements":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"attr","$nm":"elements"}},"$nm":"Array"},"ArraySequence":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"}],"$mt":"cls","$tp":[{"variance":"out","$nm":"Element"}],"$an":{"shared":[],"final":[],"native":[],"see":["SequenceBuilder","SequenceAppender"],"doc":["An immutable [[Sequence]] implemented using an [[Array]]. \nWhere possible, copying of the underlying array is avoided."]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"ArraySequence"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"iterator"},"defines":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"defines"},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"get"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"count"},"spanTo":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"spanTo"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"equals"},"segment":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"segment"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"contains"},"spanFrom":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"spanFrom"},"span":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"span"}},"$at":{"lastIndex":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"lastIndex"},"last":{"$t":{"$nm":"Element"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"last"},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"hash"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"ArraySequence"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"reversed"},"rest":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"rest"},"first":{"$t":{"$nm":"Element"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"first"},"elements":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"attr","$nm":"elements"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"size"}},"$nm":"ArraySequence"},"Singleton":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"}],"$mt":"cls","$tp":[{"variance":"out","$nm":"Element"}],"$an":{"shared":[],"doc":["A sequence with exactly one element, which may be null."]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"},"$mt":"mthd","$an":{"shared":[],"doc":["Returns a `Singleton` with the same element."],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$c":{"SingletonIterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"cls","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"string"},"done":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"done"}},"$nm":"SingletonIterator"}},"$nm":"iterator"},"sort":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"a"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"b"}]],"$mt":"prm","$pt":"f","$nm":"comparing"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"sort"},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns the contained element, if the specified \nindex is `0`."],"actual":[]},"$nm":"get"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns `1` if this `Singleton`'s element\nsatisfies the predicate, or `0` otherwise."],"actual":[]},"$nm":"count"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"doc":["A `Singleton` can be equal to another `List` if \nthat `List` has only one element which is equal to \nthis `Singleton`'s element."],"actual":[]},"$nm":"equals"},"select":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"select"},"segment":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Empty"},{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns a `Singleton` if the given starting index \nis `0` and the given `length` is greater than `0`.\nOtherwise, returns an instance of `Empty`."],"actual":[]},"$nm":"segment"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns `true` if the specified element is this \n`Singleton`'s element."],"actual":[]},"$nm":"contains"},"every":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"every"},"fold":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"initial"},{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"partial"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"fold"},"taking":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"take"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"taking"},"reduce":{"$t":{"$nm":"Element"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"comp":"u","$ts":[{"$nm":"Result"},{"$nm":"Element"}]},"$mt":"prm","$nm":"partial"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"reduce"},"chain":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$nm":"OtherAbsent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$tp":[{"$nm":"Other"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"OtherAbsent"}],"$an":{"shared":[],"actual":[]},"$nm":"chain"},"spanTo":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Empty"},{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanTo"},"any":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"any"},"map":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Singleton"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"map"},"findLast":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"findLast"},"spanFrom":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Empty"},{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanFrom"},"skipping":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"skip"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"skipping"},"find":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"mthd","$nm":"selecting"}},"$nm":"find"},"filter":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"filter"},"collect":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Singleton"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"collect"},"span":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Empty"},{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns a `Singleton` if the given starting index \nis `0`. Otherwise, returns an instance of `Empty`."],"actual":[]},"$nm":"span"}},"$at":{"lastIndex":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `0`."],"actual":[]},"$nm":"lastIndex"},"element":{"$t":{"$nm":"Element"},"$mt":"attr","$nm":"element"},"last":{"$t":{"$nm":"Element"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns the element contained in this `Singleton`."],"actual":[]},"$nm":"last"},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"hash"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"string"},"coalesced":{"$t":{"comp":"u","$ts":[{"$tp":[{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]}],"$pk":"ceylon.language","$nm":"Singleton"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"coalesced"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Singleton"},"$mt":"gttr","$an":{"shared":[],"doc":["Return this singleton."],"actual":[]},"$nm":"reversed"},"rest":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `Empty`."],"actual":[]},"$nm":"rest"},"first":{"$t":{"$nm":"Element"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns the element contained in this `Singleton`."],"actual":[]},"$nm":"first"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `1`."],"actual":[]},"$nm":"size"}},"$nm":"Singleton"},"byKey":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Key"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Key"},"$mt":"prm","$nm":"y"}]],"$mt":"prm","$pt":"f","$nm":"comparing"}],[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"x"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Key"}],"$an":{"shared":[],"see":["byItem"],"doc":["A comparator for `Entry`s which compares their keys \naccording to the given `comparing()` function."]},"$nm":"byKey"},"Comparable":{"of":[{"$nm":"Other"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Comparable"}],"variance":"in","$nm":"Other"}],"$an":{"shared":[],"doc":["The general contract for values whose magnitude can be \ncompared. `Comparable` imposes a total ordering upon\ninstances of any type that satisfies the interface.\n\nIf a type `T` satisfies `Comparable<T>`, then instances \nof `T` may be compared using the comparison operators\n`<`, `>`, `<=`, `>=`.\n\n    assert (x>=0.0);\n\nA _ternary comparison_ is useful for asserting lower and \nupper bounds.\n\n    assert (0.0<=x<1.0);\n\nFinally, the _compare_ operator `<=>` may be used to \nproduce an instance of [[Comparison]].\n\n    switch (x<=>y)\n    case (equal) {\n        print(\"same same\");\n    }\n    case (smaller) {\n        print(\"x smaller\");\n    }\n    case (larger) {\n        print(\"y smaller\");\n    }\n\nThe total order of a type must be consistent with the \ndefinition of equality for the type. That is, there are \nthree mutually exclusive possibilities:\n\n- `x<y`,\n- `x>y`, or\n- `x==y`\n\n(These possibilities are expressed by the enumerated\ninstances [[smaller]], [[larger]], and [[equal]] of\n`Comparison`.)"],"by":["Gavin"]},"$m":{"notLargerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if this value is smaller than or equal to \nthe given value."]},"$nm":"notLargerThan"},"largerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if this value is strictly larger than the \ngiven value."]},"$nm":"largerThan"},"notSmallerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if this value is larger than or equal to the \ngiven value."]},"$nm":"notSmallerThan"},"compare":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"see":["equals"],"doc":["Compares this value with the given value. \nImplementations must respect the constraints that: \n\n- `x==y` if and only if `x<=>y == equal` \n   (consistency with `equals()`), \n- if `x>y` then `y<x` (symmetry), and \n- if `x>y` and `y>z` then `x>z` (transitivity)."]},"$nm":"compare"},"smallerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if this value is strictly smaller than the \ngiven value."]},"$nm":"smallerThan"}},"$nm":"Comparable","$st":"Other"},"Comparison":{"abstract":"1","super":{"$pk":"ceylon.language","$nm":"Basic"},"of":[{"$pk":"ceylon.language","$nm":"larger"},{"$pk":"ceylon.language","$nm":"smaller"},{"$pk":"ceylon.language","$nm":"equal"}],"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$an":{"shared":[],"actual":[]},"$nm":"string"}],"$mt":"cls","$an":{"abstract":[],"shared":[],"see":["Comparable"],"doc":["The result of a comparison between two [[Comparable]] \nobjects."],"by":["Gavin"]},"$m":{"largerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"mthd","$an":{"shared":[],"deprecated":[]},"$nm":"largerThan"},"equal":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"mthd","$an":{"shared":[],"deprecated":[]},"$nm":"equal"},"asSmallAs":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"mthd","$an":{"shared":[],"deprecated":[]},"$nm":"asSmallAs"},"asLargeAs":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"mthd","$an":{"shared":[],"deprecated":[]},"$nm":"asLargeAs"},"smallerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"mthd","$an":{"shared":[],"deprecated":[]},"$nm":"smallerThan"},"unequal":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"mthd","$an":{"shared":[],"deprecated":[]},"$nm":"unequal"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"Comparison"},"AbstractAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"AbstractAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"ClassDeclaration"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[abstract]]."]},"$annot":"1","$nm":"AbstractAnnotation"},"annotation":{"$t":{"$pk":"ceylon.language","$nm":"AnnotationAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"see":["Annotation"],"doc":["Annotation to mark a class as an *annotation class*, or a \ntop-level function as an *annotation constructor*."]},"$annot":"1","$nm":"annotation"},"Empty":{"of":[{"$pk":"ceylon.language","$nm":"empty"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Sequential"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Ranged"}],"$mt":"ifc","$an":{"shared":[],"see":["Sequence"],"doc":["A sequence with no elements. The type `Empty` may be\nabbreviated `[]`, and an instance is produced by the \nexpression `[]`. That is, in the following expression,\n`none` has type `[]` and refers to the value `[]`:\n\n    [] none = [];\n\n(Whether the syntax `[]` refers to the type or the value \ndepends upon how it occurs grammatically.)"]},"$m":{"sort":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"a"},{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"b"}]],"$mt":"prm","$pt":"f","$nm":"comparing"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"sort"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns 0 for any given predicate."],"actual":[]},"$nm":"count"},"segment":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns an `Empty` for any given segment."],"actual":[]},"$nm":"segment"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns `false` for any given element."],"actual":[]},"$nm":"contains"},"by":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"step"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"by"},"every":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"every"},"following":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Other"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"head"}]],"$mt":"mthd","$tp":[{"$nm":"Other"}],"$an":{"shared":[],"actual":[]},"$nm":"following"},"withTrailing":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"actual":[]},"$nm":"withTrailing"},"spanTo":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns an `Empty` for any given span."],"actual":[]},"$nm":"spanTo"},"any":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"any"},"map":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"map"},"spanFrom":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns an `Empty` for any given span."],"actual":[]},"$nm":"spanFrom"},"find":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"find"},"skipping":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"skip"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"skipping"},"clone":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$mt":"mthd","$an":{"shared":[],"doc":["Returns an `Empty`."],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"doc":["Returns an iterator that is already exhausted."],"actual":[]},"$nm":"iterator"},"get":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns `null` for any given index."],"actual":[]},"$nm":"get"},"select":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"select"},"fold":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"initial"},{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"partial"},{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"fold"},"reduce":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"partial"},{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"reduce"},"taking":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"take"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"taking"},"defines":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"defines"},"chain":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$nm":"OtherAbsent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$nm":"OtherAbsent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$tp":[{"$nm":"Other"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"OtherAbsent"}],"$an":{"shared":[],"doc":["Returns `other`."],"actual":[]},"$nm":"chain"},"withLeading":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"actual":[]},"$nm":"withLeading"},"filter":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"filter"},"span":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns an `Empty` for any given span."],"actual":[]},"$nm":"span"},"collect":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"collect"}},"$at":{"lastIndex":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `null`."],"actual":[]},"$nm":"lastIndex"},"last":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `null`."],"actual":[]},"$nm":"last"},"indexed":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns an `Empty`."],"actual":[]},"$nm":"indexed"},"sequence":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns an `Empty`."],"actual":[]},"$nm":"sequence"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns a string description of the empty sequence: \n`[]`."],"actual":[]},"$nm":"string"},"coalesced":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns an `Empty`."],"actual":[]},"$nm":"coalesced"},"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `true`."],"actual":[]},"$nm":"empty"},"rest":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns an `Empty`."],"actual":[]},"$nm":"rest"},"reversed":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns an `Empty`."],"actual":[]},"$nm":"reversed"},"first":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `null`."],"actual":[]},"$nm":"first"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns 0."],"actual":[]},"$nm":"size"}},"$nm":"Empty"},"ActualAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"ActualAnnotation"},{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"}]}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[actual]]."]},"$annot":"1","$nm":"ActualAnnotation"},"SeeAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Declaration"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$an":{"shared":[],"doc":["The program elements being referred to."]},"$nm":"programElements"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"SeeAnnotation"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Annotated"}],"$pk":"ceylon.language","$nm":"SequencedAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[see]]."]},"$annot":"1","$at":{"programElements":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Declaration"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"doc":["The program elements being referred to."]},"$nm":"programElements"}},"$nm":"SeeAnnotation"},"Enumerable":{"of":[{"$nm":"Other"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Ordinal"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Enumerable"}],"variance":"out","$nm":"Other"}],"$an":{"shared":[],"doc":["Abstraction of [[ordinal types|Ordinal]] whose instances \ncan be mapped to the [[integers|Integer]] or to a range of \nintegers."]},"$at":{"integerValue":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The corresponding integer. The implementation must\nsatisfy these constraints:\n\n    (x.successor).integerValue = x.integerValue+1\n    (x.predecessor).integerValue = x.integerValue-1\n\nfor every instance `x` of the enumerable type."]},"$nm":"integerValue"}},"$nm":"Enumerable","$st":"Other"},"empty":{"super":{"$pk":"ceylon.language","$nm":"Object"},"satisfies":[{"$pk":"ceylon.language","$nm":"Empty"}],"$mt":"obj","$an":{"shared":[],"doc":["A sequence with no elements, abbreviated `[]`. The unique \ninstance of the type `[]`."]},"$nm":"empty"},"compose":{"$t":{"$tp":[{"$mt":"tpm","$nm":"X"},{"$mt":"tpm","$nm":"Args"}],"$pk":"ceylon.language","$nm":"Callable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"X"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Y"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Y"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"x"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"Y"},{"$mt":"tpm","$nm":"Args"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"$nm":"X"},{"$nm":"Y"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Args"}],"$an":{"shared":[],"see":["curry","uncurry"],"doc":["Given a function with return type `Y`, and a second \nfunction with a single parameter also of type `Y`, \nreturn the composition of the two functions. The\nfirst function may have any number of parameters.\n\nFor any such functions `f()` and `g()`,\n\n    compose(g,f)(*args)==g(f(*args))\n\nfor every possible argument tuple `args` of `f()`."]},"$nm":"compose"},"DeprecationAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$an":{"shared":[],"doc":["A description, in Markdown syntax, of why the element \nis deprecated, and of what alternatives are available."]},"$nm":"description"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"DeprecationAnnotation"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Annotated"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[deprecated]]."]},"$annot":"1","$at":{"reason":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$mt":"gttr","$an":{"shared":[],"doc":["A description, in Markdown syntax, of why the element \nis deprecated, and what alternatives are available, or \nnull."]},"$nm":"reason"},"description":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"doc":["A description, in Markdown syntax, of why the element \nis deprecated, and of what alternatives are available."]},"$nm":"description"}},"$nm":"DeprecationAnnotation"},"false":{"super":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"obj","$an":{"shared":[],"doc":["A value representing falsity in Boolean logic."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"false"},"Sequential":{"of":[{"$pk":"ceylon.language","$nm":"Empty"},{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$pk":"ceylon.language","$nm":"Ranged"}],"$mt":"ifc","$tp":[{"variance":"out","$nm":"Element"}],"$an":{"shared":[],"see":["Tuple"],"doc":["A possibly-empty, immutable sequence of values. The type \n`Sequential<Element>` may be abbreviated `[Element*]` or \n`Element[]`. \n\n`Sequential` has two enumerated subtypes:\n\n- `Empty`, abbreviated `[]`, represents an empty sequence, \n   and\n- `Sequence<Element>`, abbreviated `[Element+]` represents \n   a non-empty sequence, and has the very important \n   subclass [[Tuple]]."]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["This sequence."],"actual":[]},"$nm":"clone"},"following":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Other"},{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"head"}]],"$mt":"mthd","$tp":[{"$nm":"Other"}],"$an":{"shared":[],"formal":[],"doc":["Produces a sequence with a given [[initial element|head]], \nfollowed by the elements of this sequence."],"actual":[]},"$nm":"following"},"terminal":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Select the last elements of the sequence, returning a \nsequence no longer than the given length. If this \nsequence is shorter than the given length, return this \nsequence. Otherwise return a sequence of the given \nlength."],"actual":[]},"$nm":"terminal"},"trimTrailing":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Trim the elements satisfying the given predicate\nfunction from the end of this sequence, returning a \nsequence no longer than this sequence."],"actual":[]},"$nm":"trimTrailing"},"initial":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Select the first elements of this sequence, returning \na sequence no longer than the given length. If this \nsequence is shorter than the given length, return this \nsequence. Otherwise return a sequence of the given \nlength."],"actual":[]},"$nm":"initial"},"trimLeading":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Trim the elements satisfying the given predicate\nfunction from the start of this sequence, returning \na sequence no longer than this sequence."],"actual":[]},"$nm":"trimLeading"},"repeat":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"times"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Returns a sequence formed by repeating the elements of \nthis sequence the given number of times, or an empty \nsequence if `times<=0`."],"actual":[]},"$nm":"repeat"},"trim":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Trim the elements satisfying the given predicate\nfunction from the start and end of this sequence, \nreturning a sequence no longer than this sequence."],"actual":[]},"$nm":"trim"}},"$at":{"sequence":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["This sequence."],"actual":[]},"$nm":"sequence"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["A string of form `\"[ x, y, z ]\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \ncollection, or the string `\"{}\"` if this collection \nis empty. If the collection iterator produces the value \n`null`, the string representation contains the string \n`\"null\"`."],"actual":[]},"$nm":"string"},"rest":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The rest of the sequence, without the first \nelement."],"actual":[]},"$nm":"rest"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["Reverse this sequence, returning a new sequence."],"actual":[]},"$nm":"reversed"}},"$nm":"Sequential"},"Finished":{"abstract":"1","super":{"$pk":"ceylon.language","$nm":"Basic"},"of":[{"$pk":"ceylon.language","$nm":"finished"}],"$mt":"cls","$an":{"abstract":[],"shared":[],"see":["Iterator"],"doc":["The type of the value that indicates that an [[Iterator]] \nis exhausted and has no more values to return."]},"$nm":"Finished"},"coalesce":{"$t":{"$tp":[{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$an":{"doc":["The values, some of which may be null."]},"$nm":"values"}]],"$mt":"mthd","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"doc":["Return a sequence containing the given values which are not\nnull. If there are no values which are not null, return an \nempty sequence."]},"$nm":"coalesce"},"final":{"$t":{"$pk":"ceylon.language","$nm":"FinalAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a class as final. A `final` class may \nnot be extended. Marking a class as final affects disjoint\ntype analysis."]},"$annot":"1","$nm":"final"},"plus":{"$t":{"$nm":"Value"},"$ps":[[{"$t":{"$nm":"Value"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Value"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Summable"}],"$nm":"Value"}],"$an":{"shared":[],"see":["times","sum"],"doc":["Add the given `Summable` values."]},"$nm":"plus"},"Entry":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$nm":"Key"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"doc":["The key used to access the entry."]},"$nm":"key"},{"$t":{"$nm":"Item"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"doc":["The value associated with the key."]},"$nm":"item"}],"$mt":"cls","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"variance":"out","$nm":"Key"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"variance":"out","$nm":"Item"}],"$an":{"shared":[],"final":[],"doc":["A pair containing a _key_ and an associated value called \nthe _item_. Used primarily to represent the elements of a \n[[Map]]. The type `Entry<Key,Item>` may be abbreviated \n`Key->Item`. An instance of `Entry` may be constructed \nusing the `->` operator:\n\n    String->Person entry = person.name->person;"],"by":["Gavin"]},"$m":{"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Determines if this entry is equal to the given entry. \nTwo entries are equal if they have the same key and \nthe same value."],"actual":[]},"$nm":"equals"}},"$at":{"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"hash"},"pair":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Key"},{"comp":"u","$ts":[{"$nm":"Item"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Item"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Item"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},"$mt":"gttr","$an":{"shared":[],"doc":["A pair (2 element tuple) with the key and\nitem of this entry."]},"$nm":"pair"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns a description of the entry in the form \n`key->item`."],"actual":[]},"$nm":"string"},"item":{"$t":{"$nm":"Item"},"$mt":"attr","$an":{"shared":[],"doc":["The value associated with the key."]},"$nm":"item"},"key":{"$t":{"$nm":"Key"},"$mt":"attr","$an":{"shared":[],"doc":["The key used to access the entry."]},"$nm":"key"}},"$nm":"Entry"},"aInt":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$nm":"aInt"},"Invertable":{"of":[{"$nm":"Other"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Summable"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Invertable"}],"$nm":"Other"}],"$an":{"shared":[],"see":["Integer","Float"],"doc":["Abstraction of [[additive|Summable]] numeric types which \nsupport a unary operation `-x` producing the additive\ninverse of `x`. Every `Invertable` type supports a binary \nsubtraction operation `x-y`.\n\n    Integer negativeOne = -1;\n    Float delta = x-y;\n\nA concrete class that implements this interface should be a \nmathematical _group_. That is, it should have an additive \nidentity, denoted `0`, and satisfy:\n\n- `0+x == x+0 == x`\n- `x + -x == 0`\n\nSubtraction must be defined so that it is consistent with\nthe additive inverse:\n\n- `x - y == x + -y`"],"by":["Gavin"]},"$m":{"minus":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The difference between this number and the given \nnumber. Must produce the value `x + -y`."]},"$nm":"minus"}},"$at":{"positiveValue":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"deprecated":[],"formal":[],"doc":["This value."]},"$nm":"positiveValue"},"negativeValue":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The additive inverse of this value."]},"$nm":"negativeValue"}},"$nm":"Invertable","$st":"Other"},"or":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"T"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"T"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"p"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"T"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"T"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"q"}],[{"$t":{"$nm":"T"},"$mt":"prm","$nm":"t"}]],"$mt":"mthd","$tp":[{"$nm":"T"}],"$an":{"shared":[],"doc":["Returns a function which is the logical \ndisjunction of the given predicate functions."]},"$nm":"or"},"Ordinal":{"of":[{"$nm":"Other"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Ordinal"}],"variance":"out","$nm":"Other"}],"$an":{"shared":[],"see":["Character","Integer","Integral","Enumerable","Range"],"doc":["Abstraction of ordinal types, that is, types with \n[[successor]] and [[predecessor]] operations, including \n[[Integer]] and other [[Integral]] numeric types.\n[[Character]] is also considered an ordinal type.\n\nThe _increment_ operator `++` and _decrement_ operator `--`\nare defined for all `Ordinal` types.\n\n    function increment() {\n        count++;\n    }\n\nAn `Ordinal` type may be used to generate a [[Range]], \nusing the span or segment operators.\n\nThe _span_ operator `..` accepts the first and last values \nof the range.\n\n    0..5    \/\/ [0, 1, 2, 3, 4, 5]\n    0..0    \/\/ [0]\n\nIf the last value is smaller than the first value, the\nrange is reversed.\n\n    5..0    \/\/ [5, 4, 3, 2, 1, 0]\n    0..-5   \/\/ [0, -1, -2, -3, -4, -5]\n\nThe _segment_ operator `:` accepts the first index and \nmaximum length of the subrange.\n\n    0:5     \/\/ [0, 1, 2, 3, 4]\n\nIf the length is nonpositive, the subrange is empty.\n\n    0:0     \/\/ []\n    5:0     \/\/ []\n    0:-5    \/\/ []\n\nMost `Ordinal` types are also [[Enumerable]]."],"by":["Gavin"]},"$at":{"predecessor":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The predecessor of this value."]},"$nm":"predecessor"},"successor":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The successor of this value."]},"$nm":"successor"}},"$nm":"Ordinal","$st":"Other"},"largest":{"$t":{"$nm":"Element"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Element"}],"$an":{"shared":[],"see":["Comparable","smallest","max"],"doc":["Given two `Comparable` values, return largest of the\ntwo."]},"$nm":"largest"},"not":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"T"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"T"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$an":{"doc":["The predicate function to negate"]},"$nm":"p"}],[{"$t":{"$nm":"T"},"$mt":"prm","$nm":"t"}]],"$mt":"mthd","$tp":[{"$nm":"T"}],"$an":{"shared":[],"doc":["Returns a function which is the logical \nnegation of the given predicate function."]},"$nm":"not"},"zipPairs":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"First"},{"comp":"u","$ts":[{"$nm":"Second"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Second"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Second"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"firstElements"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"Second"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"secondElements"}]],"$mt":"mthd","$tp":[{"$nm":"First"},{"$nm":"Second"}],"$an":{"shared":[],"doc":["Given two streams, form a new stream consisting of\nall pairs where, for any given index in the resulting\nstream, the first element of the pair is the element \noccurring at the same index in the first stream, and \nthe second element of the pair is the element occurring \nat the same index in the second stream. The length of \nthe resulting stream is the length of the shorter of the \ntwo given streams.\n\nThus:\n\n    zipPairs(xs,ys)[i]==[xs[i],ys[i]]\n\nfor every `0<=i<min({xs.size,ys.size})`."]},"$nm":"zipPairs"},"system":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"obj","$an":{"shared":[],"native":[],"doc":["Represents the system on which the current process is running.\n\nHolds information about system time and locale."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"},"locale":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Returns the IETF language tag representing the default locale for this system."]},"$nm":"locale"},"nanoseconds":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The elapsed time in nanoseconds since an arbitrary starting point."]},"$nm":"nanoseconds"},"timezoneOffset":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Returns the offset from UTC, in milliseconds, of the default timezone for this system."]},"$nm":"timezoneOffset"},"milliseconds":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The elapsed time in milliseconds since midnight, 1 January 1970."]},"$nm":"milliseconds"}},"$nm":"system"},"unflatten":{"$t":{"$nm":"Return"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$nm":"Args"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"flatFunction"}],[{"$t":{"$nm":"Args"},"$mt":"prm","$nm":"args"}]],"$mt":"mthd","$tp":[{"$nm":"Return"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Args"}],"$an":{"shared":[],"native":[],"see":["flatten"],"doc":["Given a function with parameter types \n`P1`, `P2`, ..., `Pn`, return a function with a single\nparameter of tuple type `[P1, P2, ..., Pn]`.\n\nThat is, if `fun` has type `W(X,Y,Z)` then `unflatten(fun)` \nhas type `W([X,Y,Z])`."]},"$nm":"unflatten"},"native":{"$t":{"$pk":"ceylon.language","$nm":"NativeAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a member whose implementation is defined \nin platform-native code."]},"$annot":"1","$nm":"native"},"formatInteger":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"integer"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$def":"1","$nm":"radix"}]],"$mt":"mthd","$an":{"shared":[],"throws":["AssertionError","if `radix` is not between `minRadix` and `maxRadix`"],"doc":["The string representation of `integer` in the `radix` base.\n`radix` must be between `minRadix` and `maxRadix` included.\n\nIf `integer` is negative, returned string will start by character `-`"]},"$nm":"formatInteger"},"greaterThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"val"}],[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Element"}],"$an":{"shared":[],"deprecated":["use [[Comparable.smallerThan]]"],"doc":["Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement is greater than its element.\nThis is useful in conjunction with methods that receive\na predicate function."]},"$nm":"greaterThan"},"Destroyable":{"$mt":"ifc","$an":{"shared":[],"doc":["Abstract supertype of classes which are instantiated \nas resources in a `try` statement and [[destroyed|destroy]]\nwhether or not an exception propagates out of the `try` block.\nUnlike [[Obtainable]] a single `Destroyable` instance cannot be \nreused between `try` statements: Its scope is the `try` block.\n"]},"$m":{"destroy":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$mt":"prm","$an":{"doc":["The error propagating out of the `try` block, or null"]},"$nm":"error"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Called after completion of a `try` block."]},"$nm":"destroy"}},"$nm":"Destroyable"},"Identifiable":{"$mt":"ifc","$an":{"shared":[],"doc":["The abstract supertype of all types with a well-defined\nnotion of identity. Values of type `Identifiable` may be \ncompared using the `===` operator to determine if they are \nreferences to the same object instance.\n\nFor the sake of convenience, this interface defines a \ndefault implementation of value equality equivalent to \nidentity. Of course, subtypes are encouraged to refine this \nimplementation."],"by":["Gavin"]},"$m":{"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Identity equality comparing the identity of the two \nvalues. May be refined by subtypes for which value \nequality is more appropriate. Implementations must\nrespect the constraint that if `x===y` then `x==y` \n(equality is consistent with identity)."],"actual":[]},"$nm":"equals"}},"$at":{"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"default":[],"see":["identityHash"],"doc":["The system-defined identity hash value of the instance. \nSubtypes which refine `equals()` must also refine \n`hash`, according to the general contract defined by \n[[Object]]."],"actual":[]},"$nm":"hash"}},"$nm":"Identifiable"},"language":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"obj","$an":{"shared":[],"native":[],"doc":["Contains information about the language"]},"$at":{"majorVersion":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The Ceylon language major version."]},"$nm":"majorVersion"},"majorVersionBinary":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The major version of the code generated for the underlying runtime."]},"$nm":"majorVersionBinary"},"minorVersion":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The Ceylon language minor version."]},"$nm":"minorVersion"},"versionName":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The Ceylon language release name."]},"$nm":"versionName"},"releaseVersion":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The Ceylon language release version."]},"$nm":"releaseVersion"},"minorVersionBinary":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The minor version of the code generated for the underlying runtime."]},"$nm":"minorVersionBinary"},"version":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The Ceylon language version."]},"$nm":"version"}},"$nm":"language"},"emptySet":{"super":{"$pk":"ceylon.language","$nm":"Object"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Set"}],"$mt":"obj","$an":{"shared":[],"doc":["An immutable [[Set]] with no elements."]},"$m":{"intersection":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"actual":[]},"$nm":"intersection"},"clone":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator"},"containsAny":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"containsAny"},"superset":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"superset"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"count"},"select":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"select"},"by":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"step"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"by"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"contains"},"every":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"every"},"fold":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"initial"},{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"partial"},{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"fold"},"taking":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"take"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"taking"},"complement":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"actual":[]},"$nm":"complement"},"subset":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"subset"},"exclusiveUnion":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"actual":[]},"$nm":"exclusiveUnion"},"any":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"any"},"union":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"actual":[]},"$nm":"union"},"map":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"map"},"skipping":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"skip"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"skipping"},"find":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"find"},"filter":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"filter"},"collect":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"collect"},"containsEvery":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"containsEvery"}},"$at":{"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"empty"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"size"}},"$nm":"emptySet"},"Throwable":{"abstract":"1","super":{"$pk":"ceylon.language","$nm":"Basic"},"of":[{"$pk":"ceylon.language","$nm":"Exception"},{"$pk":"ceylon.language","$nm":"Error"}],"$ps":[{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$hdn":"1","$mt":"prm","$def":"1","$an":{"doc":["A description of the problem."]},"$nm":"description"},{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$hdn":"1","$mt":"prm","$def":"1","$an":{"shared":[],"doc":["The underlying cause of this exception."]},"$nm":"cause"}],"$mt":"cls","$an":{"abstract":[],"shared":[],"native":[],"doc":["The supertype of instances that can be thrown using the `throw` statement\nand caught using the `catch` clause of the `try` statement. \nSuch instances are used to represent \nproblems, typically _unexpected failures_, with the running program \nand can be classified as either\n[[errors|Error]] which are non-transient and generally unrecoverable \nor [[exceptions|Exception]] which are transient problems which \nmay be recovered from.\n\nThe use of throwables to indicate _expected failures_, that \nis, failures that are usually handled by the immediate \ncaller of an operation, is discouraged. (For example,\nnonexistence of a file should not result in an exception.) \nInstead, the failure should be respresented as a return \nvalue of the operation being called."],"by":["Gavin","Tom"]},"$m":{"addSuppressed":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Throwable"},"$mt":"prm","$nm":"suppressed"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["The given exception was suppressed in order to \npropagate this exception."]},"$nm":"addSuppressed"},"printStackTrace":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"mthd","$an":{"shared":[],"see":["printTrace"],"doc":["Print the stack trace to the standard error of the \nvirtual machine process."]},"$nm":"printStackTrace"}},"$at":{"message":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"see":["cause"],"doc":["A message describing the problem. This default \nimplementation returns the description, if any, or \notherwise the message of the cause, if any."]},"$nm":"message"},"suppressed":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Throwable"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The exceptions that were suppressed in order to \npropagate this exception."]},"$nm":"suppressed"},"cause":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$mt":"attr","$an":{"shared":[],"doc":["The underlying cause of this exception."]},"$nm":"cause"},"description":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$mt":"attr","$an":{"doc":["A description of the problem."]},"$nm":"description"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"actual":[]},"$nm":"string"}},"$nm":"Throwable"},"Null":{"abstract":"1","super":{"$pk":"ceylon.language","$nm":"Anything"},"of":[{"$pk":"ceylon.language","$nm":"null"}],"$mt":"cls","$an":{"abstract":[],"shared":[],"see":["null"],"doc":["The type of the [[null]] value. Any union type of form \n`Null|T` is considered an _optional_ type, whose values\ninclude `null`. Any type of this form may be written as\n`T?` for convenience.\n\nThe `if (exists ... )` construct, or, alternatively,\n`assert (exists ...)`, may be used to narrow an optional \ntype to a _definite_ type, that is, a subtype of \n[[Object]]:\n\n    String? firstArg = process.arguments.first;\n    if (exists firstArg) {\n        print(\"hello \" + firstArg);\n    }\n\nThe `else` operator evaluates its second operand if and \nonly if its first operand is `null`:\n\n    String name = process.arguments.first else \"world\";\n\nThe `then` operator evaluates its second operand when\nits first operand evaluates to `true`, and to `null` \notherwise:\n\n    Float? diff = x>=y then x-y;"],"by":["Gavin"]},"$nm":"Null"},"stringify":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"val"}]],"$mt":"mthd","$nm":"stringify"},"sort":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Element"}],"$an":{"shared":[],"see":["Comparable"],"doc":["Sort the given elements, returning a new sequence."]},"$nm":"sort"},"equalTo":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"val"}],[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Element"}],"$an":{"shared":[],"doc":["Returns a partial function that will compare an element\nto any other element and returns true if they're equal.\nThis is useful in conjunction with methods that receive\na predicate function."]},"$nm":"equalTo"},"suppressedExceptions":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Exception"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Exception"},"$mt":"prm","$nm":"exception"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Returns the exceptions that were suppressed (if any) during the handling of the given exception."]},"$nm":"suppressedExceptions"},"arrayOfSize":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Array"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$an":{"doc":["The size of the resulting array. If the size is \nnon-positive, an empty array will be created."]},"$nm":"size"},{"$t":{"$nm":"Element"},"$mt":"prm","$an":{"doc":["The element value with which to populate the array.\nAll elements of the resulting array will have the \nsame value."]},"$nm":"element"}]],"$mt":"mthd","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"native":[],"throws":["AssertionError","if `size<0` or `size>runtime.maxArraySize`"],"doc":["Create an array of the specified [[size]], populating every \nindex with the given [[element]]. The specified `size` must\nbe in the range `0..runtime.maxArraySize`."]},"$nm":"arrayOfSize"},"Ranged":{"of":[{"$nm":"Span"}],"$mt":"ifc","$tp":[{"variance":"in","$nm":"Index"},{"variance":"out","$nm":"Span"}],"$an":{"shared":[],"see":["List","Sequence","String"],"doc":["Abstract supertype of ranged objects which map a range of \n[[Comparable]] keys to ranges of values. The type parameter \n[[Span]] abstracts the type of the resulting range. A \nsubrange may be obtained from an instance of `Ranged` using\nthe _span_ and _segment_ operators.\n\nThe _span_ operator accepts the first and last indices of \nthe subrange.\n\n    print(\"hello world\"[0..5]); \/\/prints \"hello\"\n    print(\"hello world\"[6..6]); \/\/prints \"w\"\n\nIf the last index is smaller than the first index, the\nsubrange is reversed.\n\n    print(\"hello world\"[5..0]); \/\/prints \"olleh\"\n\nIf the range of indices identified by the first and last\nindices is outside the range of indices of this object, an\nempty subrange is produced.\n\n    print(\"hello world\"[-5..-1]); \/\/prints \"\"\n    print(\"hello world\"[11..11]); \/\/prints \"\"\n\nThe first index may be ommitted, implying that the subrange\nextends forward from the smallest possible index (in this\ncase `runtime.minIntegerValue-1`) to the given index.\n\n    print(\"hello world\"[...5]) \/\/prints \"hello\"\n\nIf the first index is before the first index of this object, \nan empty subrange is produced. (A reversed subrange is \nnever produced.)\n\n    print(\"hello world\"[-5...]); \/\/prints \"\"\n\nThe last index may be ommitted, implying that the subrange \nextends forward from the given index to the largest \npossible index (in this case `runtime.maxIntegerValue+1`).\n\n    print(\"hello world\"[6...]) \/\/prints \"world\"\n\nIf the last index is after the last index of this object, \nan empty subrange is produced. (A reversed subrange is \nnever produced.)\n\n    print(\"hello world\"[11...]); \/\/prints \"\"\n\nThe _segment_ operator accepts the first index and maximum \nlength of the subrange.\n\n    print(\"hello world\"[6:5]) \/\/prints \"world\"\n    print(\"hello world\"[6:0]) \/\/prints \"\"\n\nIf the length is nonpositive, the subrange is empty. If the\nrange of indices identified by the first index and length\nis outside the range of indices of this object, an empty\nsubrange is produced. (A reversed subrange is never \nproduced.)\n\n    print(\"hello world\"[-3:3]) \/\/prints \"\"\n    print(\"hello world\"[11:3]) \/\/prints \"\"\n    print(\"hello world\"[6:-3]) \/\/prints \"\""]},"$m":{"spanTo":{"$t":{"$nm":"Span"},"$ps":[[{"$t":{"$nm":"Index"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Obtain a span containing the mapped values between\nthe start of the receiver and the end index."]},"$nm":"spanTo"},"segment":{"$t":{"$nm":"Span"},"$ps":[[{"$t":{"$nm":"Index"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Obtain a segment containing the mapped values\nstarting from the given index, with the given \nlength."]},"$nm":"segment"},"spanFrom":{"$t":{"$nm":"Span"},"$ps":[[{"$t":{"$nm":"Index"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Obtain a span containing the mapped values between\nthe starting index and the end of the receiver."]},"$nm":"spanFrom"},"span":{"$t":{"$nm":"Span"},"$ps":[[{"$t":{"$nm":"Index"},"$mt":"prm","$nm":"from"},{"$t":{"$nm":"Index"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Obtain a span containing the mapped values between \nthe two given indices."]},"$nm":"span"}},"$nm":"Ranged","$st":"Span"},"OptionalImportAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"OptionalImportAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Import"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[optional]]."]},"$annot":"1","$nm":"OptionalImportAnnotation"},"times":{"$t":{"$nm":"Value"},"$ps":[[{"$t":{"$nm":"Value"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Value"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Numeric"}],"$nm":"Value"}],"$an":{"shared":[],"see":["plus","product"],"doc":["Multiply the given `Numeric` values."]},"$nm":"times"},"entries":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"see":["Iterable.indexed"],"doc":["Given a stream of items, produce a stream of entries. \nFor each non-null item produced by the given stream \nof items, the resulting stream contains an `Entry` \nof form `key->item` where `key` is the index at which\nthe item occurs in the stream of items."]},"$nm":"entries"},"license":{"$t":{"$pk":"ceylon.language","$nm":"LicenseAnnotation"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$an":{"doc":["The name, text, or URL of the license."]},"$nm":"description"}]],"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to specify the URL of the license of a module or \npackage."]},"$annot":"1","$nm":"license"},"FormalAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"FormalAnnotation"},{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"}]}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[formal]]."]},"$annot":"1","$nm":"FormalAnnotation"},"LicenseAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$an":{"shared":[],"doc":["The name, text, or URL of the license."]},"$nm":"description"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"LicenseAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Module"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[license]]."]},"$annot":"1","$at":{"description":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"doc":["The name, text, or URL of the license."]},"$nm":"description"}},"$nm":"LicenseAnnotation"},"Object":{"abstract":"1","super":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"cls","$an":{"abstract":[],"shared":[],"see":["Basic","Null"],"doc":["The abstract supertype of all types representing definite \nvalues. Any two `Object`s may be compared for value \nequality using the `==` and `!=` operators:\n\n    true==false\n    1==\"hello world\"\n    \"hello\"+\" \"+\"world\"==\"hello world\"\n    Singleton(\"hello world\")=={ \"hello world\" }\n\nHowever, since `Null` is not a subtype of `Object`, the\nvalue `null` cannot be compared to any other value using \nthe `==` operator. Thus, value equality is not defined \nfor optional types. This neatly voids the problem of\ndeciding the value of the expression `null==null`, which \nis simply illegal."],"by":["Gavin"]},"$m":{"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Determine if two values are equal. Implementations\nshould respect the constraints that:\n\n- if `x===y` then `x==y` (reflexivity), \n- if `x==y` then `y==x` (symmetry), \n- if `x==y` and `y==z` then `x==z` (transitivity).\n\nFurthermore it is recommended that implementations\nensure that if `x==y` then `x` and `y` have the same \nconcrete class."]},"$nm":"equals"}},"$at":{"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"formal":[],"doc":["The hash value of the value, which allows the value to \nbe an element of a hash-based set or key of a\nhash-based map. Implementations must respect the\nconstraint that if `x==y` then `x.hash==y.hash`."]},"$nm":"hash"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["A developer-friendly string representing the instance. \nConcatenates the name of the concrete class of the \ninstance with the `hash` of the instance. Subclasses \nare encouraged to refine this implementation to produce \na more meaningful representation."]},"$nm":"string"}},"$nm":"Object"},"null":{"super":{"$pk":"ceylon.language","$nm":"Null"},"$mt":"obj","$an":{"shared":[],"doc":["The null value."],"by":["Gavin"]},"$nm":"null"},"min":{"$t":{"comp":"u","$ts":[{"$nm":"Absent"},{"$nm":"Value"}]},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Value"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"Absent"}],"$an":{"shared":[],"see":["Comparable","max","smallest"],"doc":["Given a nonempty stream of `Comparable` values, \nreturn the smallest value in the stream."]},"$nm":"min"},"Float":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"actual":[]},"$nm":"float"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Float"}],"$pk":"ceylon.language","$nm":"Scalar"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Float"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Float"}],"$pk":"ceylon.language","$nm":"Exponentiable"}],"$mt":"cls","$an":{"shared":[],"final":[],"native":[],"doc":["An IEEE 754 64-bit [floating point number][]. A `Float` is \ncapable of approximately representing numeric values \nbetween:\n\n- 2<sup>-1022<\/sup>, approximately \n  1.79769×10<sup>308<\/sup>, and \n- (2-2<sup>-52<\/sup>)×2<sup>1023<\/sup>, \n  approximately 5×10<sup>-324<\/sup>.\n\nZero is represented by distinct instances `+0`, `-0`, but \nthese instances are equal. \n\nIn addition, the following special values exist:\n\n- [[infinity]] and `-infinity`, and \n- undefined values (Not a Number).\n\nAn undefined value is not equal to any other value, not \neven to itself.\n\n[floating point number]: http:\/\/www.validlab.com\/goldberg\/paper.pdf"]},"$m":{"plus":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"plus"},"plusInteger":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"integer"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"plusInteger"},"minus":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"minus"},"times":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"times"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"equals"},"compare":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"compare"},"timesInteger":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"integer"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"timesInteger"},"power":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"power"},"divided":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"divided"}},"$at":{"integer":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"integer"},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"hash"},"negativeValue":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"negativeValue"},"magnitude":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"magnitude"},"strictlyPositive":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determines if this value is a positive number, `+0`, \nor `infinity`. Produces `false` for a negative \nnumber, `-0`, or undefined."]},"$nm":"strictlyPositive"},"float":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"float"},"fractionalPart":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"fractionalPart"},"finite":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"see":["infinite","infinity"],"doc":["Determines whether this value is finite. Produces\n`false` for `infinity`, `-infinity`, and undefined."]},"$nm":"finite"},"sign":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The sign of this value. Produces `1` for a positive \nnumber or `infinity`. Produces `-1` for a negative\nnumber or `-infinity`. Produces `0` for `+0`, `-0`, \nor undefined."],"actual":[]},"$nm":"sign"},"strictlyNegative":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determines if this value is a negative number, `-0`, \nor `-infinity`. Produces `false` for a positive \nnumber, `+0`, or undefined."]},"$nm":"strictlyNegative"},"infinite":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"see":["infinity","finite"],"doc":["Determines whether this value is infinite in \nmagnitude. Produces `true` for `infinity` and \n`-infinity`. Produces `false` for a finite number, \n`+0`, `-0`, or undefined."]},"$nm":"infinite"},"positiveValue":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"positiveValue"},"undefined":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"doc":["Determines whether this value is undefined (that is, \nNot a Number or NaN). The undefined value has the \nproperty that it is not equal (`==`) to itself, as \na consequence the undefined value cannot sensibly \nbe used in most collections."]},"$nm":"undefined"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"string"},"wholePart":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"wholePart"},"negative":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determines if this value is a negative number or\n`-infinity`. Produces `false` for a positive number, \n`+0`, `-0`, or undefined."],"actual":[]},"$nm":"negative"},"positive":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determines if this value is a positive number or\n`infinity`. Produces `false` for a negative number, \n`+0`, `-0`, or undefined."],"actual":[]},"$nm":"positive"}},"$nm":"Float"},"Collection":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"ifc","$tp":[{"variance":"out","$nm":"Element"}],"$an":{"shared":[],"see":["List","Map","Set"],"doc":["Represents an iterable collection of elements of finite \nsize. `Collection` is the abstract supertype of [[List]],\n[[Map]], and [[Set]].\n\nA `Collection` forms a [[Category]] of its elements, and \nis [[Iterable]]. The elements of a collection are not\nnecessarily distinct when compared using [[Object.equals]].\n\nA `Collection` may be [[cloned|clone]]. If a collection is\nimmutable, it is acceptable that `clone()` produce a\nreference to the collection itself. If a collection is\nmutable, `clone()` should produce a collection containing \nreferences to the same elements, with the same structure as \nthe original collection&mdash;that is, it should produce a \nshallow copy of the collection."]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Collection"},"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["A shallow copy of this collection, that is, a \ncollection with identical elements which does not\nchange if this collection changes. If this collection\nis immutable, it is acceptable to return a reference to\nthis collection. If this collection is mutable, a newly\ninstantiated collection must be returned."]},"$nm":"clone"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Return `true` if the given object is an element of\nthis collection. In this default implementation, and in \nmost refining implementations, return `false` \notherwise. An acceptable refining implementation may \nreturn `true` for objects which are not elements of the \ncollection, but this is not recommended. (For example, \nthe `contains()` method of `String` returns `true` for \nany substring of the string.)"],"actual":[]},"$nm":"contains"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["A string of form `\"{ x, y, z }\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \ncollection, or the string `\"{}\"` if this collection \nis empty. If the collection iterator produces the value \n`null`, the string representation contains the string \n`\"<null>\"`."],"actual":[]},"$nm":"string"},"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["Determine if the collection is empty, that is, if it \nhas no elements."],"actual":[]},"$nm":"empty"}},"$nm":"Collection"},"deprecated":{"$t":{"$pk":"ceylon.language","$nm":"DeprecationAnnotation"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$def":"1","$an":{"doc":["A description, in Markdown syntax, of why the element \nis deprecated, and what alternatives are available."]},"$nm":"reason"}]],"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark program elements which should not be \nused anymore."]},"$annot":"1","$nm":"deprecated"},"Range":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$nm":"Element"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"doc":["The start of the range."],"actual":[]},"$nm":"first"},{"$t":{"$nm":"Element"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"doc":["The end of the range."],"actual":[]},"$nm":"last"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"}],"$mt":"cls","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Ordinal"},{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Element"}],"$an":{"shared":[],"final":[],"see":["Ordinal"],"doc":["A range of totally ordered, ordinal values generated by two \nendpoints which are both [[Ordinal]] and [[Comparable]]: \n[[first]] and [[last]].\n\n- If `first<last` the range is increasing,\n- if `first>last`, the range is decreasing, or\n- otherwise, if `first==last`, the range contains exactly\n  one value.\n\nA range is always nonempty, containing at least one value.\n\nA range is a [[Sequence]].\n\nThe _span_ operator `..` is an abbreviation for `Range`\ninstantiation.\n\n    for (i in min..max) { ... }\n    if (char in 'A'..'Z') { ... }\n\nSee [[the documentation for `Ordinal`|Ordinal]] for more\ninformation about the span and segment operators."],"by":["Gavin"]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},"$mt":"mthd","$an":{"shared":[],"doc":["Returns the range itself, since ranges are \nimmutable."],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"doc":["An iterator for the elements of the range."],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"},"current":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"current"}},"$nm":"iterator"}}},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"n"}]],"$mt":"mthd","$an":{"shared":[],"doc":["The element of the range that occurs `n` values after\nthe start of the range. Note that this operation \nis inefficient for large ranges."],"actual":[]},"$nm":"get"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$nm":"selecting"}},"$nm":"count"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Determines if two ranges are the same by comparing\ntheir endpoints."],"actual":[]},"$nm":"equals"},"segment":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"segment"},"next":{"$t":{"$nm":"Element"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"}]],"$mt":"mthd","$nm":"next"},"includesRange":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Determines if this range includes the given range."]},"$nm":"includesRange"},"by":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"step"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"by"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Determines if this range includes the given object."],"actual":[]},"$nm":"contains"},"includes":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"includes"},"taking":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"take"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"taking"},"occurs":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Determines if this range includes the given value."],"actual":[]},"$nm":"occurs"},"shifted":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"shift"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Returns a range of the same length and type as this\nrange, with its endpoints shifted by the given number \nof elements, where:\n\n- a negative [[shift]] measures \n  [[decrements|Ordinal.predecessor]], and \n- a positive `shift` measures \n  [[increments|Ordinal.successor]]."]},"$nm":"shifted"},"spanTo":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanTo"},"containsElement":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Determines if the range includes the given value."]},"$nm":"containsElement"},"spanFrom":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanFrom"},"skipping":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"skip"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"skipping"},"span":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},{"$pk":"ceylon.language","$nm":"Empty"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"span"}},"$at":{"lastIndex":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"doc":["The index of the end of the range."],"actual":[]},"$nm":"lastIndex"},"decreasing":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"doc":["Determines if the range is decreasing."]},"$nm":"decreasing"},"last":{"$t":{"$nm":"Element"},"$mt":"attr","$an":{"shared":[],"doc":["The end of the range."],"actual":[]},"$nm":"last"},"sequence":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns this range."],"actual":[]},"$nm":"sequence"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"string"},"coalesced":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns the range itself, since a Range cannot\ncontain nulls."],"actual":[]},"$nm":"coalesced"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Range"},"$mt":"gttr","$an":{"shared":[],"doc":["Reverse this range, returning a new range."],"actual":[]},"$nm":"reversed"},"rest":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"gttr","$an":{"shared":[],"doc":["The rest of the range, without the start of the\nrange."],"actual":[]},"$nm":"rest"},"first":{"$t":{"$nm":"Element"},"$mt":"attr","$an":{"shared":[],"doc":["The start of the range."],"actual":[]},"$nm":"first"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"doc":["The nonzero number of elements in the range."],"actual":[]},"$nm":"size"}},"$nm":"Range"},"Integral":{"of":[{"$nm":"Other"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Scalar"},{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Enumerable"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Integral"}],"$nm":"Other"}],"$an":{"shared":[],"see":["Integer"],"doc":["Abstraction of integral numeric types. That is, types \nwith no fractional part, including [[Integer]].\n\nThe division operation for integral numeric types results \nin a remainder. Therefore, integral numeric types have \n[[an operation|remainder]], denoted by the _remainder_\noperator `%`, to determine the remainder of any division \noperation.\n\n    if (n%2==0) {\n        print(\"Even!\");\n    }\n\nDivision and the remainder operation should satisfy: \n\n- `x == (x\/y)*y + x%y`\n\nfor any instance `y` other than `0`.\n\n`Integral` numeric types are also [[Ordinal]], so ranges \nof integral values may be produced using the \n[[segment and span operators|Ordinal]].\n    \n    \/\/ Iterate from 0 to 100 inclusive\n    for (i in 0..100) {\n        print(\"The square of ``i`` is ``i^2``\");\n    }\n    \n    \/\/ Iterate all indices of the array, \n    \/\/ from 0 to array.size-1\n    for (i in 0:array.size) {\n        print(array[i]);\n    }"],"by":["Gavin"]},"$m":{"remainder":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"see":["Numeric.divided"],"doc":["The remainder, after dividing this number by the given \nnumber."]},"$nm":"remainder"},"divides":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Determine if this number is a factor of the given \nnumber."]},"$nm":"divides"}},"$at":{"unit":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["Determine if the number is one."]},"$nm":"unit"},"zero":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["Determine if the number is zero."]},"$nm":"zero"}},"$nm":"Integral","$st":"Other"},"max":{"$t":{"comp":"u","$ts":[{"$nm":"Absent"},{"$nm":"Value"}]},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Value"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"Absent"}],"$an":{"shared":[],"see":["Comparable","min","largest"],"doc":["Given a nonempty stream of `Comparable` values, \nreturn the largest value in the stream."]},"$nm":"max"},"SequenceAppender":{"super":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"SequenceBuilder"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}],"$mt":"cls","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"native":[],"see":["SequenceBuilder"],"doc":["Builder utility for constructing nonempty \n[[sequences|Sequential]] by incrementally appending \nelements. A newly-instantiated `SequenceAppender` produces\na nonempty sequence containing the given initial \n[[elements]]."]},"$m":{"append":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"SequenceAppender"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"append"},"appendAll":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"SequenceAppender"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"appendAll"}},"$at":{"sequence":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The resulting nonempty sequence. If no elements have \nbeen appended, a nonempty sequence containing the given \ninitial [[elements]]."],"actual":[]},"$nm":"sequence"},"elements":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"attr","$nm":"elements"}},"$nm":"SequenceAppender"},"smallest":{"$t":{"$nm":"Element"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Element"}],"$an":{"shared":[],"see":["Comparable","largest","min"],"doc":["Given two `Comparable` values, return smallest of the\ntwo."]},"$nm":"smallest"},"larger":{"super":{"$pk":"ceylon.language","$nm":"Comparison"},"$mt":"obj","$an":{"shared":[],"doc":["The value is larger than the given value."]},"$nm":"larger"},"NativeAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"NativeAnnotation"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Annotated"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[native]]."]},"$annot":"1","$nm":"NativeAnnotation"},"byIncreasing":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Value"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"comparable"}],[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"$nm":"Element"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Value"}],"$an":{"shared":[],"see":["byDecreasing"],"doc":["A comparator which orders elements in increasing order \naccording to the `Comparable` returned by the given \n`comparable()` function."]},"$nm":"byIncreasing"},"IntegerRangeBy":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"first"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"last"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"step"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"cls","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Integer"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"},"current":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"var":"1","$mt":"attr","$an":{"variable":[]},"$nm":"current"}},"$nm":"iterator"}}}},"$at":{"last":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$nm":"last"},"first":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$nm":"first"},"step":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$nm":"step"}},"$nm":"IntegerRangeBy"},"true":{"super":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"obj","$an":{"shared":[],"doc":["A value representing truth in Boolean logic."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"true"},"Exponentiable":{"of":[{"$nm":"This"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"This"}],"$pk":"ceylon.language","$nm":"Numeric"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"This"},{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Exponentiable"}],"$nm":"This"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Numeric"}],"$nm":"Other"}],"$an":{"shared":[],"see":["Integer","Float"],"doc":["Abstraction of [[numeric types|Numeric]] that may be raised \nto a power using the _exponentiation_ operator ^.\n\n    function exp(Float x) => e^x;\n\nThe exponentiation operation should obey the usual index\nlaws, including:\n\n- `x^0 = 1`,\n- `x^1 = x`,\n- `x^(-1) = 1\/x` \n- `x^(m+n) = x^m * x^n`\n- `x^(m-n) = x^m \/ x^n`\n- `x^(m*n) = (x^m)^n`\n- `(x*y)^n = x^n * y^n`\n\nwhere `0` is the additive identity, and `1` is the \nmultiplicative identity.\n\nNote that in general, the type of the exponent may be \ndifferent to the numeric type which is exponentiated. For\nexample, a `Rational` number class might be a subtype of\n`Exponentiable<Rational,Integer>`, thus accepting only\nwhole-number exponents."]},"$m":{"power":{"$t":{"$nm":"This"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The result of raising this number to the given power."]},"$nm":"power"}},"$nm":"Exponentiable","$st":"This"},"curry":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$nm":"Rest"}],"$pk":"ceylon.language","$nm":"Callable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Argument"},{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$nm":"Rest"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"f"}],[{"$t":{"$nm":"First"},"$mt":"prm","$nm":"first"}]],"$mt":"mthd","$tp":[{"$nm":"Return"},{"$nm":"Argument"},{"satisfies":[{"$nm":"Argument"}],"$nm":"First"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Argument"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Rest"}],"$an":{"shared":[],"see":["uncurry","compose"],"doc":["Curries a function, returning a function with two \nparameter lists, given a function with at least\none parameter. The first parameter list of the \nreturned function has just the first parameter\nof the original function, and the second parameter\nlist has the remaining parameters.\n\nThat is, if `fun` has type `W(X,Y,Z)` then \n`curry(fun)` has type `W(Y,Z)(X)`."]},"$nm":"curry"},"Character":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"character"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Character"}],"$pk":"ceylon.language","$nm":"Comparable"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Character"}],"$pk":"ceylon.language","$nm":"Enumerable"}],"$mt":"cls","$an":{"shared":[],"final":[],"native":[],"see":["String"],"doc":["A 32-bit [Unicode][] character. Every `Character` has a \nunique [[Integer]]-valued Unicode _code point_.\n\n    Integer piCodePoint = '\\{GREEK SMALL LETTER PI}'.integer; \/\/ #03C0\n    Character pi = #03C0.character; \/\/ GREEK SMALL LETTER PI\n\nCharacters are [[Ordinal]], so character ranges may be\nproduced using the [[segment and span operators|Ordinal]].\n\n    value lowerLatinLetters = 'a'..'z';\n    value upperLatinLetters = 'A':26;\n\nCharacters have a [[natural order|Comparable]] determined\nby their Unicode code points. So, for example, `'a'<'b'`,\nsince `'a'.integer<'b'.integer`.\n\n[Unicode]: http:\/\/www.unicode.org\/"],"by":["Gavin"]},"$m":{"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Determines if the given object is a character with the\nsame code point as this character."],"actual":[]},"$nm":"equals"},"compare":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Compare this character with the given string character, \naccording to the Unicode code points of the characters."],"actual":[]},"$nm":"compare"}},"$at":{"control":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determine if this character is an ISO control \ncharacter."]},"$nm":"control"},"successor":{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The character with the unicode code point that is one\nless than this character."],"actual":[]},"$nm":"successor"},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The code point of the character."],"actual":[]},"$nm":"hash"},"integer":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The code point of the character."]},"$nm":"integer"},"lowercased":{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The lowercase representation of this character, in the\n[[system]] default locale."]},"$nm":"lowercased"},"letter":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determine if this character is a letter. That is, if \nits Unicode general category is *Lu*, *Ll*, *Lt*, *Lm*,\nor *Lo*."]},"$nm":"letter"},"uppercased":{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The uppercase representation of this character, in the\n[[system]] default locale."]},"$nm":"uppercased"},"whitespace":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determine if this character is a whitespace character. \nThe following characters are whitespace characters:\n\n- *LINE FEED*, `\\n` or `\\{#000A}`,\n- *FORM FEED*, `\\f` or `\\{#000C}`,\n- *CARRIAGE RETURN*, `\\r` or `\\{#000D}`,\n- *HORIZONTAL TABULATION*, `\\t` or `\\{#0009}`,\n- *VERTICAL TABULATION*, `\\{#000B}`,\n- *FILE SEPARATOR*, `\\{#001C}`,\n- *GROUP SEPARATOR*, `\\{#001D}`,\n- *RECORD SEPARATOR*, `\\{#001E}`,\n- *UNIT SEPARATOR*, `\\{#001F}`, and\n- any Unicode character in the general category *Zs*, \n  *Zl*, or *Zp* that is not a non-breaking space."]},"$nm":"whitespace"},"titlecased":{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The title case representation of this character."]},"$nm":"titlecased"},"character":{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"attr","$nm":"character"},"predecessor":{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The character with the unicode code point that is one\ngreater than this character."],"actual":[]},"$nm":"predecessor"},"uppercase":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determine if this is an uppercase representation of the\ncharacter. That is, if its Unicode general category is \n*Lu*."]},"$nm":"uppercase"},"digit":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determine if this character is a numeric digit. That \nis, if its Unicode general category is *Nd*."]},"$nm":"digit"},"lowercase":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determine if this is a lowercase representation of the\ncharacter. That is, if its Unicode general category is \n*Ll*."]},"$nm":"lowercase"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["A string containing just this character."],"actual":[]},"$nm":"string"},"integerValue":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The code point of the character."],"actual":[]},"$nm":"integerValue"},"titlecase":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Determine if this is a title case representation of the\ncharacter. That is, if its Unicode general category is \n*Lt*."]},"$nm":"titlecase"}},"$nm":"Character"},"Keys":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Correspondence"},"$mt":"prm","$nm":"correspondence"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Category"}],"$mt":"cls","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"variance":"in","$nm":"Key"},{"variance":"out","$nm":"Item"}],"$m":{"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"contains"}},"$at":{"correspondence":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Correspondence"},"$mt":"attr","$nm":"correspondence"}},"$nm":"Keys"},"forKey":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Key"},"$mt":"prm","$nm":"key"}]],"$mt":"prm","$pt":"f","$nm":"resulting"}],[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"entry"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Key"},{"$nm":"Result"}],"$an":{"shared":[],"see":["forItem"],"doc":["A function that returns the result of the given `resulting()` function \non the key of a given `Entry`."]},"$nm":"forKey"},"process":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"obj","$an":{"shared":[],"native":[],"doc":["Represents the current process (instance of the virtual\nmachine)."],"by":["Gavin","Tako"]},"$m":{"flushError":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Flush the standard error of the \nvirtual machine process."]},"$nm":"flushError"},"flush":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Flush the standard output of the \nvirtual machine process."]},"$nm":"flush"},"readLine":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Read a line of input text from the standard input \nof the virtual machine process. Returns a line of\ntext after removal of line-termination characters,\nor `null` to indicate the EOT character."]},"$nm":"readLine"},"writeErrorLine":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$def":"1","$nm":"line"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Print a line to the standard error of the \nvirtual machine process."]},"$nm":"writeErrorLine"},"writeError":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Print a string to the standard error of the \nvirtual machine process."]},"$nm":"writeError"},"propertyValue":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["The value of the given system property of the virtual\nmachine, if any."]},"$nm":"propertyValue"},"namedArgumentValue":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["The value of the first argument of form `-name=value`, \n`--name=value`, or `-name value` specified among the \ncommand line arguments to the virtual machine, if\nany."]},"$nm":"namedArgumentValue"},"write":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Print a string to the standard output of the \nvirtual machine process."]},"$nm":"write"},"namedArgumentPresent":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"name"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Determine if an argument of form `-name` or `--name` \nwas specified among the command line arguments to \nthe virtual machine."]},"$nm":"namedArgumentPresent"},"writeLine":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$def":"1","$nm":"line"}]],"$mt":"mthd","$an":{"shared":[],"see":["print"],"doc":["Print a line to the standard output of the \nvirtual machine process."]},"$nm":"writeLine"},"exit":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"code"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Force the virtual machine to terminate with \nthe given exit code."]},"$nm":"exit"}},"$at":{"arguments":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The command line arguments to the virtual machine."]},"$nm":"arguments"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"process"},"product":{"$t":{"$nm":"Value"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Numeric"}],"$nm":"Value"}],"$an":{"shared":[],"see":["sum"],"doc":["Given a nonempty stream of [[Numeric]] values, return the \nproduct of the values."]},"$nm":"product"},"forItem":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Item"},"$mt":"prm","$nm":"item"}]],"$mt":"prm","$pt":"f","$nm":"resulting"}],[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"entry"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Item"},{"$nm":"Result"}],"$an":{"shared":[],"see":["forKey"],"doc":["A function that returns the result of the given `resulting()` function \non the item of a given `Entry`."]},"$nm":"forItem"},"shuffle":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Result"},{"$mt":"tpm","$nm":"FirstArgs"}],"$pk":"ceylon.language","$nm":"Callable"},{"$mt":"tpm","$nm":"SecondArgs"}],"$pk":"ceylon.language","$nm":"Callable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Result"},{"$mt":"tpm","$nm":"SecondArgs"}],"$pk":"ceylon.language","$nm":"Callable"},{"$mt":"tpm","$nm":"FirstArgs"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"f"}]],"$mt":"mthd","$tp":[{"$nm":"Result"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"FirstArgs"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"SecondArgs"}],"$an":{"shared":[],"see":["curry"],"doc":["Given a function with two parameter lists, return\na function with the order of the argument lists \nreversed. The parameter lists may have any number\nof parameters.\n\nThat is, if `fun` has type `W(A,B)(X,Y,Z)` then \n`shuffle(fun)` has type `W(X,Y,Z)(A,B)`.\n\nThis function is often used in conjunction with\n`curry()`."]},"$nm":"shuffle"},"ConstrainedAnnotation":{"of":[{"$nm":"Value"}],"satisfies":[{"$pk":"ceylon.language","$nm":"Annotation"}],"$mt":"ifc","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotation"}],"$def":{"$pk":"ceylon.language","$nm":"Annotation"},"variance":"out","$nm":"Value"},{"$def":{"$pk":"ceylon.language","$nm":"Anything"},"variance":"out","$nm":"Values"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotated"}],"$def":{"$pk":"ceylon.language","$nm":"Nothing"},"variance":"in","$nm":"ProgramElement"}],"$an":{"shared":[],"see":["Annotation"],"doc":["An annotation constrained to appear only on certain \nprogram elements, and only with certain values. \n\nThis interface should not be satisfied directly. \nInstead either [[OptionalAnnotation]] or [[SequencedAnnotation]] \nshould be satisfied."]},"$m":{"occurs":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Annotated"},"$mt":"prm","$nm":"programElement"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Can this annotation occur on the given program \nelement?"]},"$nm":"occurs"}},"$nm":"ConstrainedAnnotation","$st":"Value"},"Annotation":{"of":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Annotation"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"ConstrainedAnnotation"}],"$mt":"ifc","$an":{"shared":[],"see":["OptionalAnnotation","SequencedAnnotation","annotations","optionalAnnotation","sequencedAnnotations"],"doc":["The supertype of all *annotation classes*. \n\n### Annotation classes\n\nAn *annotation class* must satisfy `Annotation`,\n[[OptionalAnnotation]],  or [[SequencedAnnotation]] and must be \nannotated `final annotation`. For example:\n\n    \"An annotation class.\"\n    final annotation class Example(shared String description) \n          satisfies Annotation {}\n\nAnnotation classes which satisfy `Annotation` directly may be applied \nto any program element that supports annotations (see [[Annotated]]). \nIn practice, annotation classes often satisfy [[OptionalAnnotation]] \nor [[SequencedAnnotation]] in order to prevent annotations being \napplied to inappropriate program elements.\n\nEach initializer parameter of an annotation class must have one of the \nfollowing types:\n\n* `Integer`, `Float`, `Character`, or `String`,\n* an enumerated type whose cases are all anonymous classes, \n  such as `Boolean`,\n* a subtype of [[ceylon.language.meta.declaration::Declaration]]\n* an annotation class,\n* `{T*}` or `[T*]` where `T` is a legal annotation parameter type, or\n* any tuple type whose element types are legal annotation parameter types.\n\nAn initializer parameter of an annotation class may be variadic \nor defaulted.\n\n### Annotation constructors\n\nAn *annotation constructor* is simply a top level function, annotated with \n`annotation` whose return type is an annotation class type. For example:\n\n    \"An annotation constructor.\"\n    annotation Example example(String description=\"\") \n        => Example(description);\n\nEach parameter of an annotation constructor must have one of the \nfollowing types:\n\n* `Integer`, `Float`, `Character`, or `String`,\n* an enumerated type whose cases are all anonymous classes, \n  such as `Boolean`,\n* a subtype of [[ceylon.language.meta.declaration::Declaration]],\n* an annotation type,\n* `{T*}` or `[T*]` where `T` is a legal annotation constructor parameter \n  type, or\n* any tuple type whose element types are legal annotation constructor \n  parameter types.\n\nA parameter of an annotation constructor may be variadic or defaulted.\n\nThe constructor must simply instantiate and return the annotation class, \nand there are strict rules about the arguments to the instantiation.\n\nAn annotation class can have multiple annotation constructors.\n"]},"$nm":"Annotation"},"nothing":{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"gttr","$an":{"shared":[],"throws":["AssertionError","when evaluated"],"doc":["A value getter of type `Nothing`. The expression `nothing`\nis formally assignable to any type, but produces an \nexception when evaluated.\n\n(This is most useful for tool-generated implementations of\n`formal` members.)"]},"$nm":"nothing"},"doc":{"$t":{"$pk":"ceylon.language","$nm":"DocAnnotation"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$an":{"doc":["Documentation, in Markdown syntax, about the annotated element"]},"$nm":"description"}]],"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to specify API documentation of a program\nelement."]},"$annot":"1","$nm":"doc"},"emptyMap":{"super":{"$pk":"ceylon.language","$nm":"Object"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Map"}],"$mt":"obj","$an":{"shared":[],"doc":["An immutable [[Map]] with no entries."]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Map"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator"},"containsAny":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"containsAny"},"get":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"get"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"count"},"select":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"select"},"by":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"step"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"by"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"contains"},"every":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"every"},"mapItems":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Map"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"key"},{"$t":{"$pk":"ceylon.language","$nm":"Nothing"},"$mt":"prm","$nm":"item"}]],"$mt":"prm","$pt":"f","$nm":"mapping"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"mapItems"},"fold":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"initial"},{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"partial"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"fold"},"taking":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"take"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"taking"},"defines":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"defines"},"any":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"any"},"map":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"map"},"skipping":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"skip"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"skipping"},"find":{"$t":{"$pk":"ceylon.language","$nm":"Null"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"find"},"filter":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Map"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"filter"},"collect":{"$t":{"$pk":"ceylon.language","$nm":"Empty"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"actual":[]},"$nm":"collect"},"containsEvery":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"containsEvery"}},"$at":{"values":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Collection"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"values"},"keys":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Collection"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"keys"},"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"empty"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"size"}},"$nm":"emptyMap"},"Scalar":{"of":[{"$nm":"Other"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Numeric"},{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Comparable"},{"$pk":"ceylon.language","$nm":"Number"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Scalar"}],"$nm":"Other"}],"$an":{"shared":[],"see":["Integer","Float"],"doc":["Abstraction of [[numeric|Numeric]] types representing \nscalar values with a natural [[total order|Comparable]], \nincluding the built-in numeric types [[Integer]] and \n[[Float]].\n\n`Scalar`s have a well-defined [[magnitude]], which should\nsatisfy:\n\n- `x.magnitude >= 0`\n- `x.magnitude == 0` iff `x==0`\n\nwhere `0` is the additive identity of the numeric type."],"by":["Gavin"]},"$m":{"plusInteger":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"integer"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The result of adding this number to the given \n[[Integer]]."]},"$nm":"plusInteger"},"timesInteger":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"integer"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The result of multiplying this number by the given \n[[Integer]]."]},"$nm":"timesInteger"}},"$at":{"magnitude":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The magnitude of this number. Must satisfy: \n\n- `magnitude>=0` \n- `magnitude==0` iff `this==0`\n\nwhere `0` is the additive identity."],"actual":[]},"$nm":"magnitude"},"wholePart":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"wholePart"},"negative":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["Determine if the number is strictly negative, that is, \nif `this<0`, where `0` is the additive identity."],"actual":[]},"$nm":"negative"},"positive":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["Determine if the number is strictly positive, that is, \nif `this>0`, where `0` is the additive identity."],"actual":[]},"$nm":"positive"},"fractionalPart":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"fractionalPart"}},"$nm":"Scalar","$st":"Other"},"AuthorsAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$an":{"shared":[],"doc":["The authors, in Markdown syntax, of the annotated element"]},"$nm":"authors"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"AuthorsAnnotation"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Annotated"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[by]]."]},"$annot":"1","$at":{"authors":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"doc":["The authors, in Markdown syntax, of the annotated element"]},"$nm":"authors"}},"$nm":"AuthorsAnnotation"},"ifExists":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"val"}]],"$mt":"prm","$pt":"f","$nm":"predicate"}],[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"val"}]],"$mt":"mthd","$m":{"predicate":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"val"}]],"$mt":"mthd","$nm":"predicate"}},"$nm":"ifExists"},"tagged":{"$t":{"$pk":"ceylon.language","$nm":"TagsAnnotation"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$an":{"doc":["The tags, in plain text."]},"$nm":"tags"}]],"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to categorize the API by tag."]},"$annot":"1","$nm":"tagged"},"printAll":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$def":"1","$an":{"doc":["A character sequence to use to separate the values"]},"$nm":"separator"}]],"$mt":"mthd","$an":{"shared":[],"see":["write"],"doc":["Print multiple values to the standard output of the virtual \nmachine process as a single line of text, separated by a\ngiven character sequence."],"by":["Gavin"]},"$nm":"printAll"},"SequenceBuilder":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"cls","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"native":[],"see":["SequenceAppender","concatenate","Singleton"],"doc":["Builder utility for constructing immutable \n[[sequences|Sequential]] by incrementally appending \nelements. A newly-instantiated `SequenceBuilder` produces\nthe [[empty sequence|empty]] `[]`."]},"$m":{"append":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"SequenceBuilder"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"native":[],"doc":["Append an [[element]] to the sequence and return this \nbuilder"]},"$nm":"append"},"appendAll":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"SequenceBuilder"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"native":[],"doc":["Append multiple [[elements]] to the sequence and return \nthis builder"]},"$nm":"appendAll"}},"$at":{"sequence":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"default":[],"native":[],"doc":["The resulting sequence. If no elements have been \nappended, the [[empty sequence|empty]] `[]`."]},"$nm":"sequence"},"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"doc":["Determine if the resulting [[sequence]] is empty."]},"$nm":"empty"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"doc":["The size of the resulting [[sequence]]."]},"$nm":"size"}},"$nm":"SequenceBuilder"},"variable":{"$t":{"$pk":"ceylon.language","$nm":"VariableAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark an value as variable. A `variable` value \nmay be assigned multiple times."]},"$annot":"1","$nm":"variable"},"Correspondence":{"$mt":"ifc","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"variance":"in","$nm":"Key"},{"variance":"out","$nm":"Item"}],"$an":{"shared":[],"see":["Map","List","Category"],"doc":["Abstract supertype of objects which associate values with \nkeys.\n\n`Correspondence` does not satisfy [[Category]], since in \nsome cases&mdash;`List`, for example&mdash;it is convenient \nto consider the subtype a `Category` of its values, and in \nother cases&mdash;`Map`, for example&mdash;it is convenient \nto treat the subtype as a `Category` of its \n[[entries|Entry]].\n\nThe item corresponding to a given key may be obtained from \na `Correspondence` using the item operator:\n\n    value bg = settings[\"backgroundColor\"] else white;\n\nThe `get()` operation and item operator result in an\noptional type, to reflect the possibility that there may be\nno item for the given key."],"by":["Gavin"]},"$m":{"definesAny":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"keys"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["Correspondence.defines"],"doc":["Determines if this `Correspondence` defines a value\nfor any one of the given keys."]},"$nm":"definesAny"},"defines":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Key"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["Correspondence.definesAny","Correspondence.definesEvery","Correspondence.keys"],"doc":["Determines if there is a value defined for the \ngiven key."]},"$nm":"defines"},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Item"}]},"$ps":[[{"$t":{"$nm":"Key"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"see":["Correspondence.items"],"doc":["Returns the value defined for the given key, or \n`null` if there is no value defined for the given \nkey."]},"$nm":"get"},"items":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Item"}]}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"keys"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["Correspondence.get"],"doc":["Returns the items defined for the given keys, in\nthe same order as the corresponding keys."]},"$nm":"items"},"definesEvery":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"keys"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["Correspondence.defines"],"doc":["Determines if this `Correspondence` defines a value\nfor every one of the given keys."]},"$nm":"definesEvery"}},"$at":{"keys":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Category"},"$mt":"gttr","$an":{"shared":[],"default":[],"see":["Correspondence.defines"],"doc":["The `Category` of all keys for which a value is \ndefined by this `Correspondence`."]},"$nm":"keys"}},"$nm":"Correspondence"},"apply":{"$t":{"$nm":"Return"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$nm":"Args"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"f"},{"$t":{"$nm":"Args"},"$mt":"prm","$nm":"args"}]],"$mt":"mthd","$tp":[{"$nm":"Return"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Args"}],"$an":{"shared":[],"see":["unflatten"],"doc":["Applies an arbitrary `Callable` to the specified arguments. The arguments\nare taken packaged in a tuple whose type is compatible with the `Callable`\narguments tuple.\n\nIn practice, this behaves as if the `Callable` were called with the elements\nof the tuple used as its arguments."]},"$nm":"apply"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$an":{"shared":[],"doc":["A count of the number of `true` items in the given values."]},"$nm":"count"},"byItem":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Item"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Item"},"$mt":"prm","$nm":"y"}]],"$mt":"prm","$pt":"f","$nm":"comparing"}],[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"x"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Entry"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Item"}],"$an":{"shared":[],"see":["byKey"],"doc":["A comparator for `Entry`s which compares their items \naccording to the given `comparing()` function."]},"$nm":"byItem"},"FinalAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"FinalAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"ClassDeclaration"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[final]]."]},"$annot":"1","$nm":"FinalAnnotation"},"by":{"$t":{"$pk":"ceylon.language","$nm":"AuthorsAnnotation"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$an":{"doc":["The authors, in Markdown syntax, of the annotated element"]},"$nm":"authors"}]],"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to specify API authors."]},"$annot":"1","$nm":"by"},"every":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$an":{"shared":[],"see":["any"],"doc":["Determines if every one of the given boolean values \n(usually a comprehension) is `true`."]},"$nm":"every"},"concatenate":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$an":{"doc":["The iterable objects to concatenate."]},"$nm":"iterables"}]],"$mt":"mthd","$tp":[{"$nm":"Element"}],"$an":{"shared":[],"see":["SequenceBuilder","expand"],"doc":["Given a list of iterable objects, return a new sequence \nof all elements of the all given objects. If there are\nno arguments, or if none of the arguments contains any\nelements, return the empty sequence."]},"$nm":"concatenate"},"$pkg-shared":"1","Tuple":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$nm":"First"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"doc":["The first element of this tuple."],"actual":[]},"$nm":"first"},{"$t":{"$nm":"Rest"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"doc":["A tuple with the elements of this tuple, except\nfor the first element."],"actual":[]},"$nm":"rest"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"}],"$mt":"cls","$tp":[{"variance":"out","$nm":"Element"},{"satisfies":[{"$nm":"Element"}],"variance":"out","$nm":"First"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$def":{"$pk":"ceylon.language","$nm":"Empty"},"variance":"out","$nm":"Rest"}],"$an":{"shared":[],"final":[],"doc":["A _tuple_ is a typed linked list. Each instance of \n`Tuple` represents the value and type of a single link.\nThe attributes `first` and `rest` allow us to retrieve\na value form the list without losing its static type \ninformation.\n\n    value point = Tuple(0.0, Tuple(0.0, Tuple(\"origin\")));\n    Float x = point.first;\n    Float y = point.rest.first;\n    String label = point.rest.rest.first;\n\nUsually, we abbreviate code involving tuples.\n\n    [Float,Float,String] point = [0.0, 0.0, \"origin\"];\n    Float x = point[0];\n    Float y = point[1];\n    String label = point[2];\n\nA list of types enclosed in brackets is an abbreviated \ntuple type. An instance of `Tuple` may be constructed \nby surrounding a value list in brackets:\n\n    [String,String] words = [\"hello\", \"world\"];\n\nThe index operator with a literal integer argument is a \nshortcut for a chain of evaluations of `rest` and \n`first`. For example, `point[1]` means `point.rest.first`.\n\nA _terminated_ tuple type is a tuple where the type of\nthe last link in the chain is `Empty`. An _unterminated_ \ntuple type is a tuple where the type of the last link\nin the chain is `Sequence` or `Sequential`. Thus, a \nterminated tuple type has a length that is known\nstatically. For an unterminated tuple type only a lower\nbound on its length is known statically.\n\nHere, `point` is an unterminated tuple:\n\n    String[] labels = ... ;\n    [Float,Float,String*] point = [0.0, 0.0, *labels];\n    Float x = point[0];\n    Float y = point[1];\n    String? firstLabel = point[2];\n    String[] allLabels = point[2...];"],"by":["Gavin"]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$nm":"Rest"}],"$pk":"ceylon.language","$nm":"Tuple"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"current":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"current"}},"$nm":"iterator"}}},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"get"},"spanTo":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanTo"},"segment":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"segment"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"contains"},"withLeading":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]},{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$nm":"Rest"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$an":{"doc":["The first element of the resulting tuple."]},"$nm":"element"}]],"$mt":"mthd","$tp":[{"$nm":"Other"}],"$an":{"shared":[],"doc":["Returns a new tuple that starts with the specified\nelement, followed by the elements of this tuple."],"actual":[]},"$nm":"withLeading"},"spanFrom":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanFrom"},"span":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"end"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"span"}},"$at":{"lastIndex":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"lastIndex"},"last":{"$t":{"$nm":"Element"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"last"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"reversed"},"rest":{"$t":{"$nm":"Rest"},"$mt":"attr","$an":{"shared":[],"doc":["A tuple with the elements of this tuple, except\nfor the first element."],"actual":[]},"$nm":"rest"},"first":{"$t":{"$nm":"First"},"$mt":"attr","$an":{"shared":[],"doc":["The first element of this tuple."],"actual":[]},"$nm":"first"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"size"}},"$nm":"Tuple"},"lessThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"val"}],[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Element"}],"$an":{"shared":[],"deprecated":["use [[Comparable.largerThan]]"],"doc":["Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement is less than its element.\nThis is useful in conjunction with methods that receive\na predicate function."]},"$nm":"lessThan"},"maxRadix":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$nm":"maxRadix"},"identityHash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Identifiable"},"$mt":"prm","$nm":"x"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"see":["identical"],"doc":["Return the system-defined identity hash value of the \ngiven value. This hash value is consistent with \nidentity equality."]},"$nm":"identityHash"},"uncurry":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Argument"},{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$nm":"Rest"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$nm":"Rest"}],"$pk":"ceylon.language","$nm":"Callable"},"$ps":[[{"$t":{"$nm":"First"},"$mt":"prm","$nm":"first"}]],"$mt":"prm","$pt":"f","$nm":"f"}]],"$mt":"mthd","$tp":[{"$nm":"Return"},{"$nm":"Argument"},{"satisfies":[{"$nm":"Argument"}],"$nm":"First"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Argument"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Rest"}],"$an":{"shared":[],"see":["curry","compose"],"doc":["Uncurries a function, returning a function with \none parameter list, given a function with two\nparameter lists, where the first parameter list\nhas exactly one parameter. The parameter list\nof the returned function has the parameter of\nthe first parameter list of the original\nfunction, followed by all parameters of the\nsecond parameter list.\n\nThat is, if `fun` has type `W(Y,Z)(X)` then \n`uncurry(fun)` has type `W(X,Y,Z)`."]},"$nm":"uncurry"},"any":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$an":{"shared":[],"see":["every"],"doc":["Determines if any one of the given boolean values \n(usually a comprehension) is `true`."]},"$nm":"any"},"optional":{"$t":{"$pk":"ceylon.language","$nm":"OptionalImportAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to specify that a module can be executed even if \nthe annotated dependency is not available."]},"$annot":"1","$nm":"optional"},"Summable":{"of":[{"$nm":"Other"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Summable"}],"$nm":"Other"}],"$an":{"shared":[],"see":["String","Numeric"],"doc":["Abstraction of types which support a binary addition\noperator `x + y`. For [[numeric types|Numeric]], this is\njust familiar numeric addition. For [[String]], it is\nstring concatenation.\n    \n    Integer next = current + 1;\n    String helloWorld = \"hello\" + \" \" + \"world\";\n\nA concrete class that implements this interface should be \na mathematical _semigroup_. That is, the addition \noperation should be associative, satisfying:\n\n- `(x+y)+z == x+(y+z)`\n\nA `Summable` type might be a _monoid_, that is, a \nsemigroup with an additive identity element, usually \ndenoted `0`, but this is not required. For example:\n\n- `String` is a monoid with identity element `\"\"`, \n- `Float` is a monoid with identity element `0.0`, and \n- `Integer` is a monoid with identity element `0`.\n\nFor any monoid, the addition operation must satisfy:\n\n- `x + 0 == x`"],"by":["Gavin"]},"$m":{"plus":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The result of adding the given value to this value. \nThis operation should never perform any kind of \nmutation upon either the receiving value or the \nargument value."]},"$nm":"plus"}},"$nm":"Summable","$st":"Other"},"expand":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"comp":"u","$mt":"tpm","$ts":[{"$nm":"OuterAbsent"},{"$nm":"InnerAbsent"}]}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"InnerAbsent"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$mt":"tpm","$nm":"OuterAbsent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"iterables"}]],"$mt":"mthd","$tp":[{"$nm":"Element"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"OuterAbsent"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"InnerAbsent"}],"$an":{"shared":[],"see":["concatenate"],"doc":["Given an iterable object whose elements are also iterable,\nreturn a new stream with all the elements of the nested\niterables. If there are no arguments, or if none of the \narguments contains any elements, return an empty iterable."]},"$nm":"expand"},"Set":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Collection"}],"$mt":"ifc","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"variance":"out","$nm":"Element"}],"$an":{"shared":[],"doc":["A collection of unique elements.\n\nA `Set` is a [[Collection]] of its elements.\n\nSets may be the subject of the binary union, intersection, \nand complement operators `|`, `&`, and `~`.\n\n    value kids = girls|boys; \n\nElements are compared for equality using [[Object.equals]] \nor [[Comparable.compare]]. An element may occur at most \nonce in a set."]},"$m":{"complement":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"formal":[],"doc":["Returns a new `Set` containing all the elements in this \nset that are not contained in the given `Set`."]},"$nm":"complement"},"subset":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if this set is a subset of the given `Set`, \nthat is, if the given set contains all of the elements \nin this set."]},"$nm":"subset"},"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"mthd","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"clone"},"intersection":{"$t":{"$tp":[{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"formal":[],"doc":["Returns a new `Set` containing only the elements that \nare present in both this set and the given `Set`."]},"$nm":"intersection"},"exclusiveUnion":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"formal":[],"doc":["Returns a new `Set` containing only the elements \ncontained in either this set or the given `Set`, but no \nelement contained in both sets."]},"$nm":"exclusiveUnion"},"superset":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if this set is a superset of the given \n`Set`, that is, if this set contains all of the \nelements in the given set."]},"$nm":"superset"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Two `Set`s are considered equal if they have the same \nsize and if every element of the first set is also an \nelement of the second set, as determined by \n[[contains]]. Equivalently, a set is equal to a second \nset if it is both a subset and a superset of the second\nset."],"actual":[]},"$nm":"equals"},"union":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Set"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Set"},"$mt":"prm","$nm":"set"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Other"}],"$an":{"shared":[],"formal":[],"doc":["Returns a new `Set` containing all the elements of this \nset and all the elements of the given `Set`."]},"$nm":"union"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The fundamental operation for `Set`s. Determines if the\ngiven value belongs to this set."],"actual":[]},"$nm":"contains"}},"$at":{"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"default":[],"actual":[]},"$nm":"hash"}},"$nm":"Set"},"Scalable":{"of":[{"$nm":"Value"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Scale"}],"$pk":"ceylon.language","$nm":"Numeric"}],"variance":"in","$nm":"Scale"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Scale"},{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Scalable"}],"variance":"out","$nm":"Value"}],"$an":{"shared":[],"doc":["Abstract supertype of types that support scaling by a \nnumeric factor. Examples of such types include vectors and \nmatrices. The _scale_ operator `**` accepts a scale factor\nas its first operand, and an instance of `Scalable` as its\nsecond operand.\n\n    Vector scaled = 2.0 ** Vector(x,y,z);\n\nConcrete classes which implement this interface should\nsatisfy:\n\n- `x == 1**x`\n- `a ** (b ** x) == a*b ** x`\n\nwhere `1` denotes the multiplicative identity of the \nnumeric scaling type.\n\nConcrete classes which implement this interface are\nencouraged to also satisfy [[Invertable]], in which case, \nthe following identity should be satisfied:\n\n- `-x == -1**x`\n\nConcrete classes which implement this interface and which\nalso satisfy [[Summable]] should satisfy:\n\n- `x+x == 2**x`\n- `a ** (x+y) == a**x + a**y`\n\nThe [[scaling type|Scale]] must be a [[numeric|Numeric]]\ntype, but is not required to be [[Scalar]], since a complex\nnumber scaling type should be allowed."],"by":["Gavin"]},"$m":{"scale":{"$t":{"$nm":"Value"},"$ps":[[{"$t":{"$nm":"Scale"},"$mt":"prm","$nm":"scalar"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Scale this value by the given scale factor."]},"$nm":"scale"}},"$nm":"Scalable","$st":"Value"},"Sequence":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"ifc","$tp":[{"variance":"out","$nm":"Element"}],"$an":{"shared":[],"see":["Empty"],"doc":["A nonempty, immutable sequence of values. The type \n`Sequence<Element>` may be abbreviated `[Element+]`.\n\nGiven a possibly-empty sequence of type `[Element*]`, the \n`if (nonempty ...)` construct, or, alternatively, \n`assert (nonempty ...)`, may be used to narrow to a \nsequence type to a nonempty sequence type:\n\n    [Integer*] nums = ... ;\n    if (nonempty nums) {\n        Integer first = nums.first;\n        Integer max = max(nums);\n        [Integer+] squares = nums.collect((Integer i) => i**2));\n        [Integer+] sorted = nums.sort(byIncreasing((Integer i) => i));\n    }\n\nOperations like `first`, `max()`, `collect()`, and `sort()`, \nwhich polymorphically produce a nonempty or non-null output \nwhen given a nonempty input are called \n_emptiness-preserving_."],"by":["Gavin"]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"},"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["This nonempty sequence."],"actual":[]},"$nm":"clone"},"following":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Other"},{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"head"}]],"$mt":"mthd","$tp":[{"$nm":"Other"}],"$an":{"shared":[],"default":[],"actual":[]},"$nm":"following"},"sort":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The function comparing pairs of elements."]},"$nm":"comparing"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["A nonempty sequence containing the elements of this\ncontainer, sorted according to a function imposing a \npartial order upon the elements."],"actual":[]},"$m":{"comparing":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$an":{"doc":["The function comparing pairs of elements."]},"$nm":"comparing"}},"$nm":"sort"},"shorterThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"shorterThan"},"longerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"longerThan"},"repeat":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"times"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"repeat"},"findLast":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"findLast"},"collect":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Sequence"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The transformation applied to the elements."]},"$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"default":[],"doc":["A nonempty sequence containing the results of applying \nthe given mapping to the elements of this sequence."],"actual":[]},"$m":{"collecting":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"doc":["The transformation applied to the elements."]},"$nm":"collecting"}},"$nm":"collect"}},"$at":{"lastIndex":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"formal":[],"see":["Sequence.size"],"doc":["The index of the last element of the sequence."],"actual":[]},"$nm":"lastIndex"},"last":{"$t":{"$nm":"Element"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The last element of the sequence, that is, the element\nwith index `sequence.lastIndex`."],"actual":[]},"$nm":"last"},"sequence":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["This nonempty sequence."],"actual":[]},"$nm":"sequence"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"actual":[]},"$nm":"string"},"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"doc":["Returns `false`, since every `Sequence` contains at\nleast one element."],"actual":[]},"$nm":"empty"},"rest":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The rest of the sequence, without the first element."],"actual":[]},"$nm":"rest"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequence"},"$mt":"gttr","$an":{"shared":[],"formal":[],"doc":["Reverse this sequence, returning a new nonempty\nsequence."],"actual":[]},"$nm":"reversed"},"first":{"$t":{"$nm":"Element"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The first element of the sequence, that is, the element\nwith index `0`."],"actual":[]},"$nm":"first"}},"$nm":"Sequence"},"Annotated":{"$mt":"ifc","$an":{"shared":[],"see":["Annotation"],"doc":["A program element that can\nbe annotated."]},"$nm":"Annotated"},"StringBuilder":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"cls","$an":{"shared":[],"native":[],"doc":["Builder utility for constructing [[strings|String]] by \nincrementally appending strings or characters"]},"$m":{"append":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Append the characters in the given [[string]]."]},"$nm":"append"},"appendSpace":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$mt":"mthd","$an":{"shared":[],"doc":["Append a space character."]},"$nm":"appendSpace"},"deleteInitial":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Deletes the specified [[number of characters|length]] \nfrom the start of the string. If `length` is \nnonpositive, nothing is deleted."]},"$nm":"deleteInitial"},"delete":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$def":"1","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Deletes the specified [[number of characters|length]] \nfrom the current content, starting at the specified \n[[index]]. If the `index` is beyond the end of the \ncurrent content, nothing is deleted. If the number of \ncharacters to delete is greater than the available \ncharacters from the given `index`, the content is \ntruncated at the given `index`. If `length` is \nnonpositive, nothing is deleted."]},"$nm":"delete"},"reset":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Remove all content and return to initial state."]},"$nm":"reset"},"insertCharacter":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"},{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"character"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Insert a [[character]] at the specified [[index]]. If \nthe `index` is beyond the end of the current string, \nthe new content is simply appended to the current \ncontent. If the `index` is a negative number, the new \ncontent is inserted at index 0."]},"$nm":"insertCharacter"},"appendAll":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"strings"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Append the characters in the given [[strings]]."]},"$nm":"appendAll"},"insert":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Insert a [[string]] at the specified [[index]]. If the \n`index` is beyond the end of the current string, the \nnew content is simply appended to the current content. \nIf the `index` is a negative number, the new content is\ninserted at index 0."]},"$nm":"insert"},"appendNewline":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$mt":"mthd","$an":{"shared":[],"doc":["Append a newline character."]},"$nm":"appendNewline"},"deleteTerminal":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Deletes the specified [[number of characters|length]] \nfrom the end of the string. If `length` is nonpositive, \nnothing is deleted."]},"$nm":"deleteTerminal"},"appendCharacter":{"$t":{"$pk":"ceylon.language","$nm":"StringBuilder"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"character"}]],"$mt":"mthd","$an":{"shared":[],"doc":["Append the given [[character]]."]},"$nm":"appendCharacter"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The resulting string. If no characters have been\nappended, the empty string."],"actual":[]},"$nm":"string"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Returns the length of the current content, that is,\nthe [[size|String.size]] of the produced [[string]]."]},"$nm":"size"}},"$nm":"StringBuilder"},"emptyOrSingleton":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Empty"},{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}]},"$ps":[[{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Element"}],"$an":{"shared":[],"see":["Tuple","Empty"],"doc":["A singleton `Tuple` with the given element if the \ngiven element is non-null, or `Empty` otherwise ."]},"$nm":"emptyOrSingleton"},"shared":{"$t":{"$pk":"ceylon.language","$nm":"SharedAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a type or member as shared. A `shared` \nmember is visible outside the block of code in which it is \ndeclared."]},"$annot":"1","$nm":"shared"},"TagsAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$an":{"shared":[],"doc":["The tags, in plain text."]},"$nm":"tags"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"TagsAnnotation"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Annotated"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[tagged]]."]},"$annot":"1","$at":{"tags":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"attr","$an":{"shared":[],"doc":["The tags, in plain text."]},"$nm":"tags"}},"$nm":"TagsAnnotation"},"Binary":{"of":[{"$nm":"Other"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Binary"}],"$nm":"Other"}],"$an":{"shared":[],"see":["Integer"],"doc":["Abstraction of numeric types like [[Integer]] that may be \nrepresented as a sequence of bits, and may be the subject\nof bitwise operations. A bit is a [[Boolean]] value."],"by":["Stef"]},"$m":{"clear":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Returns a new number with the given bit set to 0.\nBits are indexed from right to left."]},"$nm":"clear"},"xor":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Performs a logical exclusive OR operation."]},"$nm":"xor"},"get":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Retrieves a given bit from this bit sequence. Bits are \nindexed from right to left."]},"$nm":"get"},"leftLogicalShift":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"shift"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Performs a left logical shift. Sign is not preserved. \nPadded with zeros."]},"$nm":"leftLogicalShift"},"set":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"},{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"prm","$def":"1","$nm":"bit"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Returns a new number with the given bit set to the given \nvalue. Bits are indexed from right to left."]},"$nm":"set"},"or":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Performs a logical inclusive OR operation."]},"$nm":"or"},"rightArithmeticShift":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"shift"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Performs a right arithmetic shift. Sign is preserved. \nPadded with zeros."]},"$nm":"rightArithmeticShift"},"rightLogicalShift":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"shift"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Performs a right logical shift. Sign is not preserved. \nPadded with zeros."]},"$nm":"rightLogicalShift"},"flip":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Returns a new number with the given bit flipped to its \nopposite value. Bits are indexed from right to left."]},"$nm":"flip"},"and":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Performs a logical AND operation."]},"$nm":"and"}},"$at":{"not":{"$t":{"$nm":"Other"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The binary complement of this sequence of bits."]},"$nm":"not"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The number of bits that this sequence of bits can hold."]},"$nm":"size"}},"$nm":"Binary","$st":"Other"},"commaList":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$nm":"commaList"},"Map":{"satisfies":[{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Entry"}],"$pk":"ceylon.language","$nm":"Collection"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Correspondence"}],"$mt":"ifc","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"variance":"out","$nm":"Key"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"variance":"out","$nm":"Item"}],"$an":{"shared":[],"see":["Entry","forKey","forItem","byItem","byKey"],"doc":["Represents a collection which maps _keys_ to _items_,\nwhere a key can map to at most one item. Each such \nmapping may be represented by an [[Entry]].\n\nA `Map` is a [[Collection]] of its `Entry`s, and a \n[[Correspondence]] from keys to items.\n\nThe presence of an entry in a map may be tested using the \n`in` operator:\n\n    if (\"lang\"->\"en_AU\" in settings) { ... }\n\nThe entries of the map may be iterated using `for`:\n\n    for (key->item in settings) { ... }\n\nThe item for a key may be obtained using the item\noperator:\n\n    String lang = settings[\"lang\"] else \"en_US\";\n\nKeys are compared for equality using [[Object.equals]] or\n[[Comparable.compare]]. There may be at most one entry \nper key."]},"$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Map"},"$mt":"mthd","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"clone"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Two `Map`s are considered equal iff they have the same \n_entry sets_. The entry set of a `Map` is the set of \n`Entry`s belonging to the map. Therefore, the maps are \nequal iff they have same set of `keys`, and for every \nkey in the key set, the maps have equal items."],"actual":[]},"$nm":"equals"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"entry"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"contains"},"mapItems":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Map"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Key"},"$mt":"prm","$nm":"key"},{"$t":{"$nm":"Item"},"$mt":"prm","$nm":"item"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The function that transforms a key\/item pair, \nproducing the item of the resulting map."]},"$nm":"mapping"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Result"}],"$an":{"shared":[],"default":[],"doc":["Returns a `Map` with the same keys as this map. For\nevery key, the item is the result of applying the given \ntransformation function. This is a lazy operation."]},"$m":{"mapping":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Key"},"$mt":"prm","$nm":"key"},{"$t":{"$nm":"Item"},"$mt":"prm","$nm":"item"}]],"$mt":"mthd","$an":{"doc":["The function that transforms a key\/item pair, \nproducing the item of the resulting map."]},"$nm":"mapping"}},"$nm":"mapItems","$o":{"map":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Map"}],"$mt":"obj","$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Map"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Entry"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator"},"defines":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"defines"},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Result"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"get"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"equals"}},"$at":{"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"hash"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"size"}},"$nm":"map"}}}},"$at":{"values":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Collection"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["A [[Collection]] containing the items stored in this \nmap. An element can be stored under more than one key \nin the map, and so it can occur more than once in the \nresulting collection."]},"$nm":"values","$o":{"values":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Collection"}],"$mt":"obj","$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Collection"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"item"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"contains"}},"$at":{"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"size"}},"$nm":"values"}}},"keys":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"}],"$pk":"ceylon.language","$nm":"Collection"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["A [[Collection]] containing the keys of this map."],"actual":[]},"$nm":"keys","$o":{"keys":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Key"}],"$pk":"ceylon.language","$nm":"Collection"}],"$mt":"obj","$m":{"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"}],"$pk":"ceylon.language","$nm":"Collection"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"clone"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"key"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"contains"}},"$at":{"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"size"}},"$nm":"keys"}}},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"default":[],"actual":[]},"$nm":"hash"}},"$nm":"Map"},"Number":{"$mt":"ifc","$an":{"shared":[],"see":["Numeric","Scalar"],"doc":["Abstraction of numeric types representing scalar values. \nThis type defines operations which can be expressed without \nreference to the invariant self types `Other` of \n[[Numeric]], [[Scalar]], and [[Comparable]].\n\n`Number` allows certain operations to be applied to streams\nof heterogeneous numeric types.\n\n    value magnitudes = { -1.0, 1, 0.0, 2, 4.0 }.map(Number.magnitude); \n\nThis would not be well-typed for `Scalar.magnitude`, since \n`Scalar` is an invariant type.\n\nEvery concrete class which implements `Number` should \nalso implement `Scalar`. (Unfortunately, this constraint\ncannot be expressed within the type system of the language\nwithout loss of the covariance of this type.)"],"by":["Gavin"]},"$at":{"sign":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The sign of this number: \n\n- `1` if the number is positive, \n- `-1` if it is negative, or \n- `0` if it is zero."]},"$nm":"sign"},"integer":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"formal":[],"throws":["OverflowException","if the number is too large to be represented \nas an `Integer`"],"doc":["The number, represented as an [[Integer]], after \ntruncation of any fractional part if such a \nrepresentation is possible."]},"$nm":"integer"},"magnitude":{"$t":{"$pk":"ceylon.language","$nm":"Number"},"$mt":"attr","$an":{"shared":[],"formal":[],"see":["Scalar.magnitude"],"doc":["The magnitude of this number."]},"$nm":"magnitude"},"wholePart":{"$t":{"$pk":"ceylon.language","$nm":"Number"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The integral value of the number after truncation of \nthe fractional part. For [[Integral]] numeric types, \nthe integral value of a number is the number itself."]},"$nm":"wholePart"},"negative":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"see":["Scalar.negative"],"doc":["Determine if the number is strictly negative."]},"$nm":"negative"},"positive":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"formal":[],"see":["Scalar.positive"],"doc":["Determine if the number is strictly positive."]},"$nm":"positive"},"float":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"formal":[],"throws":["OverflowException","if the number is too large to be represented \nas a `Float`"],"doc":["The number, represented as a [[Float]], if such a \nrepresentation is possible."]},"$nm":"float"},"fractionalPart":{"$t":{"$pk":"ceylon.language","$nm":"Number"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The fractional part of this number, after truncation of \nthe integral part. For [[Integral]] numeric types, the \nfractional part is always zero."]},"$nm":"fractionalPart"}},"$nm":"Number"},"throws":{"$t":{"$pk":"ceylon.language","$nm":"ThrownExceptionAnnotation"},"$ps":[[{"$t":{"$pk":"ceylon.language.meta.declaration","$nm":"Declaration"},"$mt":"prm","$an":{"doc":["The [[Exception]] type that this thrown."]},"$nm":"type"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$def":"1","$an":{"doc":["A description, in Markdown syntax, of the circumstances \nthat cause this exception to be thrown."]},"$nm":"when"}]],"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a program element that throws an \nexception."]},"$annot":"1","$nm":"throws"},"Numeric":{"of":[{"$nm":"Other"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Invertable"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Other"}],"$pk":"ceylon.language","$nm":"Numeric"}],"$nm":"Other"}],"$an":{"shared":[],"see":["Scalar"],"doc":["Abstraction of numeric types with the usual binary \noperations:\n\n- addition, `x + y`, \n- subtraction, `x - y`, \n- multiplication, `x * y`, and \n- division, `x \/ y`, along with \n- additive inverse `-x`.\n\nA concrete class which implements this interface should be\na mathematical _ring_. That is:\n\n- both addition, `+`, and multiplication, `*`, should be\n  associative and commutative,\n- there should be additive and multiplicative identities,\n  denoted `0` and `1` respectively, satisfying `x+0 == x`\n  and `x*1 == x`,\n- every instance `x` should have an additive inverse `-x`, \n  satisfying `x + -x == 0`, and\n- multiplication should distribute over addition, \n  satisfying `x*(y+z) == x*y + x*z`.\n\nIt is preferred, but not required, that the class be a\nmathematical _field_. That is, in addition to the above:\n\n- every instance `x` such that `x!=0` should have a \n  multiplicative inverse `1\/x`, satisfying `x * 1\/x == 1`. \n\nFor numeric types which are not fields, for example, \n[[Integer]], there is still a division operation, which is\nunderstood to produce a [[remainder|Integral.remainder]].\nThe division operation should satisfy:\n\n- `x*y \/ y == x`\n\nfor any instance `y` other than `0`.\n\nFor numeric types which _are_ fields, division never\nproduces a remainder, and division should additionally \nsatisfy:\n\n- `x\/y * y == x`\n\nfor any instance `y` other than `0`.\n\nSome numeric types, for example complex numbers, do not \nhave a [[total order|Comparable]]. Numeric types with a \ntotal order also satisfy [[Scalar]]."],"by":["Gavin"]},"$m":{"times":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["The product of this number and the given number."]},"$nm":"times"},"divided":{"$t":{"$nm":"Other"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"see":["Integral"],"doc":["The quotient obtained by dividing this number by the \ngiven number. For integral numeric types, this \noperation results in a \n[[remainder|Integral.remainder]].\n\nWhen the given number is `0`, the additive identity,\nthe behavior depends on the numeric type:\n\n- For some numeric types, including [[Integer]], \n  division by `0` results in an exception.\n- For others, including [[Float]], it results in a \n  special value of the type, for example, [[infinity]]."]},"$nm":"divided"}},"$nm":"Numeric","$st":"Other"},"and":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"T"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"T"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"p"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"T"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"T"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"q"}],[{"$t":{"$nm":"T"},"$mt":"prm","$nm":"t"}]],"$mt":"mthd","$tp":[{"$nm":"T"}],"$an":{"shared":[],"doc":["Returns a function which is the logical \nconjunction of the given predicate functions."]},"$nm":"and"},"parseDigit":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"digit"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"radix"}]],"$mt":"mthd","$nm":"parseDigit"},"byDecreasing":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Value"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$nm":"comparable"}],[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"mthd","$tp":[{"$nm":"Element"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Comparable"}],"$nm":"Value"}],"$an":{"shared":[],"see":["byIncreasing"],"doc":["A comparator which orders elements in decreasing order \naccording to the `Comparable` returned by the given \n`comparable()` function."]},"$nm":"byDecreasing"},"formal":{"$t":{"$pk":"ceylon.language","$nm":"FormalAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a member whose implementation must be \nprovided by subtypes."]},"$annot":"1","$nm":"formal"},"default":{"$t":{"$pk":"ceylon.language","$nm":"DefaultAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a member whose implementation may be \nrefined by subtypes. Non-`default` declarations may not be \nrefined."]},"$annot":"1","$nm":"default"},"unzipEntries":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Item"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Item"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Item"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"entries"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Key"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Item"}],"$an":{"shared":[],"doc":["Given a stream of entries, return two streams. The\nfirst stream produces the keys of the given entries, \nand the second stream produces the items of the given \nentries.\n\nThus:\n\n    entries[i]==unzipEntries(entries)[0][i]->unzipEntries(entries)[1][i]"]},"$nm":"unzipEntries"},"SequencedAnnotation":{"of":[{"$nm":"Value"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Sequential"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"ConstrainedAnnotation"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"SequencedAnnotation"}],"variance":"out","$nm":"Value"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotated"}],"$def":{"$pk":"ceylon.language","$nm":"Annotated"},"variance":"in","$nm":"ProgramElement"}],"$an":{"shared":[],"see":["Annotation"],"doc":["An annotation that may occur multiple times at a single program element, \nand only on certain program elemenets.\n\nA sequenced annotation is declared simply by having the annotation class\nsatisfy SequencedAnnotation instead of [[Annotation]]. For example \nthe following would only be allowed on `class` declarations, \nfunctions or methods:\n\n    alias ExecutableDeclaration \n           => ClassOrInterfaceDeclaration|FunctionDeclaration\n    \"Documents a pattern that the annotated element is particpating in\"\n    final annotation class Pattern(String name) \n            satisfies SequencedAnnotation<Pattern, ExecutableDeclaration> {\n    }\n\nAt runtime a [[ceylon.language.meta.declaration::Declaration]] instance \ncan be queried for its `SequencedAnnotation`s of a certain type using \n[[ceylon.language.meta::annotations]] or [[ceylon.language.meta::sequencedAnnotations]].\n"]},"$nm":"SequencedAnnotation","$st":"Value"},"AnnotationAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"AnnotationAnnotation"},{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language.meta.declaration","$nm":"ClassDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionDeclaration"}]}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[annotation]]."]},"$annot":"1","$nm":"AnnotationAnnotation"},"minRadix":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$nm":"minRadix"},"String":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Character"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"doc":["The characters that form this string."]},"$nm":"characters"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Character"}],"$pk":"ceylon.language","$nm":"List"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Comparable"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Summable"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"}],"$pk":"ceylon.language","$nm":"Ranged"}],"$mt":"cls","$an":{"shared":[],"final":[],"native":[],"doc":["A string of characters. Each character in the string is a \n[[32-bit Unicode character|Character]]. The internal \nUTF-16 encoding is hidden from clients.\n\nA string is a [[Category]] of its [[characters]], and of \nits substrings:\n\n    'w' in greeting \n    \"hello\" in greeting\n\nStrings are [[summable|Summable]]:\n\n    String greeting = \"hello\" + \" \" + \"world\";\n\nThey are efficiently [[iterable|Iterable]]:\n\n    for (char in \"hello world\") { ... }\n\nThey are [[lists|List]] of [[characters|Character]]:\n\n    value char = \"hello world\"[5];\n\nThey are [[ranged||Ranged]]:\n\n    String who = \"hello world\"[6...];\n\nNote that since `string[index]` evaluates to the optional \ntype `Character?`, it is often more convenient to write \n`string[index..index]`, which evaluates to a `String` \ncontaining a single character, or to the empty string \n`\"\"` if `index` refers to a position outside the string.\n\nIt is easy to use comprehensions to transform strings:\n\n    String { for (s in \"hello world\") if (s.letter) s.uppercased }\n\nSince a `String` has an underlying UTF-16 encoding, \ncertain operations are expensive, requiring iteration of \nthe characters of the string. In particular, [[size]]\nrequires iteration of the whole string, and `get()`,\n`span()`, and `segment()` require iteration from the \nbeginning of the string to the given index."],"by":["Gavin"]},"$m":{"clone":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"mthd","$an":{"shared":[],"doc":["This string."],"actual":[]},"$nm":"clone"},"plus":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Returns the concatenation of this string with the\ngiven string."],"actual":[]},"$nm":"plus"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Character"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["An iterator for the characters of the string."],"actual":[]},"$nm":"iterator"},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Character"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Returns the character at the given index in the string, \nor `null` if the index is past the end of string. The \nfirst character in the string occurs at index zero. The \nlast character in the string occurs at index \n`string.size-1`."],"actual":[]},"$nm":"get"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Determines if the given object is a string, and if so, \nif this string has the same length, and the same \ncharacters, in the same order, as the given string."],"actual":[]},"$nm":"equals"},"segment":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Select the characters of this string beginning at the \ngiven index, returning a string no longer than the \ngiven length. If the portion of this string starting at \nthe given index is shorter than the given length, \nreturn the portion of this string from the given index \nuntil the end of this string. Otherwise, return a \nstring of the given length. If the start index is \nlarger than the last index of the string, return the \nempty string."],"actual":[]},"$nm":"segment"},"compare":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Compare this string with the given string \nlexicographically, according to the Unicode code points\nof the characters."],"actual":[]},"$nm":"compare"},"longerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"see":["size"],"doc":["Determines if this string is longer than the given\nlength. This is a more efficient operation than\n`string.size>length`."],"actual":[]},"$nm":"longerThan"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Determines if the given object is a `String` and, if \nso, if it occurs as a substring of this string, or if \nthe object is a `Character` that occurs in this string. \nThat is to say, a string is considered a [[Category]] \nof its substrings and of its characters."],"actual":[]},"$nm":"contains"},"trimLeading":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate function that determines whether\na character should be trimmed"]},"$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["This string, after discarding the characters matching\nthe given predicate function from the beginning of the \nstring."],"actual":[]},"$nm":"trimLeading"},"repeat":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"times"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Returns a string formed by repeating this string the \ngiven number of times, or the empty string if\n`times<=0`."],"actual":[]},"$nm":"repeat"},"join":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"strings"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Join the given strings, using this string as a \nseparator."]},"$nm":"join"},"replace":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"substring"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"replacement"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Returns a string formed by replacing every occurrence \nin this string of the given substring with the given \nreplacement string, working from the start of this \nstring to the end."]},"$nm":"replace"},"terminal":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Select the last characters of the string, returning a \nstring no longer than the given length. If this string \nis shorter than the given length, return this string. \nOtherwise, return a string of the given length."],"actual":[]},"$nm":"terminal"},"shorterThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"see":["size"],"doc":["Determines if this string is shorter than the given\nlength. This is a more efficient operation than\n`string.size>length`."],"actual":[]},"$nm":"shorterThan"},"spanTo":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanTo"},"trimTrailing":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate function that determines whether\na character should be trimmed"]},"$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["This string, after discarding the characters matching\nthe given predicate function from the end of the \nstring."],"actual":[]},"$nm":"trimTrailing"},"initial":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Select the first characters of this string, returning a \nstring no longer than the given length. If this string \nis shorter than the given length, return this string. \nOtherwise, return a string of the given length."],"actual":[]},"$nm":"initial"},"replaceFirst":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"substring"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"replacement"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Returns a string formed by replacing the first \noccurrence in this string of the given substring, if\nany, with the given replacement string."]},"$nm":"replaceFirst"},"split":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"ch"}]],"$mt":"prm","$pt":"f","$def":"1","$an":{"doc":["A predicate that determines if a character is a\nseparator characters at which to split. Default \nto split at any \n[[whitespace|Character.whitespace]] character."]},"$nm":"splitting"},{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"prm","$def":"1","$an":{"doc":["Specifies that the separator characters\noccurring in the string should be discarded. If \n`false`, they will be included in the resulting \niterator."]},"$nm":"discardSeparators"},{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"prm","$def":"1","$an":{"doc":["Specifies that the separator tokens should be \ngrouped eagerly and not be treated as \nsingle-character tokens. If `false` each \nseparator token will be of size `1`."]},"$nm":"groupSeparators"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Split the string into tokens, using the given predicate\nto determine which characters are separator characters.\n\n    value pathElements = path.split('\/'.equals);"]},"$nm":"split"},"slice":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language","$nm":"String"},{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"String"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language","$nm":"String"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Return two strings, the first containing the characters\nthat occur before the given [[index]], the second with\nthe characters that occur after the given `index`. If \nthe given `index` is outside the range of indices of \nthis string, one of the returned strings will be empty."]},"$nm":"slice"},"trim":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate function that determines whether\na character should be trimmed"]},"$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["This string, after discarding the characters matching\nthe given predicate function from the beginning and end \nof the string.\n\n    value trimmed = name.trim('_'.equals);"],"actual":[]},"$nm":"trim"},"spanFrom":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"}]],"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"spanFrom"},"span":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"from"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"to"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Select the characters between the given indexes. If the \nstart index is the same as the end index, return a \nstring with a single character. If the start index is \nlarger than the end index, return the characters in the \nreverse order from the order in which they appear in \nthis string. If both the start index and the end index \nare larger than the last index in the string, return \nthe empty string. Otherwise, if the last index is \nlarger than the last index in the sequence, return all \ncharacters from the start index to last character of \nthe string."],"actual":[]},"$nm":"span"}},"$at":{"normalized":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["This string, after collapsing strings of \n[[whitespace|Character.whitespace]] into single space \ncharacters and discarding whitespace from the beginning \nand end of the string."]},"$nm":"normalized"},"lowercased":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["This string, with all characters in lowercase."]},"$nm":"lowercased"},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"hash"},"uppercased":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["This string, with all characters in uppercase."]},"$nm":"uppercased"},"coalesced":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"doc":["This string."],"actual":[]},"$nm":"coalesced"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"see":["longerThan","shorterThan"],"doc":["The length of the string (the number of characters it \ncontains). In the case of the empty string, the string \nhas length zero. Note that this operation is \npotentially costly for long strings, since the\nunderlying representation of the characters uses a\nUTF-16 encoding. Use of [[longerThan]] or \n[[shorterThan]] is highly recommended."],"actual":[]},"$nm":"size"},"lastIndex":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$mt":"gttr","$an":{"shared":[],"doc":["The index of the last character in the string, or \n`null` if the string has no characters. Note that this \noperation is potentially costly for long strings, since \nthe underlying representation of the characters uses a \nUTF-16 encoding."],"actual":[]},"$nm":"lastIndex"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"doc":["This string."],"actual":[]},"$nm":"string"},"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"see":["size"],"doc":["Determines if this string has no characters, that is, \nif it has zero `size`. This is a _much_ more efficient \noperation than `string.size==0`."],"actual":[]},"$nm":"empty"},"lines":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"String"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$an":{"shared":[],"native":[],"doc":["Split the string into lines of text."]},"$nm":"lines"},"rest":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The rest of the string, without the first element."],"actual":[]},"$nm":"rest"},"trimmed":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"native":[],"doc":["This string, after discarding \n[[whitespace|Character.whitespace]] from the beginning \nand end of the string."]},"$nm":"trimmed"},"reversed":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["This string, with the characters in reverse order."],"actual":[]},"$nm":"reversed"},"characters":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Character"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"attr","$an":{"shared":[],"doc":["The characters that form this string."]},"$nm":"characters"}},"$nm":"String"},"Obtainable":{"$mt":"ifc","$an":{"shared":[],"doc":["Abstract supertype of instances which are used as resources\nin a `try` statement and [[released|release]]\nwhether or not an exception propagates out of the `try` block.\nUnlike [[Destroyable]] a single `Obtainable` instance can be \nreused between `try` statements.\n\nAlthough it is possible to use `Obtainable` instances outside of a `try` \nstatement this is not recommended.\n\nClasses which satisfy `Obtainable` may impose specific constraints on \nthe ordering and nesting of invocations of `obtain()` and `release()`. \nFor example it may be not be allowed to invoke `obtain()` on a \nresource that has already been `obtain()`ed. \nThose methods should throw an [[AssertionError]] when such \nconstraints are broken.\n"]},"$m":{"obtain":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"mthd","$an":{"shared":[],"formal":[],"throws":["AssertionError","If an illegal state is detected"],"doc":["Prepares the instance for use.\nIf an exception propagates from `obtain()` then `release()` \nwill not be called."]},"$nm":"obtain"},"release":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$mt":"prm","$an":{"doc":["The error propagating out of the `try` block, or null"]},"$nm":"error"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"throws":["AssertionError","If an illegal state is detected"],"doc":["Releases the instance after use."]},"$nm":"release"}},"$nm":"Obtainable"},"late":{"$t":{"$pk":"ceylon.language","$nm":"LateAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to disable definite initialization analysis for \na reference."]},"$annot":"1","$nm":"late"},"parseBoolean":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Boolean"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"}]],"$mt":"mthd","$an":{"shared":[],"doc":["The `Boolean` value of the given string representation of a boolean value,\nor `null` if the string does not represent a boolean value.\n\nRecognized values are \"true\", \"false\"."]},"$nm":"parseBoolean"},"identical":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Identifiable"},"$mt":"prm","$an":{"doc":["An object with well-defined identity."]},"$nm":"x"},{"$t":{"$pk":"ceylon.language","$nm":"Identifiable"},"$mt":"prm","$an":{"doc":["A second object with well-defined identity."]},"$nm":"y"}]],"$mt":"mthd","$an":{"shared":[],"see":["identityHash"],"doc":["Determine if the arguments are identical. Equivalent to\n`x===y`. Only instances of `Identifiable` have \nwell-defined identity."]},"$nm":"identical"},"InitializationError":{"super":{"$pk":"ceylon.language","$nm":"AssertionError"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"description"}],"$mt":"cls","$an":{"shared":[],"see":["late"],"doc":["[[Assertion failure|AssertionError]] that occurs when a \nvalue reference could not be initialized, including when:\n\n- a toplevel value could not be initialized due to \n  recursive dependencies upon other toplevel values, \n- an uninitialized [[late]] value is evaluated, \n- an initialized `late` but non-`variable` value is\n  reassigned."]},"$at":{"description":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$nm":"description"}},"$nm":"InitializationError"},"emptyIterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$an":{"shared":[],"doc":["An iterator that returns no elements."]},"$m":{"next":{"$t":{"$pk":"ceylon.language","$nm":"Finished"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$nm":"emptyIterator"},"Anything":{"abstract":"1","of":[{"$pk":"ceylon.language","$nm":"Object"},{"$pk":"ceylon.language","$nm":"Null"}],"$mt":"cls","$an":{"abstract":[],"shared":[],"doc":["The abstract supertype of all types. A value of type \n`Anything` may be a definite value of type `Object`, or it \nmay be the [[null]] value. A method declared `void` is \nconsidered to have the return type `Anything`.\n\nNote that the type `Nothing`, representing the intersection \nof all types, is a subtype of all types."],"by":["Gavin"]},"$nm":"Anything"},"VariableAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"VariableAnnotation"},{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"ValueDeclaration"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[variable]]."]},"$annot":"1","$nm":"VariableAnnotation"},"printStackTrace":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Throwable"},"$mt":"prm","$nm":"exception"},{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"}]],"$mt":"prm","$pt":"f","$def":"1","$an":{"doc":["A function that prints the given string.\nDefaults to [[process.writeError]]."]},"$nm":"write"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Print the stack trace of the given [[Exception]] using the \ngiven [[function|write]], or to \n[[standard error|process.writeError]] if no function is \nspecified."]},"$nm":"printStackTrace"},"parseFloat":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Float"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["The `Float` value of the given string representation of \na decimal number or `null` if the string does not \nrepresent a decimal number.\n\nThe syntax accepted by this method is the same as the \nsyntax for a `Float` literal in the Ceylon language \nexcept that it may optionally begin with a sign \ncharacter (`+` or `-`)."]},"$nm":"parseFloat"},"Exception":{"super":{"$pk":"ceylon.language","$nm":"Throwable"},"$ps":[{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$mt":"prm","$def":"1","$nm":"description"},{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$mt":"prm","$def":"1","$nm":"cause"}],"$mt":"cls","$an":{"shared":[],"native":[],"doc":["The supertype of all unexpected transient failures. \n\nA subclass of `Exception`\nrepresents a more specific kind of problem, and may define \nadditional attributes which propagate information about \nproblems of that kind. Exceptions are usually \nusually unrecoverable from the point of view of the \nimmediate caller of an operation. (For example, \ntransaction rollback, or loss of connectivity.)"],"by":["Gavin","Tom"]},"$at":{"cause":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$mt":"attr","$nm":"cause"},"description":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$mt":"attr","$nm":"description"}},"$nm":"Exception"},"operatingSystem":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"obj","$an":{"shared":[],"native":[],"doc":["Operating System on which the current process is running."]},"$at":{"newline":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The line ending character sequence on this platform."]},"$nm":"newline"},"fileSeparator":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The character used on this platform to separate the folder\/file elements of a path."]},"$nm":"fileSeparator"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"},"name":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Returns the name of the operating system this process is running on."]},"$nm":"name"},"pathSeparator":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The character used on this platform to use as a separator between several paths in a list of paths."]},"$nm":"pathSeparator"},"version":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["Returns the version of the operating system this process is running on."]},"$nm":"version"}},"$nm":"operatingSystem"},"internalSort":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"prm","$pt":"f","$nm":"comparing"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$tp":[{"$nm":"Element"}],"$an":{"native":[]},"$nm":"internalSort"},"OverflowException":{"super":{"$pk":"ceylon.language","$nm":"Exception"},"$mt":"cls","$an":{"shared":[],"doc":["Thrown when a mathematical operation caused a number to \noverflow from its bounds, or when a numeric narrowing\nconversion fails because the number cannot be represented\nwithin the bounds of the narrower type.\n\nNote that:\n\n- arithmetic operations on [[Integer]]s result in _silent_ \n  overflow or loss of precision, and thus never \n  produce an `OverflowException`, and, \n- likewise, arithmetic operations on [[Float]] produce the \n  value [[infinity]] instead of overflowing."]},"$nm":"OverflowException"},"unzip":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Head"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Tail"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Head"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Tail"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Tail"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Head"}]},{"$mt":"tpm","$nm":"Head"},{"$mt":"tpm","$nm":"Tail"}],"$pk":"ceylon.language","$nm":"Tuple"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"tuples"}]],"$mt":"mthd","$tp":[{"$nm":"Element"},{"$nm":"Head"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Tail"}],"$an":{"shared":[],"doc":["Given a stream of tuples, return two streams. The\nfirst stream produces the first elements of the\ngiven tuples, and the second stream produces the\nremaining elements of the given tuples.\n\nThus:\n\n    tuples[i]==[unzip(tuples)[0][i],*unzip(tuples)[1][i]]"]},"$nm":"unzip"},"parseInteger":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$def":"1","$nm":"radix"}]],"$mt":"mthd","$an":{"shared":[],"throws":["AssertionError","if `radix` is not between `minRadix` and `maxRadix`"],"doc":["The `Integer` value of the given string representation \nof an integer, or `null` if the string does not represent \nan integer or if the mathematical integer it represents \nis too large in magnitude to be represented by an \n`Integer`.\n\nThe syntax accepted by this function is the same as the \nsyntax for an `Integer` literal in the Ceylon language \nexcept that it may optionally begin with a sign \ncharacter (`+` or `-`).\n\nA radix can be given in input to specify what is the base\nto take in consideration for the parsing. radix has to be\nbetween `minRadix` and `maxRadix` included.\nThe list of available digits starts from `0` to `9` followed\nby `a` to `z`.\nWhen parsing in a specific base, the first `radix` digits\nfrom the available digits list can be used.\nThis function is not case sensitive; `a` and `A` both\ncorrespond to the `a` digit which decimal value is `10`.\n \n`_` character can be used to separate groups of digits\nfor bases 2, 10 and 16 as for `Integer` literal in the\nCeylon language. For any other bases, no grouping is\nsupported."]},"$nm":"parseInteger"},"sum":{"$t":{"$nm":"Value"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"}],"$pk":"ceylon.language","$nm":"Summable"}],"$nm":"Value"}],"$an":{"shared":[],"see":["product"],"doc":["Given a nonempty stream of [[Summable]] values, return the \nsum of the values."]},"$nm":"sum"},"runtime":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$mt":"obj","$an":{"shared":[],"native":[],"doc":["Machine (Virtual or not) on which the current process is running.\n\nHolds information about runtime name, version and about inherent limitations\nlike minimum\/maximum values that can be represented by the runtime."]},"$at":{"maxArraySize":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"see":["Array"],"doc":["The maximum size of an [[Array]] that is possible for this runtime.\nNote that this is a theoretical limit only. In practice it is usually\nimpossible to allocate an array of this size, due to memory constraints."]},"$nm":"maxArraySize"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"string"},"name":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The name of the runtime \/ virtual machine this process is running on."]},"$nm":"name"},"integerSize":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"see":["Integer"],"doc":["The number of bits used to represent the value of an [[Integer]]."]},"$nm":"integerSize"},"maxIntegerValue":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"see":["Integer"],"doc":["The maximum [[Integer]] value that can be represented by the runtime.\n\nIt is the maximum `Integer` that can be distinguished from its predecessor\nusing below formula:\n\n`Integer(n+1) = Integer(n) + 1` with `Integer(0) = 0`"]},"$nm":"maxIntegerValue"},"minIntegerValue":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"see":["Integer"],"doc":["The minimum [[Integer]] value that can be represented by the runtime.\n\nIt is the minimum `Integer` that can be distinguished from its successor\nusing below formula:\n\n`Integer(n-1) = Integer(n) - 1` with `Integer(0) = 0`"]},"$nm":"minIntegerValue"},"version":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"doc":["The version of the runtime \/ virtual machine this process is running on."]},"$nm":"version"}},"$nm":"runtime"},"smaller":{"super":{"$pk":"ceylon.language","$nm":"Comparison"},"$mt":"obj","$an":{"shared":[],"doc":["The value is smaller than the given value."]},"$nm":"smaller"},"infinity":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"doc":["An instance of [[Float]] representing positive infinity, \n∞, the result of dividing a positive number by zero. \nNegative infinity, -∞, the result of dividing a\nnegative number by zero, is the additive inverse `-infinity`.\n\nNote that any floating-point computation that results in a\npositive value too large to be represented as a `Float` is \n\"rounded up\" to `infinity`. Likewise, any floating-point \ncomputation that yields a negative value whose magnitude is\ntoo large to be represented as a `Float` is \"rounded down\" \nto `-infinity`."]},"$nm":"infinity"},"computeDigitGroupingSize":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"radix"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"digitIndex"},{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"string"},{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"ii"}]],"$mt":"mthd","$nm":"computeDigitGroupingSize"},"DefaultAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"DefaultAnnotation"},{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"}]}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[default]]."]},"$annot":"1","$nm":"DefaultAnnotation"},"Iterable":{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Object"}],"$pk":"ceylon.language","$nm":"Category"}],"$mt":"ifc","$tp":[{"variance":"out","$nm":"Element"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$def":{"$pk":"ceylon.language","$nm":"Null"},"variance":"out","$nm":"Absent"}],"$an":{"shared":[],"see":["Collection"],"doc":["Abstract supertype of [[categories|Category]] whose \nelements may be iterated. Iterable categories are often \ncalled _streams_. A stream need not be finite, but its \nelements must be countable. That is, for any given \nelement of the stream, every iterator of the stream must \neventually return the element, even if the iterator \nitself is not exhaustable. \n\nA given stream might not have a well-defined order, and \nso the order in which elements are produced by the \nstream's iterator may not be _stable_. That is, the order \nmay be different for two different iterators of the \nstream.\n\nThe type `Iterable<Element,Null>`, usually abbreviated\n`{Element*}` represents a possibly-empty iterable \ncontainer. The type `Iterable<Element,Nothing>`, usually \nabbreviated `{Element+}` represents a nonempty iterable \ncontainer.\n\nA value list in braces produces a new instance of \n`Iterable`:\n\n    {String+} words = { \"hello\", \"world\" };\n\nAn instance of `Iterable` may be iterated using a `for`\nloop:\n\n    for (c in \"hello world\") { ... }\n\nComprehensions provide a convenient syntax for \ntransforming streams:\n\n    {Integer+} lengths = { for (w in words) w.size };\n\n`Iterable` and its subtypes define various operations\nthat return other iterable objects. Such operations come \nin two flavors:\n\n- _Lazy_ operations return a *view* of the receiving\n  iterable object. If the underlying iterable object is\n  mutable, then changes to the underlying object will be \n  reflected in the resulting view. Lazy operations are \n  usually efficient, avoiding memory allocation or\n  iteration of the receiving iterable object.\n- _Eager_ operations return an immutable object. If the\n  receiving iterable object is mutable, changes to this\n  object will not be reflected in the resulting immutable\n  object. Eager operations are often expensive, involving\n  memory allocation and iteration of the receiving \n  iterable object.\n\nLazy operations are preferred, because they can be \nefficiently chained. For example:\n\n    string.filter((Character c) => c.letter)\n          .map((Character c) => c.uppercased)\n\nis much less expensive than:\n\n    string.select((Character c) => c.letter)\n          .collect((Character c) => c.uppercased)\n\nFurthermore, it is always easy to produce a new \nimmutable iterable object given the view produced by a\nlazy operation. For example:\n\n    [ *string.filter((Character c) => c.letter)\n          .map((Character c) => c.uppercased) ]\n\nLazy operations normally return an instance of `Iterable`, \nor even a [[List]], [[Map]], or [[Set]].\n\nHowever, there are certain scenarios where an eager \noperation is more useful, more convenient, or no more \nexpensive than a lazy operation, including:\n\n- sorting operations, which are eager by nature,\n- operations which preserve emptiness\/nonemptiness of\n  the receiving iterable object.\n\nEager operations normally return a \n[[sequence|Sequential]]."],"by":["Gavin"]},"$m":{"cycle":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"times"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["cycled","repeat"],"doc":["Produces a stream formed by repeating the elements of \nthis stream the [[given number of times|times]], or an \nempty stream if `times<=0`."]},"$nm":"cycle","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"var":"1","$mt":"attr","$an":{"variable":[]},"$nm":"count"},"iter":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"iter"}},"$nm":"iterator"}}}},"$at":{"orig":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$nm":"orig"}},"$nm":"iterable"}}},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["An iterator for the elements belonging to this stream."]},"$nm":"iterator"},"sort":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"x"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"y"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The function comparing pairs of elements."]},"$nm":"comparing"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["byIncreasing","byDecreasing"],"doc":["A sequence containing the elements of this stream, \nsorted according to a [[comparator function|comparing]] \nimposing a partial order upon the elements.\n\nFor convenience, the functions [[byIncreasing]] and \n[[byDecreasing]] produce suitable comparator functions:\n\n    \"Hello World!\".sort(byIncreasing(Character.lowercased))\n\nThis operation is eager by nature."]},"$nm":"sort"},"count":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate satisfied by the elements to\nbe counted."]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Produces the number of elements in this stream that \nsatisfy the [[given predicate function|selecting]].\nFor an infinite stream, this operation never \nterminates."]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"doc":["The predicate satisfied by the elements to\nbe counted."]},"$nm":"selecting"}},"$nm":"count"},"takingWhile":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"take"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Produces a stream containing the leading elements of \nthis stream until the [[given predicate function|take]] \nreturns `false`."]},"$m":{"take":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$nm":"take"}},"$nm":"takingWhile","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"alive":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"alive"}},"$nm":"iterator"}}}},"$nm":"iterable"}}},"select":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate the elements must satisfy."]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["filter"],"doc":["Produces a sequence containing all elements of this \nstream that satisfy the [[given predicate|selecting]].\nAn eager counterpart to [[filter]]."]},"$nm":"select"},"longerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["size"],"doc":["Determines if this stream has more elements than the \ngiven [[length]]. This is an efficient operation for\nstreams with many elements."]},"$nm":"longerThan"},"by":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"step"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"throws":["AssertionError","if the given step size is nonpositive, \ni.e. `step<1`"],"doc":["Produces a stream containing every [[step]]th element \nof this stream. If the step size is `1`, the resulting\nstream contains the same elements as this stream.\n\nFor example, the expression\n\n    (0..10).by(3)\n\nresults in the stream `{ 0, 3, 6, 9 }`.\n\nThe step size must be greater than zero."]},"$nm":"by","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$nm":"iterator"}}}},"$nm":"iterable"}}},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"contains"},"repeat":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"times"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["cycle"],"doc":["Produces a list formed by repeating the elements of \nthis stream the [[given number of times|times]], or an \nempty list if `times<=0`. An eager counterpart to \n[[cycle]]."]},"$nm":"repeat"},"every":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate that all elements must \nsatisfy."]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if all elements of this stream satisfy the \n[[given predicate function|selecting]]."]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"mthd","$an":{"doc":["The predicate that all elements must \nsatisfy."]},"$nm":"selecting"}},"$nm":"every"},"fold":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"initial"},{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"partial"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The accumulating function that accepts an\nintermediate result, and the next element."]},"$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"default":[],"doc":["The result of applying the [[given accumulating \nfunction|accumulating]] to each element of this stream \nin turn.\n\nFor example, the expression\n\n    (1..100).fold(0, plus<Integer>)\n\nresults in the integer `5050`."]},"$m":{"accumulating":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Result"},"$mt":"prm","$nm":"partial"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$an":{"doc":["The accumulating function that accepts an\nintermediate result, and the next element."]},"$nm":"accumulating"}},"$nm":"fold"},"defaultNullElements":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"comp":"i","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]},{"$nm":"Default"}]},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$nm":"Default"},"$mt":"prm","$an":{"doc":["A default value that replaces `null` elements."]},"$nm":"defaultValue"}]],"$mt":"mthd","$tp":[{"$nm":"Default"}],"$an":{"shared":[],"default":[],"doc":["Produces a stream containing the elements of this \nstream, replacing every `null` element with the [[given \ndefault value|defaultValue]]. The resulting stream does \nnot have the value `null`."]},"$nm":"defaultNullElements"},"taking":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"take"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Produces a stream containing the first [[take]]\nelements of this stream.\n\nIf the specified number of elements to take is larger \nthan the number of elements of this stream, the \nresulting stream contains the same elements as this \nstream. If the specified number of elements to take is\nfewer than one, the resulting stream has no elements."]},"$nm":"taking","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"i":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"var":"1","$mt":"attr","$an":{"variable":[]},"$nm":"i"}},"$nm":"iterator"}}}},"$at":{"first":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"first"}},"$nm":"iterable"}}},"reduce":{"$t":{"comp":"u","$ts":[{"$nm":"Result"},{"$nm":"Element"},{"$nm":"Absent"}]},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"comp":"u","$ts":[{"$nm":"Result"},{"$nm":"Element"}]},"$mt":"prm","$nm":"partial"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The accumulating function that accepts an\nintermediate result, and the next element."]},"$nm":"accumulating"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"default":[],"doc":["The result of applying the [[given accumulating \nfunction|accumulating]] to each element of this stream \nin turn.\n\nFor example, the expression\n\n    (1..100).reduce(plus<Integer>)\n\nresults in the integer `5050`."]},"$m":{"accumulating":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"comp":"u","$ts":[{"$nm":"Result"},{"$nm":"Element"}]},"$mt":"prm","$nm":"partial"},{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$an":{"doc":["The accumulating function that accepts an\nintermediate result, and the next element."]},"$nm":"accumulating"}},"$nm":"reduce"},"following":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$nm":"head"}]],"$mt":"mthd","$tp":[{"$nm":"Other"}],"$an":{"shared":[],"default":[],"doc":["Produces a stream with a [[given initial element|head]], \nfollowed by the elements of this stream."]},"$nm":"following","$o":{"cons":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Nothing"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$nm":"Other"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"first":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"first"}},"$nm":"iterator"}}}},"$nm":"cons"}}},"chain":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Absent"},{"$nm":"OtherAbsent"}]}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$nm":"OtherAbsent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$tp":[{"$nm":"Other"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"OtherAbsent"}],"$an":{"shared":[],"default":[],"doc":["The elements of this stream, in the order in which they \noccur in this stream, followed by the elements of the \n[[given stream|other]] in the order in which they occur \nin the given stream."]},"$nm":"chain","$o":{"chained":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Absent"},{"$nm":"OtherAbsent"}]}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator"}},"$nm":"chained"}}},"shorterThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["size"],"doc":["Determines if this stream has fewer elements than the \ngiven [[length]]. This is an efficient operation for \nstreams with many elements."]},"$nm":"shorterThan"},"skippingWhile":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"skip"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Produces a stream containing the elements of this \nstream, after skipping the leading elements until the \n[[given predicate function|skip]] returns `false`."]},"$m":{"skip":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$nm":"skip"}},"$nm":"skippingWhile","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"first":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"first"}},"$nm":"iterator"}}}},"$nm":"iterable"}}},"any":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate that at least one element \nmust satisfy."]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if there is at least one element of this \nstream that satisfies the [[given predicate \nfunction|selecting]]."]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"e"}]],"$mt":"mthd","$an":{"doc":["The predicate that at least one element \nmust satisfy."]},"$nm":"selecting"}},"$nm":"any"},"map":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Result"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The mapping to apply to the elements."]},"$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"default":[],"see":["collect"],"doc":["Produces a stream containing the results of applying \nthe [[given mapping|collecting]] to the elements of to \nthis stream.\n\nFor example, the expression\n\n    (0..4).map(10.power)\n\nresults in the stream `{ 1, 10, 100, 1000, 10000 }`."]},"$nm":"map"},"findLast":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate the element must satisfy."]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The last element of this stream which satisfies the \n[[given predicate function|selecting]], if any, or \n`null` otherwise."]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$an":{"doc":["The predicate the element must satisfy."]},"$nm":"selecting"}},"$nm":"findLast"},"skipping":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"skip"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Produces a stream containing the elements of this \nstream, after skipping the first [[skip]] elements\nproduced by its iterator.\n\nIf this stream does not contain more elements than the \nspecified number of elements to skip, the resulting \nstream has no elements. If the specified number of \nelements to skip is zero or fewer, the resulting stream \ncontains the same elements as this stream."]},"$nm":"skipping","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator"}},"$nm":"iterable"}}},"filter":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate the elements must satisfy."]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["select"],"doc":["Produces a stream containing the elements of this \nstream that satisfy the [[given predicate \nfunction|selecting]].\n\nFor example, the expression\n\n    (1..100).filter(13.divides)\n\nresults in the stream `{ 13, 26, 39, 52, 65, 78, 91 }`."]},"$nm":"filter"},"find":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate the element must satisfy."]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The first element of this stream which satisfies the \n[[given predicate function|selecting]], if any, or \n`null` otherwise."]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$an":{"doc":["The predicate the element must satisfy."]},"$nm":"selecting"}},"$nm":"find"},"collect":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Sequential"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The transformation applied to the elements."]},"$nm":"collecting"}]],"$mt":"mthd","$tp":[{"$nm":"Result"}],"$an":{"shared":[],"default":[],"see":["map"],"doc":["Produces a sequence containing the results of applying \nthe [[given mapping|collecting]] to the elements of \nthis stream. An eager counterpart to [[map]]."]},"$nm":"collect"}},"$at":{"cycled":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$an":{"shared":[],"default":[],"see":["cycle"],"doc":["An infinite stream that produces the elements of this \nstream, repeatedly.\n\nFor example, the expression\n\n    {6, 9}.cycled.taking(5)\n\nevaluates to the stream `{ 6, 9, 6, 9, 6 }`."]},"$nm":"cycled","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"iter":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"iter"}},"$nm":"iterator"}}}},"$at":{"orig":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$nm":"orig"}},"$nm":"iterable"}}},"last":{"$t":{"comp":"u","$ts":[{"$nm":"Absent"},{"$nm":"Element"}]},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["The last element returned by the iterator, if any, or \n`null` if this stream is empty. In the case of an \ninfinite stream, this operation never terminates;\nfurthermore, this default implementation iterates all \nelements, which might be very expensive."]},"$nm":"last"},"indexed":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["All entries of form `index->element` where `index` is \nthe position at which `element` occurs, for every\nnon-null element of this stream, ordered by increasing \n`index`. For a null element at a given position in this \nstream, there is no entry with the corresponding index \nin the resulting stream.\n\nFor example, the expression \n\n    { \"hello\", null, \"world\" }.indexed\n\nresults in the stream `{ 0->\"hello\", 2->\"world\" }`."]},"$nm":"indexed","$o":{"indexes":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]}],"$pk":"ceylon.language","$nm":"Entry"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]}],"$pk":"ceylon.language","$nm":"Entry"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]}],"$pk":"ceylon.language","$nm":"Entry"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"iter":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"attr","$nm":"iter"},"i":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"var":"1","$mt":"attr","$an":{"variable":[]},"$nm":"i"}},"$nm":"iterator"}}}},"$at":{"orig":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$nm":"orig"}},"$nm":"indexes"}}},"sequence":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["A [[sequence|Sequential]] containing all the elements \nof this stream, in the same order they occur in this\nstream."]},"$nm":"sequence"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["A string of form `\"{ x, y, z }\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \nstream, or the string `\"{}\"` if this stream is empty. \nIf the stream is very long, the list of elements might \nbe truncated, as indicated by an ellipse."],"actual":[]},"$nm":"string"},"coalesced":{"$t":{"$tp":[{"comp":"i","$mt":"tpm","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Object"}]},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["The non-null elements of this stream, in the order in\nwhich they occur in this stream. For null elements of \nthe original stream, there is no entry in the resulting \nstream."]},"$nm":"coalesced"},"empty":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["Determines if the stream is empty, that is to say, if \nthe iterator returns no elements."]},"$nm":"empty"},"rest":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"gttr","$an":{"shared":[],"default":[],"see":["first"],"doc":["A stream containing all but the first element of this \nstream. For a stream with an unstable iteration order, \na different value might be produced each time `rest` is\nevaluated.\n\nTherefore, if the stream `i` has an unstable iteration\norder, the stream `{ i.first, *i.rest }` might not have\nthe same elements as `i`."]},"$nm":"rest"},"first":{"$t":{"comp":"u","$ts":[{"$nm":"Absent"},{"$nm":"Element"}]},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["The first element returned by the iterator, if any, or \n`null` if this stream is empty. For a stream with an\nunstable iteration order, a different value might be\nproduced each time `first` is evaluated."]},"$nm":"first"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["The number of elements returned by the iterator of this \nstream, if the iterator terminates. In the case of an \ninfinite stream, this operation never terminates."]},"$nm":"size"}},"$nm":"Iterable"},"flatten":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Return"},{"$mt":"tpm","$nm":"Args"}],"$pk":"ceylon.language","$nm":"Callable"},"$ps":[[{"$t":{"$nm":"Return"},"$ps":[[{"$t":{"$nm":"Args"},"$mt":"prm","$nm":"tuple"}]],"$mt":"prm","$pt":"f","$nm":"tupleFunction"}]],"$mt":"mthd","$tp":[{"$nm":"Return"},{"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Args"}],"$an":{"shared":[],"native":[],"see":["unflatten"],"doc":["Given a function with a single parameter of tuple type \n`[P1, P2, ..., Pn]`, return a function with multiple \nparameters of type `P1`, `P2`, ..., `Pn`.\n\nThat is, if `fun` has type `W([X,Y,Z])` then `flatten(fun)` \nhas type `W(X,Y,Z)`."]},"$nm":"flatten"},"mapPairs":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Result"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"FirstArgument"},"$mt":"prm","$nm":"firstArg"},{"$t":{"$nm":"SecondArgument"},"$mt":"prm","$nm":"secondArg"}]],"$mt":"prm","$pt":"f","$nm":"collecting"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"FirstArgument"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"firstArguments"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"SecondArgument"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"secondArguments"}]],"$mt":"mthd","$tp":[{"$nm":"Result"},{"$nm":"FirstArgument"},{"$nm":"SecondArgument"}],"$an":{"shared":[],"doc":["Given two streams, form a new stream by applying a \nfunction to the arguments in the given streams. The \nlength of the resulting stream is the length of \nthe shorter of the two given streams.\n\nThus:\n\n    mapPairs(fun,xs,ys)[i]==fun(xs[i],ys[i])\n\nfor every `0<=i<min({xs.size,ys.size})`."]},"$m":{"collecting":{"$t":{"$nm":"Result"},"$ps":[[{"$t":{"$nm":"FirstArgument"},"$mt":"prm","$nm":"firstArg"},{"$t":{"$nm":"SecondArgument"},"$mt":"prm","$nm":"secondArg"}]],"$mt":"mthd","$nm":"collecting"}},"$nm":"mapPairs","$o":{"iterable":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Result"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"}],"$mt":"obj","$m":{"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"iterator","$o":{"iterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Result"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Result"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$nm":"iterator"}}}},"$nm":"iterable"}}},"OptionalAnnotation":{"of":[{"$nm":"Value"}],"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"},{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Value"}]},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"ConstrainedAnnotation"}],"$mt":"ifc","$tp":[{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"ProgramElement"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"variance":"out","$nm":"Value"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Annotated"}],"$def":{"$pk":"ceylon.language","$nm":"Annotated"},"variance":"in","$nm":"ProgramElement"}],"$an":{"shared":[],"see":["Annotation"],"doc":["An annotation that may occur at most once at a single program element and \nonly on certain program elements.\n\nAn optional annotation is declared simply by having the annotation class\nsatisfy OptionalAnnotation instead of [[Annotation]]. For example \nthe following would only be allowed on `class` declarations:\n\n    final annotation class ExampleClass() \n            satisfies OptionalAnnotation<Example, ClassDeclaration> {}\n\nAt runtime a [[ceylon.language.meta.declaration::Declaration]] instance \ncan be queried for its `OptionalAnnotation`s of a certain type using \n[[ceylon.language.meta::annotations]] or [[ceylon.language.meta::optionalAnnotation]].\n"]},"$nm":"OptionalAnnotation","$st":"Value"},"className":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"obj"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"doc":["Return the name of the concrete class of the given \nobject, in a format native to the virtual machine."]},"$nm":"className"},"List":{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Collection"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Correspondence"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"}],"$pk":"ceylon.language","$nm":"Ranged"}],"$mt":"ifc","$tp":[{"variance":"out","$nm":"Element"}],"$an":{"shared":[],"see":["Sequence","Empty","Array"],"doc":["Represents a collection in which every element has a \nunique non-negative integer index.\n\nA `List` is a [[Collection]] of its elements, and a \n[[Correspondence]] from indices to elements.\n\nDirect access to a list element by index produces a value \nof optional type. The following idiom may be used instead \nof upfront bounds-checking, as long as the list element \ntype is a non-`null` type:\n\n    if (exists char = \"hello world\"[index]) { \n        \/\/do something with char\n    }\n    else {\n        \/\/out of bounds\n    }\n\nWhen an algorithm guarantees that a list contains a given \nindex, the following idiom may be used:\n\n    assert (exists char = \"hello world\"[index]);\n    \/\/do something with char\n\nTo iterate the indices of a `List`, use the following\nidiom:\n\n    for (i->char in \"hello world\".indexed) { ... }\n\n[[Strings|String]], [[sequences|Sequential]], \n[[tuples|Tuple]], and [[arrays|Array]] are all `List`s,\nand are all of fixed length. Variable-length mutable\n`List`s are also possible."]},"$m":{"longerThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"longerThan"},"trimLeading":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Trim the elements satisfying the given predicate\nfunction from the start of this list, returning a list \nno longer than this list."]},"$m":{"trimming":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$nm":"trimming"}},"$nm":"trimLeading"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["occurs"],"doc":["Determines if this list contains the given value.\nReturns `true` for every element of this list."],"actual":[]},"$nm":"contains"},"includes":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determine if the given list occurs at some index in \nthis list."]},"$nm":"includes"},"firstInclusion":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The first index in this list at which the given list \noccurs."]},"$nm":"firstInclusion"},"occurs":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if the given value occurs as an element of \nthis list."]},"$nm":"occurs"},"withTrailing":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Sequence"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$an":{"doc":["The last element of the resulting sequence."]},"$nm":"element"}]],"$mt":"mthd","$tp":[{"$nm":"Other"}],"$an":{"shared":[],"default":[],"doc":["Returns a new `List` that contains the specified\nelement appended to the end of the elements of this \nlist."]},"$nm":"withTrailing"},"firstOccurrence":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The first index in this list at which the given element \noccurs."]},"$nm":"firstOccurrence"},"terminal":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["List.initial"],"doc":["Select the last elements of the list, returning a list \nno longer than the given length. If this list is \nshorter than the given length, return this list. \nOtherwise return a list of the given length."]},"$nm":"terminal"},"initial":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["List.terminal"],"doc":["Select the first elements of this list, returning a \nlist no longer than the given length. If this list is \nshorter than the given length, return this list. \nOtherwise return a list of the given length."]},"$nm":"initial"},"inclusions":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The indexes in this list at which the given list \noccurs."]},"$nm":"inclusions"},"occurrences":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The indexes in this list at which the given element \noccurs."]},"$nm":"occurrences"},"trim":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Trim the elements satisfying the given predicate\nfunction from the start and end of this list, returning \na list no longer than this list."]},"$m":{"trimming":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$nm":"trimming"}},"$nm":"trim"},"clone":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"mthd","$an":{"shared":[],"formal":[],"actual":[]},"$nm":"clone"},"startsWith":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determine if the given list occurs at the start of this \nlist."]},"$nm":"startsWith"},"iterator":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"},"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"iterator","$o":{"listIterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"obj","$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"index":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"var":"1","$mt":"attr","$an":{"variable":[]},"$nm":"index"}},"$nm":"listIterator"}}},"get":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Returns the element of this sequence with the given\nindex if the index refers to an element of the list,\nthat is, if `0<=index<=list.lastIndex`, or `null` \notherwise. The first element of the list has index \n`0`."],"actual":[]},"$nm":"get"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Two `List`s are considered equal iff they have the \nsame `size` and _entry sets_. The entry set of a list \n`l` is the set of elements of `l.indexed`. This \ndefinition is equivalent to the more intuitive notion \nthat two lists are equal iff they have the same `size` \nand for every index either:\n\n- the lists both have the element `null`, or\n- the lists both have a non-null element, and the\n  two elements are equal."],"actual":[]},"$nm":"equals"},"indexes":{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"prm","$pt":"f","$an":{"doc":["The predicate the indexed elements must \nsatisfy"]},"$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The indexes in this list for which the element \nsatisfies the given predicate."]},"$nm":"indexes"},"occursAt":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"},{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if the given value occurs at the given index \nin this list."]},"$nm":"occursAt"},"defines":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determines if the given index refers to an element of \nthis list, that is, if `0<=index<=list.lastIndex`."],"actual":[]},"$nm":"defines"},"shorterThan":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"length"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$nm":"shorterThan"},"lastInclusion":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The last index in this list at which the given list \noccurs."]},"$nm":"lastInclusion"},"trimTrailing":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"trimming"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Trim the elements satisfying the given predicate\nfunction from the end of this list, returning a list no \nlonger than this list."]},"$m":{"trimming":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$nm":"trimming"}},"$nm":"trimTrailing"},"includesAt":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$an":{"doc":["The index at which this list might occur"]},"$nm":"index"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determine if the given list occurs at the given index \nof this list."]},"$nm":"includesAt"},"lastOccurrence":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["The last index in this list at which the given element \noccurs."]},"$nm":"lastOccurrence"},"endsWith":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Anything"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"prm","$nm":"sublist"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"doc":["Determine if the given list occurs at the end of this \nlist."]},"$nm":"endsWith"},"findLast":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"prm","$pt":"f","$nm":"selecting"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"actual":[]},"$m":{"selecting":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"elem"}]],"$mt":"mthd","$nm":"selecting"}},"$nm":"findLast"},"withLeading":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Other"},{"$nm":"Element"}]}],"$pk":"ceylon.language","$nm":"Sequence"},"$ps":[[{"$t":{"$nm":"Other"},"$mt":"prm","$an":{"doc":["The first element of the resulting sequence."]},"$nm":"element"}]],"$mt":"mthd","$tp":[{"$nm":"Other"}],"$an":{"shared":[],"default":[],"see":["following"],"doc":["Returns a new `List` that starts with the specified\nelement, followed by the elements of this list."]},"$nm":"withLeading"}},"$at":{"lastIndex":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$mt":"attr","$an":{"shared":[],"formal":[],"see":["List.size"],"doc":["The index of the last element of the list, or `null` if \nthe list is empty."]},"$nm":"lastIndex"},"last":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["Returns the last element of this `List`, if any."],"actual":[]},"$nm":"last"},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"default":[],"actual":[]},"$nm":"hash"},"reversed":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["A `List` containing the elements of this list in \nreverse order."]},"$nm":"reversed"},"rest":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"List"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The rest of the list, without the first element."],"actual":[]},"$nm":"rest"},"first":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$nm":"Element"}]},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["Returns the first element of this `List`, if any."],"actual":[]},"$nm":"first"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"gttr","$an":{"shared":[],"default":[],"see":["List.lastIndex"],"doc":["The number of elements in this list, always\n`list.lastIndex+1`."],"actual":[]},"$nm":"size"}},"$nm":"List"},"abstract":{"$t":{"$pk":"ceylon.language","$nm":"AbstractAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a class as abstract. An `abstract` class \nmay not be directly instantiated. An `abstract` class may \nhave enumerated cases."]},"$annot":"1","$nm":"abstract"},"zip":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Head"}]},{"$mt":"tpm","$nm":"Head"},{"$mt":"tpm","$nm":"Tail"}],"$pk":"ceylon.language","$nm":"Tuple"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Head"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"heads"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"Tail"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"tails"}]],"$mt":"mthd","$tp":[{"$nm":"Element"},{"$nm":"Head"},{"satisfies":[{"$tp":[{"$mt":"tpm","$nm":"Element"}],"$pk":"ceylon.language","$nm":"Sequential"}],"$nm":"Tail"}],"$an":{"shared":[],"doc":["Given a stream of values, and a stream of tuples, produce\na new stream of tuples formed by prepending the values in\nthe first stream to the tuples in the second stream. The \nlength of the resulting stream is the length of the shorter \nof the two given streams.\n\nThus:\n\n    zip(heads, tails)[i]==[heads[i],*tails[i]]\n\nfor every `0<=i<min({heads.size,tails.size})`."]},"$nm":"zip"},"AssertionError":{"super":{"$pk":"ceylon.language","$nm":"Error"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$nm":"message"}],"$mt":"cls","$an":{"shared":[],"doc":["An error that occurs due to an incorrectly writen program. \nAn instance is thrown when an assertion fails, that\nis, when a condition in an `assert` statement evaluates\nto false at runtime."]},"$at":{"message":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$nm":"message"}},"$nm":"AssertionError"},"xor":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"T"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"T"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"p"},{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Boolean"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"T"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"T"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Callable"},"$mt":"prm","$nm":"q"}],[{"$t":{"$nm":"T"},"$mt":"prm","$nm":"t"}]],"$mt":"mthd","$tp":[{"$nm":"T"}],"$an":{"shared":[],"doc":["Returns a function which is the logical \nexclusive disjunction of the given \npredicate functions.\nUnlike [[and]] and [[or]] both predicate functions are always evaluated."]},"$nm":"xor"},"Resource":{"$mt":"ifc","$an":{"shared":[],"doc":["An abstraction for resources inside a module.\nA resource is a file contained within a module,\nwhich is accessible at runtime."],"by":["Enrique Zamudio"]},"$m":{"textContent":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$def":"1","$nm":"encoding"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"doc":["Retrieves the contents of the resource as a String,\nusing the specified encoding."]},"$nm":"textContent"}},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"string"},"name":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"default":[],"doc":["The name of the resource; usually the filename."]},"$nm":"name"},"uri":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The full path to the resource."]},"$nm":"uri"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"formal":[],"doc":["The size of the resource, in bytes."]},"$nm":"size"}},"$nm":"Resource"},"zipEntries":{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$nm":"Item"}],"$pk":"ceylon.language","$nm":"Entry"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Key"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"keys"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"Item"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"items"}]],"$mt":"mthd","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Key"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$nm":"Item"}],"$an":{"shared":[],"doc":["Given two streams, form a new stream consisting of\nall entries where, for any given index in the resulting\nstream, the key of the entry is the element occurring \nat the same index in the first stream, and the item is \nthe element occurring at the same index in the second \nstream. The length of the resulting stream is the \nlength of the shorter of the two given streams.\n\nThus:\n\n    zipEntries(keys,items)[i]==keys[i]->items[i]\n\nfor every `0<=i<min({keys.size,items.size})`."]},"$nm":"zipEntries"},"equal":{"super":{"$pk":"ceylon.language","$nm":"Comparison"},"$mt":"obj","$an":{"shared":[],"doc":["The value is exactly equal to the given value."]},"$nm":"equal"},"finished":{"super":{"$pk":"ceylon.language","$nm":"Finished"},"$mt":"obj","$an":{"shared":[],"see":["Iterator"],"doc":["A value that indicates that an [[Iterator]] is exhausted \nand has no more values to return."]},"$at":{"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"gttr","$an":{"shared":[],"actual":[]},"$nm":"string"}},"$nm":"finished"},"Boolean":{"abstract":"1","super":{"$pk":"ceylon.language","$nm":"Basic"},"of":[{"$pk":"ceylon.language","$nm":"true"},{"$pk":"ceylon.language","$nm":"false"}],"$mt":"cls","$an":{"abstract":[],"shared":[],"doc":["A type capable of representing the values [[true]] and \n[[false]] of Boolean logic."],"by":["Gavin"]},"$nm":"Boolean"},"print":{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Anything"},"$mt":"prm","$nm":"val"}]],"$mt":"mthd","$an":{"shared":[],"see":["writeLine"],"doc":["Print a line to the standard output of the virtual machine \nprocess, printing the given value's `string`, or `<null>` \nif the value is `null`.\n\nThis method is a shortcut for:\n\n    process.writeLine(line?.string else \"<null>\")\n\nand is intended mainly for debugging purposes."],"by":["Gavin"]},"$nm":"print"},"Error":{"super":{"$pk":"ceylon.language","$nm":"Throwable"},"$ps":[{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$mt":"prm","$def":"1","$nm":"description"},{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$mt":"prm","$def":"1","$nm":"cause"}],"$mt":"cls","$an":{"shared":[],"native":[],"doc":["The supertype of all errors, which represent unexpected non-transient problems. \nThis includes such things assertion failures and problems with \nthe virtual machine.\n\nErrors cannot usually be recovered from, and therefore are not usually caught."],"by":["Gavin","Tom"]},"$at":{"cause":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Throwable"}]},"$mt":"attr","$nm":"cause"},"description":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"String"}]},"$mt":"attr","$nm":"description"}},"$nm":"Error"},"unzipPairs":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$tp":[{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"comp":"u","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Second"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$tp":[{"$mt":"tpm","$nm":"Second"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$tp":[{"$mt":"tpm","$nm":"Second"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"First"},{"comp":"u","$ts":[{"$nm":"Second"},{"$pk":"ceylon.language","$nm":"Nothing"}]}]},{"$mt":"tpm","$nm":"First"},{"$mt":"tpm","$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Second"},{"$pk":"ceylon.language","$nm":"Nothing"}]},{"$mt":"tpm","$nm":"Second"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Empty"}],"$pk":"ceylon.language","$nm":"Tuple"}],"$pk":"ceylon.language","$nm":"Tuple"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"pairs"}]],"$mt":"mthd","$tp":[{"$nm":"First"},{"$nm":"Second"}],"$an":{"shared":[],"doc":["Given a stream of pairs, return two streams. The\nfirst stream produces the first elements of the\ngiven pairs, and the second stream produces the\nsecond elements of the given pairs.\n\nThus:\n\n    pairs[i]==[unzipPairs(pairs)[0][i],unzipPairs(pairs)[1][i]]"]},"$nm":"unzipPairs"},"ChainedIterator":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"first"},{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"second"}],"satisfies":[{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Iterator"}],"$mt":"cls","$tp":[{"variance":"out","$nm":"Element"},{"variance":"out","$nm":"Other"}],"$an":{"see":["Iterable.chain"],"doc":["An [[Iterator]] that returns the elements of two\n[[Iterable]]s, as if they were chained together."],"by":["Enrique Zamudio"]},"$m":{"next":{"$t":{"comp":"u","$ts":[{"$nm":"Element"},{"$nm":"Other"},{"$pk":"ceylon.language","$nm":"Finished"}]},"$mt":"mthd","$an":{"shared":[],"actual":[]},"$nm":"next"}},"$at":{"more":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"more"},"second":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Other"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"attr","$nm":"second"},"iter":{"$t":{"$tp":[{"comp":"u","$mt":"tpm","$ts":[{"$nm":"Element"},{"$nm":"Other"}]}],"$pk":"ceylon.language","$nm":"Iterator"},"var":"1","$mt":"attr","$an":{"shared":[],"actual":[],"variable":[]},"$nm":"iter"},"first":{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"attr","$nm":"first"}},"$nm":"ChainedIterator"},"DocAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"prm","$an":{"shared":[],"doc":["Documentation, in Markdown syntax, about the annotated element"]},"$nm":"description"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"DocAnnotation"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Annotated"}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for the [[doc]] annotation."]},"$annot":"1","$at":{"description":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"doc":["Documentation, in Markdown syntax, about the annotated element"]},"$nm":"description"}},"$nm":"DocAnnotation"},"Basic":{"abstract":"1","super":{"$pk":"ceylon.language","$nm":"Object"},"satisfies":[{"$pk":"ceylon.language","$nm":"Identifiable"}],"$mt":"cls","$an":{"abstract":[],"shared":[],"doc":["The default superclass when no superclass is explicitly\nspecified using `extends`. For the sake of convenience, \nthis class inherits a default definition of value equality \nfrom [[Identifiable]]."],"by":["Gavin"]},"$nm":"Basic"},"Category":{"$mt":"ifc","$tp":[{"satisfies":[{"$pk":"ceylon.language","$nm":"Object"}],"$def":{"$pk":"ceylon.language","$nm":"Object"},"variance":"in","$nm":"Element"}],"$an":{"shared":[],"doc":["Abstract supertype of objects that contain other values, \ncalled *elements*, where it is possible to efficiently \ndetermine if a given value is an element.\n\n`Category` models a mathematical set, but is distinct \nfrom the [[Set]] collection type.\n\nThe `in` operator may be used to determine if a value\nbelongs to a `Category`:\n\n    if (69 in 0..100) { ... }\n    assert (key->item in { for (n in 0..100) n.string->n**2 });\n\nAn object may be a `Category` of two different disjoint\nelement types. For example, [[String]] is a `Category`\nof its `Character`s and of its substrings.\n\n    if (\"hello\" in \"hello world\") { ... }\n    assert ('.' in string);\n\nOrdinarily, `x==y` implies that `x in cat == y in cat`.\nBut this contract is not required since it is possible to \nform a meaningful `Category` using a different \nequivalence relation. For example, an `IdentitySet` is a \nmeaningful `Category`.\n\nNote that even though `Category<Element>` is declared\ncontravariant in its [[element type|Element]], most types\nthat inherit `Category` are covariant in their element\ntype, and therefore satisfy `Category<Object>`, resulting\nin some loss of typesafety. For such types, [[contains]] \nshould return `false` for any value that is not an \ninstance of the element type. For example, `String` is a \n`Category<Object>`, not a `Category<Character|String>`,\nand `x in string` evaluates to `false` for every `x` that\nis not a `String` or `Character`."],"by":["Gavin"]},"$m":{"containsAny":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["contains"],"doc":["Returns `true` if any one of the given values belongs \nto this `Category`, or `false` otherwise."]},"$nm":"containsAny"},"contains":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$nm":"Element"},"$mt":"prm","$nm":"element"}]],"$mt":"mthd","$an":{"shared":[],"formal":[],"see":["containsEvery","containsAny"],"doc":["Returns `true` if the given value belongs to this\n`Category`, that is, if it is an element of this\n`Category`, or `false` otherwise.\n\nFor most `Category`s the following relationship is \nsatisfied by every pair of elements `x` and `y`:\n\n- if `x==y`, then `x in category == y in category`\n\nHowever, it is possible to form a useful `Category` \nconsistent with some other equivalence relation, for \nexample `===`. Therefore implementations of `contains()` \nwhich do not satisfy this relationship are tolerated."]},"$nm":"contains"},"containsEvery":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Element"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Null"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"elements"}]],"$mt":"mthd","$an":{"shared":[],"default":[],"see":["contains"],"doc":["Returns `true` if every one of the given values belongs \nto this `Category`, or `false` otherwise."]},"$nm":"containsEvery"}},"$nm":"Category"},"see":{"$t":{"$pk":"ceylon.language","$nm":"SeeAnnotation"},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$pk":"ceylon.language.meta.declaration","$nm":"Declaration"}],"$pk":"ceylon.language","$nm":"Sequential"},"$mt":"prm","seq":"1","$an":{"doc":["The program elements being referred to."]},"$nm":"programElements"}]],"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to specify API references to other related \nprogram elements."]},"$annot":"1","$nm":"see"},"computeMagnitude":{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Integer"}]},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"radix"},{"$t":{"comp":"u","$ts":[{"$pk":"ceylon.language","$nm":"Null"},{"$pk":"ceylon.language","$nm":"Character"}]},"$mt":"prm","$nm":"char"}]],"$mt":"mthd","$nm":"computeMagnitude"},"actual":{"$t":{"$pk":"ceylon.language","$nm":"ActualAnnotation"},"$mt":"mthd","$an":{"annotation":[],"shared":[],"doc":["Annotation to mark a member of a type as refining a member \nof a supertype."]},"$annot":"1","$nm":"actual"},"SharedAnnotation":{"super":{"$pk":"ceylon.language","$nm":"Basic"},"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"SharedAnnotation"},{"comp":"u","$mt":"tpm","$ts":[{"$pk":"ceylon.language.meta.declaration","$nm":"FunctionOrValueDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"ClassOrInterfaceDeclaration"},{"$pk":"ceylon.language.meta.declaration","$nm":"Package"},{"$pk":"ceylon.language.meta.declaration","$nm":"Import"}]}],"$pk":"ceylon.language","$nm":"OptionalAnnotation"}],"$mt":"cls","$an":{"annotation":[],"shared":[],"final":[],"doc":["The annotation class for [[shared]]."]},"$annot":"1","$nm":"SharedAnnotation"},"Integer":{"super":{"$pk":"ceylon.language","$nm":"Object"},"$ps":[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$hdn":"1","$mt":"prm","$an":{"shared":[],"actual":[]},"$nm":"integer"}],"satisfies":[{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"}],"$pk":"ceylon.language","$nm":"Integral"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"}],"$pk":"ceylon.language","$nm":"Binary"},{"$tp":[{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"},{"$mt":"tpm","$pk":"ceylon.language","$nm":"Integer"}],"$pk":"ceylon.language","$nm":"Exponentiable"}],"$mt":"cls","$an":{"shared":[],"final":[],"native":[],"see":["runtime"],"doc":["An exact representation of a positive whole number, \nnegative whole number, or zero. The largest and smallest \nrepresentable values are platform-dependent:\n\n- For the JVM runtime, integer values between\n  -2<sup>63<\/sup> and 2<sup>63<\/sup>-1 may be represented \n  without overflow.\n- For the JavaScript runtime, integer values with a\n  magnitude no greater than 2<sup>53<\/sup> may be\n  represented without loss of precision.\n\nOverflow or loss of precision occurs silently (with no \nexception raised)."]},"$m":{"plus":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"plus"},"xor":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"xor"},"minus":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"minus"},"get":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"get"},"equals":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Object"},"$mt":"prm","$nm":"that"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"equals"},"set":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"},{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"prm","$def":"1","$nm":"bit"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"set"},"or":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"or"},"compare":{"$t":{"$pk":"ceylon.language","$nm":"Comparison"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"compare"},"and":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"and"},"remainder":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"remainder"},"plusInteger":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"integer"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"plusInteger"},"leftLogicalShift":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"shift"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"leftLogicalShift"},"times":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"times"},"timesInteger":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"integer"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"timesInteger"},"rightArithmeticShift":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"shift"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"rightArithmeticShift"},"rightLogicalShift":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"shift"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"rightLogicalShift"},"power":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"power"},"divided":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"other"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"divided"},"flip":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$ps":[[{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"prm","$nm":"index"}]],"$mt":"mthd","$an":{"shared":[],"native":[],"actual":[]},"$nm":"flip"}},"$at":{"successor":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"successor"},"hash":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"hash"},"integer":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"actual":[]},"$nm":"integer"},"negativeValue":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"negativeValue"},"magnitude":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"magnitude"},"zero":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"zero"},"fractionalPart":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"fractionalPart"},"float":{"$t":{"$pk":"ceylon.language","$nm":"Float"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"float"},"character":{"$t":{"$pk":"ceylon.language","$nm":"Character"},"$mt":"attr","$an":{"shared":[],"native":[],"throws":["OverflowException","if there is no such character"],"doc":["The UTF-32 character with this UCS code point."]},"$nm":"character"},"size":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"size"},"sign":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"sign"},"not":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"not"},"predecessor":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"predecessor"},"unit":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"unit"},"positiveValue":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"positiveValue"},"string":{"$t":{"$pk":"ceylon.language","$nm":"String"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"string"},"integerValue":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"integerValue"},"wholePart":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"wholePart"},"negative":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"negative"},"positive":{"$t":{"$pk":"ceylon.language","$nm":"Boolean"},"$mt":"attr","$an":{"shared":[],"native":[],"actual":[]},"$nm":"positive"}},"$nm":"Integer"},"first":{"$t":{"comp":"u","$ts":[{"$nm":"Absent"},{"$nm":"Value"}]},"$ps":[[{"$t":{"$tp":[{"$mt":"tpm","$nm":"Value"},{"$mt":"tpm","$nm":"Absent"}],"$pk":"ceylon.language","$nm":"Iterable"},"$mt":"prm","$nm":"values"}]],"$mt":"mthd","$tp":[{"$nm":"Value"},{"satisfies":[{"$pk":"ceylon.language","$nm":"Null"}],"$nm":"Absent"}],"$an":{"shared":[],"doc":["The first of the given values (usually a comprehension),\nif any."]},"$nm":"first"},"zeroInt":{"$t":{"$pk":"ceylon.language","$nm":"Integer"},"$mt":"attr","$nm":"zeroInt"}},"$mod-bin":"7.0"};
exports.$CCMM$=function(){return $CCMM$;};
function getT$name() {return this.constructor.T$name;}
function getT$all() {return this.constructor.T$all;}
function initType(type, typeName) {
var cons = function() {}
type.$$ = cons;
cons.T$name = typeName;
cons.T$all = {}
cons.T$all[typeName] = type;
for (var i=2; i<arguments.length; ++i) {
var superTypes = arguments[i].$$.T$all;
for (var $ in superTypes) {cons.T$all[$] = superTypes[$]}
}
cons.prototype.getT$name = getT$name;
cons.prototype.getT$all = getT$all;
}
function initTypeProto(type, typeName) {
initType.apply(this, arguments);
var args = [].slice.call(arguments, 2);
args.unshift(type);
inheritProto.apply(this, args);
}
function initTypeProtoI(type, typeName) {
initType.apply(this, arguments);
var args = [].slice.call(arguments, 2);
if (type.$$.T$all['ceylon.language::Object']===undefined) {
type.$$.T$all['ceylon.language::Object']=Object$;
//args.unshift(Object$);
}
args.unshift(type);
inheritProto.apply(this, args);
}
function initExistingType(type, cons, typeName) {
type.$$ = cons;
cons.T$name = typeName;
cons.T$all = {}
cons.T$all[typeName] = type;
for (var i=3; i<arguments.length; ++i) {
var superTypes = arguments[i].$$.T$all;
for (var $ in superTypes) {cons.T$all[$] = superTypes[$]}
}
var proto = cons.prototype;
if (proto !== undefined) {
try {
proto.getT$name = getT$name;
proto.getT$all = getT$all;
} catch (exc) {
// browser probably prevented access to the prototype
}
}
}
function initExistingTypeProto(type, cons, typeName) {
var args = [].slice.call(arguments, 0);
args.push($init$Basic());
initExistingType.apply(this, args);
var proto = cons.prototype;
if ((proto !== undefined) && (proto.getHash === undefined)) {
var origToString = proto.toString;
try {
inheritProto(type, Basic);
proto.toString = origToString;
} catch (exc) {
// browser probably prevented access to the prototype
}
}
}
function inheritProto(type) {
var proto = type.$$.prototype;
for (var i=1; i<arguments.length; ++i) {
var superProto = arguments[i].$$.prototype;
var names = Object.getOwnPropertyNames(superProto);
for (var j=0; j<names.length; ++j) {
var name = names[j];
var desc = Object.getOwnPropertyDescriptor(superProto, name);
// only copy own, enumerable properties
if (desc && desc.enumerable) {
if (desc.get) {
// defined through getter/setter, so copy the definition
Object.defineProperty(proto, name, desc);
} else if (proto[name]===undefined || desc.value.$fml===undefined) {
proto[name] = desc.value;
}
}
}
}
}
// Define a property on the given object (which may be a prototype).
// "get" and "set" are getter/setter functions, and the latter is optional.
function defineAttr(obj, name, get, set, metamodel,setterAnns) {
Object.defineProperty(obj, name, {get: get, set: set, configurable: true, enumerable: true});
if (name[0]==='$')name=name.substring(1);//names matching reserved words are prefixed with $
obj['$prop$get'+name[0].toUpperCase()+name.substring(1)] = {get:get, set:set, $crtmm$:metamodel};
if (setterAnns)set.setter$anns=setterAnns;
}
// Create a copy of the given property. The name of the copied property is name+suffix.
// This is used in closure mode to provide access to inherited attribute implementations.
function copySuperAttr(obj, name, suffix) {
var desc;
var o = obj;
// It may be an inherited property, so check the prototype chain.
do {
if ((desc = Object.getOwnPropertyDescriptor(o, name))) {break;}
o = o.__proto__;
} while (o);
if (desc) {
Object.defineProperty(obj, name+suffix, desc);
}
}
// read/writeAttrib return the getter/setter for the given property as defined in the
// given type. This is used in prototype mode to access inherited attribute implementations.
function attrGetter(type, name) {
return Object.getOwnPropertyDescriptor(type.$$.prototype, name).get;
}
function attrSetter(type, name, value) {
return Object.getOwnPropertyDescriptor(type.$$.prototype, name).set;
}
exports.initType=initType;
exports.initTypeProto=initTypeProto;
exports.initTypeProtoI=initTypeProtoI;
exports.initExistingType=initExistingType;
exports.initExistingTypeProto=initExistingTypeProto;
exports.inheritProto=inheritProto;
exports.defineAttr=defineAttr;
exports.copySuperAttr=copySuperAttr;
exports.attrGetter=attrGetter;
exports.attrSetter=attrSetter;
function Anything(wat) {
return wat;
}
initType(Anything, 'ceylon.language::Anything');
Anything.$crtmm$=function(){return{$an:function(){return[shared(),abstract()]},mod:$CCMM$,d:['ceylon.language','Anything']};}
function Null(wat) {
return null;
}
initType(Null, 'ceylon.language::Null', Anything);
Null.$crtmm$=function(){return{'super':{t:Anything},$an:function(){return[shared(),abstract()]},mod:$CCMM$,d:['ceylon.language','Null']};}
function Nothing(wat) {
throw "Nothing";
}
initType(Nothing, 'ceylon.language::Nothing');
//This is quite a special case, since Nothing is not in the model, we need to insert it there
$CCMM$['ceylon.language']["Nothing"]={"$mt":"cls","$an":{"shared":[]},"$nm":"Nothing"};
Nothing.$crtmm$=function(){return{$ps:[],$an:function(){return[shared()]},mod:$CCMM$,d:['ceylon.language','Nothing']};}
function Object$(wat) {
return wat;
}
initTypeProto(Object$, 'ceylon.language::Object', Anything);
Object$.$crtmm$=function(){return{'super':{t:Anything},$an:function(){return[shared(),abstract()]},mod:$CCMM$,d:['ceylon.language','Object']};}
var Object$proto = Object$.$$.prototype;
defineAttr(Object$proto, 'string', function(){
return String$(className(this) + "@" + this.hash);
},undefined,{$an:function(){return[shared(),$default()]},$t:{t:String$},mod:$CCMM$,$cont:Object$,d:['ceylon.language','Object','$at','string']});
Object$proto.$prop$getHash={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$cont:Object$,d:['ceylon.language','Object','$at','hash'],$t:{t:Integer},$an:function(){return[shared(),formal()]}};}};
Object$proto.toString=function() { return this.string.valueOf(); }
Object$proto.equals={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$cont:Object$,d:['ceylon.language','Object','$m','equals'],$t:{t:Boolean$},
$ps:[{$nm:'other',$mt:'prm',$t:{t:Object$}}],$an:function(){return[shared(),formal()];}};}};
function $init$Object$() { return Object$; }
function $init$Object() { return Object$; }
function $init$$Object() { return Object$; }
var $Object=Object$;
var BasicID=1;
function $identityHash(x) {
var hash = x.BasicID;
return (hash !== undefined)
? hash : (x.BasicID = BasicID++);
}
$identityHash.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'x',$t:{t:Identifiable},$mt:'prm'}],d:['ceylon.language','identityHash']};}
function Identifiable(obj) {}
initType(Identifiable, "ceylon.language::Identifiable", Object$);
Identifiable.$crtmm$=function(){return{$an:function(){return[shared()]},mod:$CCMM$,d:['ceylon.language','Identifiable']};}
function $init$Identifiable() { return Identifiable; }
var Identifiable$proto = Identifiable.$$.prototype;
Identifiable$proto.equals = function(that) {
return isOfType(that, {t:Identifiable}) && (that===this);
}
defineAttr(Identifiable$proto, 'hash', function(){ return $identityHash(this); },
undefined,function(){return{$an:function(){return[shared(),$default()]},$cont:Identifiable,mod:$CCMM$,d:['ceylon.language','Identifiable','$at','hash']};});
//INTERFACES
//Compiled from Ceylon sources
function Callable(wat) {
    return wat;
}
Callable.$crtmm$={mod:$CCMM$,$an:function(){return[shared()];},$tp:{Arguments$Callable:{'var':'out'},Return$Callable:{'var':'out'}},d:['ceylon.language','Callable']};
exports.Callable=Callable;
function $init$Callable() {
    if (Callable.$$===undefined) {
        initType(Callable, 'ceylon.language::Callable');
    }
    return Callable;
}
exports.$init$Callable=$init$Callable;
$init$Callable();

function $JsCallable(callable,parms,targs) {
    if (callable.getT$all === undefined) {
        callable.getT$all=Callable.getT$all;
    }
    var set_meta = callable.$crtmm$ === undefined;
    if (set_meta) {
        callable.$crtmm$={$ps:[],mod:$CCMM$,d:['ceylon.language','Callable']};
        if (parms !== undefined) {
            callable.$crtmm$['$ps']=parms;
        }
    }
    if (targs !== undefined && callable.$$targs$$ === undefined) {
        callable.$$targs$$=targs;
        if (set_meta) {
            callable.$crtmm$['$t']=targs['Return'];
        }
    }
    return callable;
}
initExistingTypeProto($JsCallable, Function, 'ceylon.language::JsCallable', Callable);

function noop() { return null; }

//This is used for plain method references
function JsCallable(o,f) {
    if (o === null) return noop;
    var f2 = function() { return f.apply(o, arguments); };
    f2.$crtmm$=f.$crtmm$===undefined?Callable.$crtmm$:f.$crtmm$;
    return f2;
}
JsCallable.$crtmm$=function(){return{ 'satisfies':[{t:Callable,a:{Return$Callable:'Return$Callable',Arguments$Callable:'Arguments$Callable'}}],
  $tp:{Return$Callable:{'var':'out'}, Arguments$Callable:{'var':'in'}},$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','Callable']};}

//This is used for spread method references
function JsCallableList(value) {
    return function() {
        var rval = Array(value.length);
        for (var i = 0; i < value.length; i++) {
            var c = value[i];
            rval[i] = c.f.apply(c.o, arguments);
        }
        return ArraySequence(rval,{Element$Iterable:{t:Callable}});
    };
}
JsCallableList.$crtmm$={$tp:{Return$Callable:{'var':'out'}, Arguments$Callable:{'var':'in'}},$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','Callable']};

exports.JsCallableList=JsCallableList;
exports.JsCallable=JsCallable;
exports.$JsCallable=$JsCallable;
function Comprehension(makeNextFunc, $$targs$$, compr) {
    $init$Comprehension();
    if (compr===undefined) {compr = new Comprehension.$$;}
    Basic(compr);
    compr.makeNextFunc = makeNextFunc;
    compr.$$targs$$=$$targs$$;
    return compr;
}
Comprehension.$crtmm$={$nm:'Comprehension',$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','Iterable']};
function $init$Comprehension() {
    if (Comprehension.$$===undefined) {
        initTypeProto(Comprehension, 'ceylon.language::Comprehension', $init$Basic(), $init$Iterable());
    }
    return Comprehension;
}
$init$Comprehension();
var Comprehension$proto = Comprehension.$$.prototype;
Comprehension$proto.iterator = function() {
    return ComprehensionIterator(this.makeNextFunc(), this.$$targs$$);
}
defineAttr(Comprehension$proto, 'sequence', function() {
    var sb = SequenceBuilder({Element$SequenceBuilder:this.$$targs$$.Element$Iterable});
    sb.appendAll(this);
    return sb.sequence;
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Iterable','$at','sequence']});
exports.Comprehension=Comprehension;

function ComprehensionIterator(nextFunc, $$targs$$, it) {
    $init$ComprehensionIterator();
    if (it===undefined) {it = new ComprehensionIterator.$$;}
    it.$$targs$$=$$targs$$;
    Basic(it);
    it.next = nextFunc;
    return it;
}
ComprehensionIterator.$crtmm$={$nm:'ComprehensionIterator',$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','Iterator']};
function $init$ComprehensionIterator() {
    if (ComprehensionIterator.$$===undefined) {
        initTypeProto(ComprehensionIterator, 'ceylon.language::ComprehensionIterator',
                $init$Basic(), $init$Iterator());
    }
    return ComprehensionIterator;
}
$init$ComprehensionIterator();
function Basic($$basic){
    $init$Basic();
    if($$basic===undefined)throwexc(InvocationException$meta$model(String$("Cannot instantiate abstract class")),'?','?')
    $Object($$basic);
    Identifiable($$basic);
    return $$basic;
}
Basic.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},$ps:[],satisfies:[{t:Identifiable}],$an:function(){return[doc(String$("The default superclass when no superclass is explicitly\nspecified using `extends`. For the sake of convenience, \nthis class inherits a default definition of value equality \nfrom [[Identifiable]].",195)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared(),abstract()];},d:['ceylon.language','Basic']};};
exports.Basic=Basic;
function $init$Basic(){
    if(Basic.$$===undefined){
        initTypeProto(Basic,'ceylon.language::Basic',$init$$Object(),$init$Identifiable());
    }
    return Basic;
}
exports.$init$Basic=$init$Basic;
$init$Basic();
function Throwable(description$1,cause,$$throwable){
    $init$Throwable();
    if($$throwable===undefined)throwexc(InvocationException$meta$model(String$("Cannot instantiate abstract class")),'?','?')
    if(description$1===undefined){description$1=null;}
    $$throwable.description$1_=description$1;
    if(cause===undefined){cause=null;}
    $$throwable.cause_=cause;
    if(typeof($init$native$Throwable$before)==='function')$init$native$Throwable$before($$throwable);
    $$throwable.$prop$getCause={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Throwable}]},$cont:Throwable,$an:function(){return[doc(String$("The underlying cause of this exception.",39)),shared()];},d:['ceylon.language','Throwable','$at','cause']};}};
    $$throwable.$prop$getCause.get=function(){return cause};
    $$throwable.$prop$getDescription$1={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:String$}]},$cont:Throwable,$an:function(){return[doc(String$("A description of the problem.",29))];},d:['ceylon.language','Throwable','$at','description']};}};
    $$throwable.$prop$getDescription$1.get=function(){return description$1};
    $$throwable.$prop$getMessage={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Throwable,$an:function(){return[doc(String$("A message describing the problem. This default \nimplementation returns the description, if any, or \notherwise the message of the cause, if any.",143)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Throwable().$$.prototype.$prop$getCause)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Throwable','$at','message']};}};
    $$throwable.$prop$getMessage.get=function(){return message};
    $$throwable.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Throwable,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Throwable','$at','string']};}};
    $$throwable.$prop$getString.get=function(){return string};
    $$throwable.$prop$getSuppressed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Throwable}}},$cont:Throwable,$an:function(){return[doc(String$("The exceptions that were suppressed in order to \npropagate this exception.",74)),shared(),$native()];},d:['ceylon.language','Throwable','$at','suppressed']};}};
    if(typeof($init$native$Throwable$after)==='function')$init$native$Throwable$after($$throwable);
    return $$throwable;
}
Throwable.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'description',$mt:'prm',$def:1,$t:{t:'u', l:[{t:Null},{t:String$}]},$an:function(){return[doc("A description of the problem.")];}},{$nm:'cause',$mt:'prm',$def:1,$t:{t:'u', l:[{t:Null},{t:Throwable}]},$an:function(){return[doc("The underlying cause of this exception."),shared()];}}],of:[{t:Exception},{t:$Error}],$an:function(){return[doc(String$("The supertype of instances that can be thrown using the `throw` statement\nand caught using the `catch` clause of the `try` statement. \nSuch instances are used to represent \nproblems, typically _unexpected failures_, with the running program \nand can be classified as either\n[[errors|Error]] which are non-transient and generally unrecoverable \nor [[exceptions|Exception]] which are transient problems which \nmay be recovered from.\n\nThe use of throwables to indicate _expected failures_, that \nis, failures that are usually handled by the immediate \ncaller of an operation, is discouraged. (For example,\nnonexistence of a file should not result in an exception.) \nInstead, the failure should be respresented as a return \nvalue of the operation being called.",756)),by([String$("Gavin",5),String$("Tom",3)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared(),$native(),abstract()];},d:['ceylon.language','Throwable']};};
exports.Throwable=Throwable;
function $init$Throwable(){
    if(Throwable.$$===undefined){
        initTypeProto(Throwable,'ceylon.language::Throwable',Basic);
        (function($$throwable){
            defineAttr($$throwable,'cause',function(){return this.cause_;},undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Throwable}]},$cont:Throwable,$an:function(){return[doc(String$("The underlying cause of this exception.",39)),shared()];},d:['ceylon.language','Throwable','$at','cause']};});
            defineAttr($$throwable,'description$1',function(){return this.description$1_;},undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:String$}]},$cont:Throwable,$an:function(){return[doc(String$("A description of the problem.",29))];},d:['ceylon.language','Throwable','$at','description']};});
            defineAttr($$throwable,'message',function(){
                var $$throwable=this;
                return (opt$2=(opt$3=$$throwable.description$1,opt$3!==null&&opt$3!==undefined?opt$3:(opt$4=$$throwable.cause,opt$4!==null&&opt$4!==undefined?opt$4.message:null)),opt$2!==null&&opt$2!==undefined?opt$2:String$("",0));
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Throwable,$an:function(){return[doc(String$("A message describing the problem. This default \nimplementation returns the description, if any, or \notherwise the message of the cause, if any.",143)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Throwable().$$.prototype.$prop$getCause)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Throwable','$at','message']};});
            defineAttr($$throwable,'string',function(){
                var $$throwable=this;
                return className($$throwable).plus(StringBuilder([String$(" \"",2),$$throwable.message.string,String$("\"",1)]).string);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Throwable,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Throwable','$at','string']};});
            $$throwable.printStackTrace=function (){
                var $$throwable=this;
                return printStackTrace($$throwable);
            };
            $$throwable.printStackTrace.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[],$cont:Throwable,$an:function(){return[doc(String$("Print the stack trace to the standard error of the \nvirtual machine process.",76)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),printStackTrace)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','Throwable','$m','printStackTrace']};};
        })(Throwable.$$.prototype);
    }
    return Throwable;
}
exports.$init$Throwable=$init$Throwable;
$init$Throwable();
var opt$2,opt$3,opt$4;
function $Error(description$5,cause$6,$$error){
    $init$$Error();
    if($$error===undefined)$$error=new $Error.$$;
    if(description$5===undefined){description$5=null;}
    $$error.description$5_=description$5;
    if(cause$6===undefined){cause$6=null;}
    $$error.cause$6_=cause$6;
    Throwable($$error.description$5,$$error.cause$6,$$error);
    if(typeof($init$native$$Error$before)==='function')$init$native$$Error$before($$error);
    if(typeof($init$native$$Error$after)==='function')$init$native$$Error$after($$error);
    return $$error;
}
$Error.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Throwable},$ps:[{$nm:'description',$mt:'prm',$def:1,$t:{t:'u', l:[{t:Null},{t:String$}]},$an:function(){return[];}},{$nm:'cause',$mt:'prm',$def:1,$t:{t:'u', l:[{t:Null},{t:Throwable}]},$an:function(){return[];}}],$an:function(){return[doc(String$("The supertype of all errors, which represent unexpected non-transient problems. \nThis includes such things assertion failures and problems with \nthe virtual machine.\n\nErrors cannot usually be recovered from, and therefore are not usually caught.",245)),by([String$("Gavin",5),String$("Tom",3)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared(),$native()];},d:['ceylon.language','Error']};};
exports.$Error=$Error;
function $init$$Error(){
    if($Error.$$===undefined){
        initTypeProto($Error,'ceylon.language::Error',$init$Throwable());
        (function($$error){
            defineAttr($$error,'description$5',function(){return this.description$5_;},undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:String$}]},$cont:$Error,d:['ceylon.language','Error','$at','description']};});
            defineAttr($$error,'cause$6',function(){return this.cause$6_;},undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Throwable}]},$cont:$Error,d:['ceylon.language','Error','$at','cause']};});
        })($Error.$$.prototype);
    }
    return $Error;
}
exports.$init$$Error=$init$$Error;
$init$$Error();
function Exception(description$7,cause$8,$$exception){
    $init$Exception();
    if($$exception===undefined)$$exception=new Exception.$$;
    if(description$7===undefined){description$7=null;}
    $$exception.description$7_=description$7;
    if(cause$8===undefined){cause$8=null;}
    $$exception.cause$8_=cause$8;
    Throwable($$exception.description$7,$$exception.cause$8,$$exception);
    if(typeof($init$native$Exception$before)==='function')$init$native$Exception$before($$exception);
    if(typeof($init$native$Exception$after)==='function')$init$native$Exception$after($$exception);
    return $$exception;
}
Exception.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Throwable},$ps:[{$nm:'description',$mt:'prm',$def:1,$t:{t:'u', l:[{t:Null},{t:String$}]},$an:function(){return[];}},{$nm:'cause',$mt:'prm',$def:1,$t:{t:'u', l:[{t:Null},{t:Throwable}]},$an:function(){return[];}}],$an:function(){return[doc(String$("The supertype of all unexpected transient failures. \n\nA subclass of `Exception`\nrepresents a more specific kind of problem, and may define \nadditional attributes which propagate information about \nproblems of that kind. Exceptions are usually \nusually unrecoverable from the point of view of the \nimmediate caller of an operation. (For example, \ntransaction rollback, or loss of connectivity.)",393)),by([String$("Gavin",5),String$("Tom",3)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared(),$native()];},d:['ceylon.language','Exception']};};
exports.Exception=Exception;
function $init$Exception(){
    if(Exception.$$===undefined){
        initTypeProto(Exception,'ceylon.language::Exception',$init$Throwable());
        (function($$exception){
            defineAttr($$exception,'description$7',function(){return this.description$7_;},undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:String$}]},$cont:Exception,d:['ceylon.language','Exception','$at','description']};});
            defineAttr($$exception,'cause$8',function(){return this.cause$8_;},undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Throwable}]},$cont:Exception,d:['ceylon.language','Exception','$at','cause']};});
        })(Exception.$$.prototype);
    }
    return Exception;
}
exports.$init$Exception=$init$Exception;
$init$Exception();
function $init$native$Throwable$before(exc) {
  var _caller=arguments.callee.caller.caller;
  exc.stack_trace=[];
  var ilc=0;
  var ilf=null;
  while(_caller) {
    exc.stack_trace.push(_caller);
    _caller = _caller.caller;
    if (_caller===ilf) {
      ilc++;
      if (ilc>2) {
        exc.stack_trace.push("CIRCULAR");
        _caller = null;
      }
    } else if (ilc===0 && _caller && exc.stack_trace.contains(_caller)) {
      ilc=1;
      ilf=_caller;
    }
  }
}
function printStackTrace(exc, _write) {
  if (_write===undefined)_write=getProcess().writeError;
  var _c = className(exc);
  if (exc.message.size > 0) {
    _c += ' "' + exc.message + '"';
  }
  _write(_c);_write(getOperatingSystem().newline);
  for (var i=0; i<exc.stack_trace.length; i++) {
    var f = exc.stack_trace[i];
    if (f == "CIRCULAR") {
      _write("    (Infinite loop detected)");
      _write(getOperatingSystem().newline);
      return;
    }
    var mm = getrtmm$$(f);
    if (mm) {
      var _src = '';
      if (i==0) {
        if (exc.$loc && exc.$file) _src = ' (' + exc.$file + " " + exc.$loc + ')';
      }
      _write("    at " + mm.d[0] + "::" + mm.d[mm.d.length-1] + _src);_write(getOperatingSystem().newline);
    }
  }
}
printStackTrace.$crtmm$=function(){
  return{mod:$CCMM$,d:['ceylon.language','printStackTrace'],$t:{t:Anything},$ps:[
    {$nm:'exception',$t:{t:Throwable},$mt:'prm'},{$nm:'write',$t:{t:Callable,a:{Return:{t:Anything},Arguments:{t:'T',l:[{t:String$}]}}},$mt:'prm','$def':1}
  ]};};
exports.printStackTrace=printStackTrace;
function Iterable($$targs$$,$$iterable){
    Category({Element$Category:{t:$Object}},$$iterable);
    add_type_arg($$iterable,'Element$Category',{t:$Object});
    set_type_args($$iterable,$$targs$$);
    $$iterable.$prop$getEmpty={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Iterable,$an:function(){return[doc(String$("Determines if the stream is empty, that is to say, if \nthe iterator returns no elements.",88)),shared(),$default()];},d:['ceylon.language','Iterable','$at','empty']};}};
    $$iterable.$prop$getEmpty.get=function(){return empty};
    $$iterable.$prop$getSize={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Iterable,$an:function(){return[doc(String$("The number of elements returned by the iterator of this \nstream, if the iterator terminates. In the case of an \ninfinite stream, this operation never terminates.",161)),shared(),$default()];},d:['ceylon.language','Iterable','$at','size']};}};
    $$iterable.$prop$getSize.get=function(){return size};
    $$iterable.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:['Absent$Iterable','Element$Iterable']},$cont:Iterable,$an:function(){return[doc(String$("The first element returned by the iterator, if any, or \n`null` if this stream is empty. For a stream with an\nunstable iteration order, a different value might be\nproduced each time `first` is evaluated.",202)),shared(),$default()];},d:['ceylon.language','Iterable','$at','first']};}};
    $$iterable.$prop$getFirst.get=function(){return first};
    $$iterable.$prop$getRest={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}},$cont:Iterable,$an:function(){return[doc(String$("A stream containing all but the first element of this \nstream. For a stream with an unstable iteration order, \na different value might be produced each time `rest` is\nevaluated.\n\nTherefore, if the stream `i` has an unstable iteration\norder, the stream `{ i.first, *i.rest }` might not have\nthe same elements as `i`.",315)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$prop$getFirst)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$at','rest']};}};
    $$iterable.$prop$getRest.get=function(){return rest};
    $$iterable.$prop$getSequence={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Iterable'}},$cont:Iterable,$an:function(){return[doc(String$("A [[sequence|Sequential]] containing all the elements \nof this stream, in the same order they occur in this\nstream.",115)),shared(),$default()];},d:['ceylon.language','Iterable','$at','sequence']};}};
    $$iterable.$prop$getSequence.get=function(){return sequence};
    $$iterable.$prop$getCoalesced={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'i', l:['Element$Iterable',{t:$Object}]},Absent$Iterable:{t:Null}}},$cont:Iterable,$an:function(){return[doc(String$("The non-null elements of this stream, in the order in\nwhich they occur in this stream. For null elements of \nthe original stream, there is no entry in the resulting \nstream.",173)),shared(),$default()];},d:['ceylon.language','Iterable','$at','coalesced']};}};
    $$iterable.$prop$getCoalesced.get=function(){return coalesced};
}
Iterable.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$Iterable:{'var':'out'},Absent$Iterable:{'var':'out','satisfies':[{t:Null}],'def':{t:Null}}},satisfies:[{t:Category,a:{Element$Category:{t:$Object}}}],$an:function(){return[doc(String$("Abstract supertype of [[categories|Category]] whose \nelements may be iterated. Iterable categories are often \ncalled _streams_. A stream need not be finite, but its \nelements must be countable. That is, for any given \nelement of the stream, every iterator of the stream must \neventually return the element, even if the iterator \nitself is not exhaustable. \n\nA given stream might not have a well-defined order, and \nso the order in which elements are produced by the \nstream\'s iterator may not be _stable_. That is, the order \nmay be different for two different iterators of the \nstream.\n\nThe type `Iterable<Element,Null>`, usually abbreviated\n`{Element*}` represents a possibly-empty iterable \ncontainer. The type `Iterable<Element,Nothing>`, usually \nabbreviated `{Element+}` represents a nonempty iterable \ncontainer.\n\nA value list in braces produces a new instance of \n`Iterable`:\n\n    {String+} words = { \"hello\", \"world\" };\n\nAn instance of `Iterable` may be iterated using a `for`\nloop:\n\n    for (c in \"hello world\") { ... }\n\nComprehensions provide a convenient syntax for \ntransforming streams:\n\n    {Integer+} lengths = { for (w in words) w.size };\n\n`Iterable` and its subtypes define various operations\nthat return other iterable objects. Such operations come \nin two flavors:\n\n- _Lazy_ operations return a *view* of the receiving\n  iterable object. If the underlying iterable object is\n  mutable, then changes to the underlying object will be \n  reflected in the resulting view. Lazy operations are \n  usually efficient, avoiding memory allocation or\n  iteration of the receiving iterable object.\n- _Eager_ operations return an immutable object. If the\n  receiving iterable object is mutable, changes to this\n  object will not be reflected in the resulting immutable\n  object. Eager operations are often expensive, involving\n  memory allocation and iteration of the receiving \n  iterable object.\n\nLazy operations are preferred, because they can be \nefficiently chained. For example:\n\n    string.filter((Character c) => c.letter)\n          .map((Character c) => c.uppercased)\n\nis much less expensive than:\n\n    string.select((Character c) => c.letter)\n          .collect((Character c) => c.uppercased)\n\nFurthermore, it is always easy to produce a new \nimmutable iterable object given the view produced by a\nlazy operation. For example:\n\n    [ *string.filter((Character c) => c.letter)\n          .map((Character c) => c.uppercased) ]\n\nLazy operations normally return an instance of `Iterable`, \nor even a [[List]], [[Map]], or [[Set]].\n\nHowever, there are certain scenarios where an eager \noperation is more useful, more convenient, or no more \nexpensive than a lazy operation, including:\n\n- sorting operations, which are eager by nature,\n- operations which preserve emptiness/nonemptiness of\n  the receiving iterable object.\n\nEager operations normally return a \n[[sequence|Sequential]].",2894)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Collection)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Iterable']};};
exports.Iterable=Iterable;
function $init$Iterable(){
    if(Iterable.$$===undefined){
        initTypeProtoI(Iterable,'ceylon.language::Iterable',$init$Category());
        (function($$iterable){
            $$iterable.iterator={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:Iterable,$an:function(){return[doc("An iterator for the elements belonging to this stream."),shared(),formal()];},d:['ceylon.language','Iterable','$m','iterator']};}};defineAttr($$iterable,'empty',function(){
                var $$iterable=this;
                return isOfType($$iterable.iterator().next(),{t:Finished});
            },undefined,function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Iterable,$an:function(){return[doc(String$("Determines if the stream is empty, that is to say, if \nthe iterator returns no elements.",88)),shared(),$default()];},d:['ceylon.language','Iterable','$at','empty']};});
            defineAttr($$iterable,'size',function(){
                var $$iterable=this;
                return $$iterable.count($JsCallable((function (e$9){
                    var $$iterable=this;
                    return true;
                }),[{$nm:'e',$mt:'prm',$t:'Element$Iterable',$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[$$iterable.$$targs$$.Element$Iterable]}}));
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Iterable,$an:function(){return[doc(String$("The number of elements returned by the iterator of this \nstream, if the iterator terminates. In the case of an \ninfinite stream, this operation never terminates.",161)),shared(),$default()];},d:['ceylon.language','Iterable','$at','size']};});
            $$iterable.longerThan=function longerThan(length$10){
                var $$iterable=this;
                if((length$10<(0))){
                    return true;
                }
                var count$11=(0);
                function setCount$11(count$12){return count$11=count$12;};
                var it$13 = $$iterable.iterator();
                var element$14;while((element$14=it$13.next())!==getFinished()){
                    if(((oldcount$15=count$11,count$11=oldcount$15.successor,oldcount$15)==length$10)){
                        return true;
                    }
                    var oldcount$15;
                }
                return false;
            };$$iterable.longerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Determines if this stream has more elements than the \ngiven [[length]]. This is an efficient operation for\nstreams with many elements.",134)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$prop$getSize)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','longerThan']};};
            $$iterable.shorterThan=function shorterThan(length$16){
                var $$iterable=this;
                if((length$16<=(0))){
                    return false;
                }
                var count$17=(0);
                function setCount$17(count$18){return count$17=count$18;};
                var it$19 = $$iterable.iterator();
                var element$20;while((element$20=it$19.next())!==getFinished()){
                    if(((count$17=count$17.successor)==length$16)){
                        return false;
                    }
                }
                return true;
            };$$iterable.shorterThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Determines if this stream has fewer elements than the \ngiven [[length]]. This is an efficient operation for \nstreams with many elements.",136)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$prop$getSize)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','shorterThan']};};
            $$iterable.contains=function (element$21){
                var $$iterable=this;
                return $$iterable.any($JsCallable(ifExists($JsCallable((opt$22=element$21,JsCallable(opt$22,opt$22!==null?opt$22.equals:null)),[{$nm:'that',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[{t:$Object}]}})),[{$nm:'p2',$mt:'prm',$t:{t:Anything}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[{t:Anything}]}}));
            };
            $$iterable.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Iterable','$m','contains']};};
            defineAttr($$iterable,'first',function(){
                var $$iterable=this;
                return first($$iterable,{Value$first:$$iterable.$$targs$$.Element$Iterable,Absent$first:$$iterable.$$targs$$.Absent$Iterable});
            },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:['Absent$Iterable','Element$Iterable']},$cont:Iterable,$an:function(){return[doc(String$("The first element returned by the iterator, if any, or \n`null` if this stream is empty. For a stream with an\nunstable iteration order, a different value might be\nproduced each time `first` is evaluated.",202)),shared(),$default()];},d:['ceylon.language','Iterable','$at','first']};});
            defineAttr($$iterable,'last',function(){
                var $$iterable=this;
                var e$23=$$iterable.first;
                function setE$23(e$24){return e$23=e$24;};
                $prop$getE$23={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:['Absent$Iterable','Element$Iterable']},$an:function(){return[variable()];},d:['ceylon.language','Iterable','$at','last','$at','e']};}};
                $prop$getE$23.get=function(){return e$23};
                $prop$getE$23.set=setE$23;
                if(setE$23.$crtmm$===undefined)setE$23.$crtmm$=$prop$getE$23.$crtmm$;
                var it$25 = $$iterable.iterator();
                var x$26;while((x$26=it$25.next())!==getFinished()){
                    e$23=x$26;
                }
                return e$23;
            },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:['Absent$Iterable','Element$Iterable']},$cont:Iterable,$an:function(){return[doc(String$("The last element returned by the iterator, if any, or \n`null` if this stream is empty. In the case of an \ninfinite stream, this operation never terminates;\nfurthermore, this default implementation iterates all \nelements, which might be very expensive.",251)),shared(),$default()];},d:['ceylon.language','Iterable','$at','last']};});defineAttr($$iterable,'rest',function(){
                var $$iterable=this;
                return $$iterable.skipping((1));
            },undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}},$cont:Iterable,$an:function(){return[doc(String$("A stream containing all but the first element of this \nstream. For a stream with an unstable iteration order, \na different value might be produced each time `rest` is\nevaluated.\n\nTherefore, if the stream `i` has an unstable iteration\norder, the stream `{ i.first, *i.rest }` might not have\nthe same elements as `i`.",315)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$prop$getFirst)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$at','rest']};});
            defineAttr($$iterable,'sequence',function(){
                var $$iterable=this;
                return SequenceBuilder({Element$SequenceBuilder:$$iterable.$$targs$$.Element$Iterable}).appendAll($$iterable).sequence;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Iterable'}},$cont:Iterable,$an:function(){return[doc(String$("A [[sequence|Sequential]] containing all the elements \nof this stream, in the same order they occur in this\nstream.",115)),shared(),$default()];},d:['ceylon.language','Iterable','$at','sequence']};});
            $$iterable.$map=function (collecting$27,$$$mptypes){
                var $$iterable=this;
                return Comprehension(function(){
                    var it$28=$$iterable.iterator();
                    var elem$29=getFinished();
                    var next$elem$29=function(){return elem$29=it$28.next();}
                    next$elem$29();
                    return function(){
                        if(elem$29!==getFinished()){
                            var elem$29$30=elem$29;
                            var tmpvar$31=collecting$27(elem$29$30);
                            next$elem$29();
                            return tmpvar$31;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:$$$mptypes.Result$map});
            };
            $$iterable.$map.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Result$map',Absent$Iterable:'Absent$Iterable'}},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$map',$an:function(){return[doc("The mapping to apply to the elements.")];}}],$cont:Iterable,$tp:{Result$map:{}},$an:function(){return[doc(String$("Produces a stream containing the results of applying \nthe [[given mapping|collecting]] to the elements of to \nthis stream.\n\nFor example, the expression\n\n    (0..4).map(10.power)\n\nresults in the stream `{ 1, 10, 100, 1000, 10000 }`.",231)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.collect)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','map']};};
            $$iterable.$filter=function (selecting$32){
                var $$iterable=this;
                return Comprehension(function(){
                    var it$33=$$iterable.iterator();
                    var elem$34=getFinished();
                    var next$elem$34=function(){
                        while((elem$34=it$33.next())!==getFinished()){
                            if(selecting$32(elem$34)){
                                return elem$34;
                            }
                        }
                        return getFinished();
                    }
                    next$elem$34();
                    return function(){
                        if(elem$34!==getFinished()){
                            var elem$34$35=elem$34;
                            var tmpvar$36=elem$34$35;
                            next$elem$34();
                            return tmpvar$36;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:$$iterable.$$targs$$.Element$Iterable});
            };
            $$iterable.$filter.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate the elements must satisfy.")];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a stream containing the elements of this \nstream that satisfy the [[given predicate \nfunction|selecting]].\n\nFor example, the expression\n\n    (1..100).filter(13.divides)\n\nresults in the stream `{ 13, 26, 39, 52, 65, 78, 91 }`.",234)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.select)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','filter']};};
            $$iterable.fold=function fold(initial$37,accumulating$38,$$$mptypes){
                var $$iterable=this;
                var partial$39=initial$37;
                function setPartial$39(partial$40){return partial$39=partial$40;};
                var it$41 = $$iterable.iterator();
                var elem$42;while((elem$42=it$41.next())!==getFinished()){
                    partial$39=accumulating$38(partial$39,elem$42);
                }
                return partial$39;
            };$$iterable.fold.$crtmm$=function(){return{mod:$CCMM$,$t:'Result$fold',$ps:[{$nm:'initial',$mt:'prm',$t:'Result$fold',$an:function(){return[];}},{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$fold',$an:function(){return[doc("The accumulating function that accepts an\nintermediate result, and the next element.")];}}],$cont:Iterable,$tp:{Result$fold:{}},$an:function(){return[doc(String$("The result of applying the [[given accumulating \nfunction|accumulating]] to each element of this stream \nin turn.\n\nFor example, the expression\n\n    (1..100).fold(0, plus<Integer>)\n\nresults in the integer `5050`.",211)),shared(),$default()];},d:['ceylon.language','Iterable','$m','fold']};};
            $$iterable.$reduce=function $reduce(accumulating$43,$$$mptypes){
                var $$iterable=this;
                var it$44=$$iterable.iterator();
                var initial$45;
                if(isOfType((initial$45=it$44.next()),$$iterable.$$targs$$.Element$Iterable)){
                    var partial$46=initial$45;
                    function setPartial$46(partial$47){return partial$46=partial$47;};
                    var next$48;
                    while(isOfType((next$48=it$44.next()),$$iterable.$$targs$$.Element$Iterable)){
                        partial$46=accumulating$43(partial$46,next$48);
                    }
                    return partial$46;
                }else {
                    //assert at Iterable.ceylon (258:12-259:35)
                    var null$49;
                    if(!(isOfType((null$49=null),$$iterable.$$targs$$.Absent$Iterable))) {throw wrapexc(AssertionException("iterable must be empty: \'is Absent null\' at Iterable.ceylon (259:19-259:34)"),'258:12-259:35','Iterable.ceylon'); }
                    return null;
                }
            };$$iterable.$reduce.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Result$reduce','Element$Iterable','Absent$Iterable']},$ps:[{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$reduce',$an:function(){return[doc("The accumulating function that accepts an\nintermediate result, and the next element.")];}}],$cont:Iterable,$tp:{Result$reduce:{}},$an:function(){return[doc(String$("The result of applying the [[given accumulating \nfunction|accumulating]] to each element of this stream \nin turn.\n\nFor example, the expression\n\n    (1..100).reduce(plus<Integer>)\n\nresults in the integer `5050`.",210)),shared(),$default()];},d:['ceylon.language','Iterable','$m','reduce']};};
            $$iterable.find=function find(selecting$50){
                var $$iterable=this;
                var it$51 = $$iterable.iterator();
                var e$52;while((e$52=it$51.next())!==getFinished()){
                    if(selecting$50(e$52)){
                        return e$52;
                    }
                }
                return null;
            };$$iterable.find.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Iterable']},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate the element must satisfy.")];}}],$cont:Iterable,$an:function(){return[doc(String$("The first element of this stream which satisfies the \n[[given predicate function|selecting]], if any, or \n`null` otherwise.",123)),shared(),$default()];},d:['ceylon.language','Iterable','$m','find']};};
            $$iterable.findLast=function findLast(selecting$53){
                var $$iterable=this;
                var last$54=null;
                function setLast$54(last$55){return last$54=last$55;};
                var it$56 = $$iterable.iterator();
                var e$57;while((e$57=it$56.next())!==getFinished()){
                    if(selecting$53(e$57)){
                        last$54=e$57;
                    }
                }
                return last$54;
            };$$iterable.findLast.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Iterable']},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate the element must satisfy.")];}}],$cont:Iterable,$an:function(){return[doc(String$("The last element of this stream which satisfies the \n[[given predicate function|selecting]], if any, or \n`null` otherwise.",122)),shared(),$default()];},d:['ceylon.language','Iterable','$m','findLast']};};
            $$iterable.$sort=function (comparing$58){
                var $$iterable=this;
                return internalSort($JsCallable(comparing$58,[{$nm:'x',$mt:'prm',$t:'Element$Iterable',$an:function(){return[];}},{$nm:'y',$mt:'prm',$t:'Element$Iterable',$an:function(){return[];}}],{Return$Callable:{t:Comparison},Arguments$Callable:{t:'T', l:[$$iterable.$$targs$$.Element$Iterable,$$iterable.$$targs$$.Element$Iterable]}}),$$iterable,{Element$internalSort:$$iterable.$$targs$$.Element$Iterable});
            };
            $$iterable.$sort.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Iterable'}},$ps:[{$nm:'comparing',$mt:'prm',$pt:'f',$t:{t:Comparison},$an:function(){return[doc("The function comparing pairs of elements.")];}}],$cont:Iterable,$an:function(){return[doc(String$("A sequence containing the elements of this stream, \nsorted according to a [[comparator function|comparing]] \nimposing a partial order upon the elements.\n\nFor convenience, the functions [[byIncreasing]] and \n[[byDecreasing]] produce suitable comparator functions:\n\n    \"Hello World!\".sort(byIncreasing(Character.lowercased))\n\nThis operation is eager by nature.",359)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byIncreasing),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byDecreasing)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','sort']};};
            $$iterable.collect=function (collecting$59,$$$mptypes){
                var $$iterable=this;
                return $$iterable.$map($JsCallable(collecting$59,[{$nm:'element',$mt:'prm',$t:'Element$Iterable',$an:function(){return[];}}],{Return$Callable:$$$mptypes.Result$collect,Arguments$Callable:{t:'T', l:[$$iterable.$$targs$$.Element$Iterable]}}),{Result$map:$$$mptypes.Result$collect}).sequence;
            };
            $$iterable.collect.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Result$collect'}},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$collect',$an:function(){return[doc("The transformation applied to the elements.")];}}],$cont:Iterable,$tp:{Result$collect:{}},$an:function(){return[doc(String$("Produces a sequence containing the results of applying \nthe [[given mapping|collecting]] to the elements of \nthis stream. An eager counterpart to [[map]].",154)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$map)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','collect']};};
            $$iterable.select=function (selecting$60){
                var $$iterable=this;
                return $$iterable.$filter($JsCallable(selecting$60,[{$nm:'element',$mt:'prm',$t:'Element$Iterable',$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[$$iterable.$$targs$$.Element$Iterable]}})).sequence;
            };
            $$iterable.select.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Iterable'}},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate the elements must satisfy.")];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a sequence containing all elements of this \nstream that satisfy the [[given predicate|selecting]].\nAn eager counterpart to [[filter]].",143)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$filter)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','select']};};
            $$iterable.any=function any(selecting$61){
                var $$iterable=this;
                var it$62 = $$iterable.iterator();
                var e$63;while((e$63=it$62.next())!==getFinished()){
                    if(selecting$61(e$63)){
                        return true;
                    }
                }
                return false;
            };$$iterable.any.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate that at least one element \nmust satisfy.")];}}],$cont:Iterable,$an:function(){return[doc(String$("Determines if there is at least one element of this \nstream that satisfies the [[given predicate \nfunction|selecting]].",119)),shared(),$default()];},d:['ceylon.language','Iterable','$m','any']};};
            $$iterable.$every=function $every(selecting$64){
                var $$iterable=this;
                var it$65 = $$iterable.iterator();
                var e$66;while((e$66=it$65.next())!==getFinished()){
                    if((!selecting$64(e$66))){
                        return false;
                    }
                }
                return true;
            };$$iterable.$every.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate that all elements must \nsatisfy.")];}}],$cont:Iterable,$an:function(){return[doc(String$("Determines if all elements of this stream satisfy the \n[[given predicate function|selecting]].",94)),shared(),$default()];},d:['ceylon.language','Iterable','$m','every']};};
            $$iterable.skipping=function skipping(skip$67){
                var $$iterable=this;
                if((skip$67<=(0))){
                    return $$iterable;
                }else {
                    var cntvar$68=false;
                    var brkvar$70=false;
                    var retvar$69=(function(){
                        function iterable$71($$targs$$){
                            var $$iterable$71=new iterable$71.$$;
                            $$iterable$71.$$outer=$$iterable;
                            $$iterable$71.$$targs$$=$$targs$$;
                            Iterable({Element$Iterable:$$iterable.$$targs$$.Element$Iterable,Absent$Iterable:{t:Null}},$$iterable$71);
                            add_type_arg($$iterable$71,'Absent$Iterable',{t:Null});
                            return $$iterable$71;
                        };iterable$71.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}}],d:['ceylon.language','Iterable','$m','skipping','$o','iterable']};};
                        function $init$iterable$71(){
                            if(iterable$71.$$===undefined){
                                initTypeProto(iterable$71,'ceylon.language::Iterable.skipping.iterable',Basic,$init$Iterable());
                                (function($$iterable$71){
                                    $$iterable$71.iterator=function iterator(){
                                        var $$iterable$71=this;
                                        var iter$72=$$iterable.iterator();
                                        var i$73=(0);
                                        function setI$73(i$74){return i$73=i$74;};
                                        while((((oldi$75=i$73,i$73=oldi$75.successor,oldi$75)<skip$67)&&(!isOfType(iter$72.next(),{t:Finished})))){}
                                        var oldi$75;
                                        return iter$72;
                                    };$$iterable$71.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:iterable$71,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','skipping','$o','iterable','$m','iterator']};};
                                })(iterable$71.$$.prototype);
                            }
                            return iterable$71;
                        }
                        $init$iterable$71();
                        var iterable$76;
                        function getIterable$76(){
                            if(iterable$76===undefined){iterable$76=$init$iterable$71()({Absent$Iterable:{t:Null},Element$Iterable:$$iterable.$$targs$$.Element$Iterable});iterable$76.$crtmm$=getIterable$76.$crtmm$;}
                            return iterable$76;
                        }
                        getIterable$76.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$71},d:['ceylon.language','Iterable','$m','skipping','$o','iterable']};};
                        $prop$getIterable$76={get:getIterable$76,$crtmm$:getIterable$76.$crtmm$};
                        return getIterable$76();
                    }());if(retvar$69!==undefined){return retvar$69;}
                }
            };$$iterable.skipping.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}},$ps:[{$nm:'skip',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a stream containing the elements of this \nstream, after skipping the first [[skip]] elements\nproduced by its iterator.\n\nIf this stream does not contain more elements than the \nspecified number of elements to skip, the resulting \nstream has no elements. If the specified number of \nelements to skip is zero or fewer, the resulting stream \ncontains the same elements as this stream.",389)),shared(),$default()];},d:['ceylon.language','Iterable','$m','skipping']};};
            $$iterable.taking=function taking(take$77){
                var $$iterable=this;
                if((take$77<=(0))){
                    return getEmpty();
                }else {
                    var cntvar$78=false;
                    var brkvar$80=false;
                    var retvar$79=(function(){
                        function iterable$81($$targs$$){
                            var $$iterable$81=new iterable$81.$$;
                            $$iterable$81.$$outer=$$iterable;
                            $$iterable$81.$$targs$$=$$targs$$;
                            Iterable({Element$Iterable:$$iterable.$$targs$$.Element$Iterable,Absent$Iterable:{t:Null}},$$iterable$81);
                            add_type_arg($$iterable$81,'Absent$Iterable',{t:Null});
                            $$iterable$81.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Iterable']},$cont:iterable$81,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','taking','$o','iterable','$at','first']};}};
                            $$iterable$81.$prop$getFirst.get=function(){return first};
                            return $$iterable$81;
                        };iterable$81.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}}],d:['ceylon.language','Iterable','$m','taking','$o','iterable']};};
                        function $init$iterable$81(){
                            if(iterable$81.$$===undefined){
                                initTypeProto(iterable$81,'ceylon.language::Iterable.taking.iterable',Basic,$init$Iterable());
                                (function($$iterable$81){
                                    $$iterable$81.iterator=function iterator(){
                                        var $$iterable$81=this;
                                        var iter$82=$$iterable.iterator();
                                        function iterator$83($$targs$$){
                                            var $$iterator$83=new iterator$83.$$;
                                            $$iterator$83.$$outer=$$iterable$81;
                                            $$iterator$83.$$targs$$=$$targs$$;
                                            Iterator({Element$Iterator:$$iterable.$$targs$$.Element$Iterable},$$iterator$83);
                                            $$iterator$83.i$84_=(0);
                                            $$iterator$83.$prop$getI$84={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$83,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','taking','$o','iterable','$m','iterator','$o','iterator','$at','i']};}};
                                            $$iterator$83.$prop$getI$84.get=function(){return i$84};
                                            return $$iterator$83;
                                        };iterator$83.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Iterable'}}],d:['ceylon.language','Iterable','$m','taking','$o','iterable','$m','iterator','$o','iterator']};};
                                        function $init$iterator$83(){
                                            if(iterator$83.$$===undefined){
                                                initTypeProto(iterator$83,'ceylon.language::Iterable.taking.iterable.iterator.iterator',Basic,$init$Iterator());
                                                (function($$iterator$83){
                                                    defineAttr($$iterator$83,'i$84',function(){return this.i$84_;},function(i$85){return this.i$84_=i$85;},function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$83,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','taking','$o','iterable','$m','iterator','$o','iterator','$at','i']};});
                                                    $$iterator$83.next=function next(){
                                                        var $$iterator$83=this;
                                                        return (opt$86=((($$iterator$83.i$84=$$iterator$83.i$84.successor)>take$77)?getFinished():null),opt$86!==null&&opt$86!==undefined?opt$86:iter$82.next());
                                                        var opt$86;
                                                    };$$iterator$83.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterable',{t:Finished}]},$ps:[],$cont:iterator$83,$an:function(){return[actual(),shared()];},d:['ceylon.language','Iterable','$m','taking','$o','iterable','$m','iterator','$o','iterator','$m','next']};};
                                                })(iterator$83.$$.prototype);
                                            }
                                            return iterator$83;
                                        }
                                        $init$iterator$83();
                                        var iterator$87;
                                        function getIterator$87(){
                                            if(iterator$87===undefined){iterator$87=$init$iterator$83()({Element$Iterator:$$iterable.$$targs$$.Element$Iterable});iterator$87.$crtmm$=getIterator$87.$crtmm$;}
                                            return iterator$87;
                                        }
                                        getIterator$87.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$83},d:['ceylon.language','Iterable','$m','taking','$o','iterable','$m','iterator','$o','iterator']};};
                                        $prop$getIterator$87={get:getIterator$87,$crtmm$:getIterator$87.$crtmm$};
                                        return getIterator$87();
                                    };$$iterable$81.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:iterable$81,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','taking','$o','iterable','$m','iterator']};};
                                    defineAttr($$iterable$81,'first',function(){
                                        var $$iterable$81=this;
                                        return $$iterable.first;
                                    },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Iterable']},$cont:iterable$81,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','taking','$o','iterable','$at','first']};});
                                })(iterable$81.$$.prototype);
                            }
                            return iterable$81;
                        }
                        $init$iterable$81();
                        var iterable$88;
                        function getIterable$88(){
                            if(iterable$88===undefined){iterable$88=$init$iterable$81()({Absent$Iterable:{t:Null},Element$Iterable:$$iterable.$$targs$$.Element$Iterable});iterable$88.$crtmm$=getIterable$88.$crtmm$;}
                            return iterable$88;
                        }
                        getIterable$88.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$81},d:['ceylon.language','Iterable','$m','taking','$o','iterable']};};
                        $prop$getIterable$88={get:getIterable$88,$crtmm$:getIterable$88.$crtmm$};
                        return getIterable$88();
                    }());if(retvar$79!==undefined){return retvar$79;}
                }
            };$$iterable.taking.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}},$ps:[{$nm:'take',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a stream containing the first [[take]]\nelements of this stream.\n\nIf the specified number of elements to take is larger \nthan the number of elements of this stream, the \nresulting stream contains the same elements as this \nstream. If the specified number of elements to take is\nfewer than one, the resulting stream has no elements.",339)),shared(),$default()];},d:['ceylon.language','Iterable','$m','taking']};};
            $$iterable.skippingWhile=function skippingWhile(skip$89){
                var $$iterable=this;
                function iterable$90($$targs$$){
                    var $$iterable$90=new iterable$90.$$;
                    $$iterable$90.$$outer=$$iterable;
                    $$iterable$90.$$targs$$=$$targs$$;
                    Iterable({Element$Iterable:$$iterable.$$targs$$.Element$Iterable,Absent$Iterable:{t:Null}},$$iterable$90);
                    add_type_arg($$iterable$90,'Absent$Iterable',{t:Null});
                    return $$iterable$90;
                };iterable$90.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}}],d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable']};};
                function $init$iterable$90(){
                    if(iterable$90.$$===undefined){
                        initTypeProto(iterable$90,'ceylon.language::Iterable.skippingWhile.iterable',Basic,$init$Iterable());
                        (function($$iterable$90){
                            $$iterable$90.iterator=function iterator(){
                                var $$iterable$90=this;
                                var iter$91=$$iterable.iterator();
                                var elem$92;
                                while(!isOfType((elem$92=iter$91.next()),{t:Finished})){
                                    if((!skip$89(elem$92))){
                                        var cntvar$93=false;
                                        var brkvar$95=false;
                                        var retvar$94=(function(){
                                            function iterator$96($$targs$$){
                                                var $$iterator$96=new iterator$96.$$;
                                                $$iterator$96.$$outer=$$iterable$90;
                                                $$iterator$96.$$targs$$=$$targs$$;
                                                Iterator({Element$Iterator:$$iterable.$$targs$$.Element$Iterable},$$iterator$96);
                                                $$iterator$96.first$97_=true;
                                                $$iterator$96.$prop$getFirst$97={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:iterator$96,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable','$m','iterator','$o','iterator','$at','first']};}};
                                                $$iterator$96.$prop$getFirst$97.get=function(){return first$97};
                                                return $$iterator$96;
                                            };iterator$96.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Iterable'}}],d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable','$m','iterator','$o','iterator']};};
                                            function $init$iterator$96(){
                                                if(iterator$96.$$===undefined){
                                                    initTypeProto(iterator$96,'ceylon.language::Iterable.skippingWhile.iterable.iterator.iterator',Basic,$init$Iterator());
                                                    (function($$iterator$96){
                                                        defineAttr($$iterator$96,'first$97',function(){return this.first$97_;},function(first$98){return this.first$97_=first$98;},function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:iterator$96,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable','$m','iterator','$o','iterator','$at','first']};});
                                                        $$iterator$96.next=function next(){
                                                            var $$iterator$96=this;
                                                            if($$iterator$96.first$97){
                                                                $$iterator$96.first$97=false;
                                                                return elem$92;
                                                            }else {
                                                                return iter$91.next();
                                                            }
                                                        };$$iterator$96.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterable',{t:Finished}]},$ps:[],$cont:iterator$96,$an:function(){return[actual(),shared()];},d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable','$m','iterator','$o','iterator','$m','next']};};
                                                    })(iterator$96.$$.prototype);
                                                }
                                                return iterator$96;
                                            }
                                            $init$iterator$96();
                                            var iterator$99;
                                            function getIterator$99(){
                                                if(iterator$99===undefined){iterator$99=$init$iterator$96()({Element$Iterator:$$iterable.$$targs$$.Element$Iterable});iterator$99.$crtmm$=getIterator$99.$crtmm$;}
                                                return iterator$99;
                                            }
                                            getIterator$99.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$96},d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable','$m','iterator','$o','iterator']};};
                                            $prop$getIterator$99={get:getIterator$99,$crtmm$:getIterator$99.$crtmm$};
                                            return getIterator$99();
                                        }());if(retvar$94!==undefined){return retvar$94;}
                                    }
                                }
                                return getEmptyIterator();
                            };$$iterable$90.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:iterable$90,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable','$m','iterator']};};
                        })(iterable$90.$$.prototype);
                    }
                    return iterable$90;
                }
                $init$iterable$90();
                var iterable$100;
                function getIterable$100(){
                    if(iterable$100===undefined){iterable$100=$init$iterable$90()({Absent$Iterable:{t:Null},Element$Iterable:$$iterable.$$targs$$.Element$Iterable});iterable$100.$crtmm$=getIterable$100.$crtmm$;}
                    return iterable$100;
                }
                getIterable$100.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$90},d:['ceylon.language','Iterable','$m','skippingWhile','$o','iterable']};};
                $prop$getIterable$100={get:getIterable$100,$crtmm$:getIterable$100.$crtmm$};
                return getIterable$100();
            };$$iterable.skippingWhile.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}},$ps:[{$nm:'skip',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a stream containing the elements of this \nstream, after skipping the leading elements until the \n[[given predicate function|skip]] returns `false`.",156)),shared(),$default()];},d:['ceylon.language','Iterable','$m','skippingWhile']};};
            $$iterable.takingWhile=function takingWhile(take$101){
                var $$iterable=this;
                function iterable$102($$targs$$){
                    var $$iterable$102=new iterable$102.$$;
                    $$iterable$102.$$outer=$$iterable;
                    $$iterable$102.$$targs$$=$$targs$$;
                    Iterable({Element$Iterable:$$iterable.$$targs$$.Element$Iterable,Absent$Iterable:{t:Null}},$$iterable$102);
                    add_type_arg($$iterable$102,'Absent$Iterable',{t:Null});
                    return $$iterable$102;
                };iterable$102.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}}],d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable']};};
                function $init$iterable$102(){
                    if(iterable$102.$$===undefined){
                        initTypeProto(iterable$102,'ceylon.language::Iterable.takingWhile.iterable',Basic,$init$Iterable());
                        (function($$iterable$102){
                            $$iterable$102.iterator=function iterator(){
                                var $$iterable$102=this;
                                var iter$103=$$iterable.iterator();
                                function iterator$104($$targs$$){
                                    var $$iterator$104=new iterator$104.$$;
                                    $$iterator$104.$$outer=$$iterable$102;
                                    $$iterator$104.$$targs$$=$$targs$$;
                                    Iterator({Element$Iterator:$$iterable.$$targs$$.Element$Iterable},$$iterator$104);
                                    $$iterator$104.alive$105_=true;
                                    $$iterator$104.$prop$getAlive$105={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:iterator$104,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable','$m','iterator','$o','iterator','$at','alive']};}};
                                    $$iterator$104.$prop$getAlive$105.get=function(){return alive$105};
                                    return $$iterator$104;
                                };iterator$104.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Iterable'}}],d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable','$m','iterator','$o','iterator']};};
                                function $init$iterator$104(){
                                    if(iterator$104.$$===undefined){
                                        initTypeProto(iterator$104,'ceylon.language::Iterable.takingWhile.iterable.iterator.iterator',Basic,$init$Iterator());
                                        (function($$iterator$104){
                                            defineAttr($$iterator$104,'alive$105',function(){return this.alive$105_;},function(alive$106){return this.alive$105_=alive$106;},function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:iterator$104,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable','$m','iterator','$o','iterator','$at','alive']};});
                                            $$iterator$104.next=function next(){
                                                var $$iterator$104=this;
                                                var next$107;
                                                if($$iterator$104.alive$105&&!isOfType((next$107=iter$103.next()),{t:Finished})){
                                                    if(take$101(next$107)){
                                                        return next$107;
                                                    }else {
                                                        $$iterator$104.alive$105=false;
                                                    }
                                                }
                                                return getFinished();
                                            };$$iterator$104.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterable',{t:Finished}]},$ps:[],$cont:iterator$104,$an:function(){return[actual(),shared()];},d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable','$m','iterator','$o','iterator','$m','next']};};
                                        })(iterator$104.$$.prototype);
                                    }
                                    return iterator$104;
                                }
                                $init$iterator$104();
                                var iterator$108;
                                function getIterator$108(){
                                    if(iterator$108===undefined){iterator$108=$init$iterator$104()({Element$Iterator:$$iterable.$$targs$$.Element$Iterable});iterator$108.$crtmm$=getIterator$108.$crtmm$;}
                                    return iterator$108;
                                }
                                getIterator$108.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$104},d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable','$m','iterator','$o','iterator']};};
                                $prop$getIterator$108={get:getIterator$108,$crtmm$:getIterator$108.$crtmm$};
                                return getIterator$108();
                            };$$iterable$102.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:iterable$102,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable','$m','iterator']};};
                        })(iterable$102.$$.prototype);
                    }
                    return iterable$102;
                }
                $init$iterable$102();
                var iterable$109;
                function getIterable$109(){
                    if(iterable$109===undefined){iterable$109=$init$iterable$102()({Absent$Iterable:{t:Null},Element$Iterable:$$iterable.$$targs$$.Element$Iterable});iterable$109.$crtmm$=getIterable$109.$crtmm$;}
                    return iterable$109;
                }
                getIterable$109.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$102},d:['ceylon.language','Iterable','$m','takingWhile','$o','iterable']};};
                $prop$getIterable$109={get:getIterable$109,$crtmm$:getIterable$109.$crtmm$};
                return getIterable$109();
            };$$iterable.takingWhile.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:{t:Null}}},$ps:[{$nm:'take',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a stream containing the leading elements of \nthis stream until the [[given predicate function|take]] \nreturns `false`.",127)),shared(),$default()];},d:['ceylon.language','Iterable','$m','takingWhile']};};
            $$iterable.by=function by(step$110){
                var $$iterable=this;
                //assert at Iterable.ceylon (493:8-494:25)
                if(!((step$110>(0)))) {throw wrapexc(AssertionException("step size must be greater than zero: \'step > 0\' at Iterable.ceylon (494:15-494:24)"),'493:8-494:25','Iterable.ceylon'); }
                if((step$110==(1))){
                    return $$iterable;
                }else {
                    var cntvar$111=false;
                    var brkvar$113=false;
                    var retvar$112=(function(){
                        function iterable$114($$targs$$){
                            var $$iterable$114=new iterable$114.$$;
                            $$iterable$114.$$outer=$$iterable;
                            $$iterable$114.$$targs$$=$$targs$$;
                            Iterable({Element$Iterable:$$iterable.$$targs$$.Element$Iterable,Absent$Iterable:$$iterable.$$targs$$.Absent$Iterable},$$iterable$114);
                            return $$iterable$114;
                        };iterable$114.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:'Absent$Iterable'}}],d:['ceylon.language','Iterable','$m','by','$o','iterable']};};
                        function $init$iterable$114(){
                            if(iterable$114.$$===undefined){
                                initTypeProto(iterable$114,'ceylon.language::Iterable.by.iterable',Basic,$init$Iterable());
                                (function($$iterable$114){
                                    $$iterable$114.iterator=function iterator(){
                                        var $$iterable$114=this;
                                        var iter$115=$$iterable.iterator();
                                        function iterator$116($$targs$$){
                                            var $$iterator$116=new iterator$116.$$;
                                            $$iterator$116.$$outer=$$iterable$114;
                                            $$iterator$116.$$targs$$=$$targs$$;
                                            Iterator({Element$Iterator:$$iterable.$$targs$$.Element$Iterable},$$iterator$116);
                                            return $$iterator$116;
                                        };iterator$116.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Iterable'}}],d:['ceylon.language','Iterable','$m','by','$o','iterable','$m','iterator','$o','iterator']};};
                                        function $init$iterator$116(){
                                            if(iterator$116.$$===undefined){
                                                initTypeProto(iterator$116,'ceylon.language::Iterable.by.iterable.iterator.iterator',Basic,$init$Iterator());
                                                (function($$iterator$116){
                                                    $$iterator$116.next=function next(){
                                                        var $$iterator$116=this;
                                                        var next$117=iter$115.next();
                                                        var i$118=(0);
                                                        function setI$118(i$119){return i$118=i$119;};
                                                        while((((i$118=i$118.successor)<step$110)&&(!isOfType(iter$115.next(),{t:Finished})))){}
                                                        return next$117;
                                                    };$$iterator$116.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterable',{t:Finished}]},$ps:[],$cont:iterator$116,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','by','$o','iterable','$m','iterator','$o','iterator','$m','next']};};
                                                })(iterator$116.$$.prototype);
                                            }
                                            return iterator$116;
                                        }
                                        $init$iterator$116();
                                        var iterator$120;
                                        function getIterator$120(){
                                            if(iterator$120===undefined){iterator$120=$init$iterator$116()({Element$Iterator:$$iterable.$$targs$$.Element$Iterable});iterator$120.$crtmm$=getIterator$120.$crtmm$;}
                                            return iterator$120;
                                        }
                                        getIterator$120.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$116},d:['ceylon.language','Iterable','$m','by','$o','iterable','$m','iterator','$o','iterator']};};
                                        $prop$getIterator$120={get:getIterator$120,$crtmm$:getIterator$120.$crtmm$};
                                        return getIterator$120();
                                    };$$iterable$114.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:iterable$114,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','by','$o','iterable','$m','iterator']};};
                                })(iterable$114.$$.prototype);
                            }
                            return iterable$114;
                        }
                        $init$iterable$114();
                        var iterable$121;
                        function getIterable$121(){
                            if(iterable$121===undefined){iterable$121=$init$iterable$114()({Absent$Iterable:$$iterable.$$targs$$.Absent$Iterable,Element$Iterable:$$iterable.$$targs$$.Element$Iterable});iterable$121.$crtmm$=getIterable$121.$crtmm$;}
                            return iterable$121;
                        }
                        getIterable$121.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$114},d:['ceylon.language','Iterable','$m','by','$o','iterable']};};
                        $prop$getIterable$121={get:getIterable$121,$crtmm$:getIterable$121.$crtmm$};
                        return getIterable$121();
                    }());if(retvar$112!==undefined){return retvar$112;}
                }
            };$$iterable.by.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:'Absent$Iterable'}},$ps:[{$nm:'step',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a stream containing every [[step]]th element \nof this stream. If the step size is `1`, the resulting\nstream contains the same elements as this stream.\n\nFor example, the expression\n\n    (0..10).by(3)\n\nresults in the stream `{ 0, 3, 6, 9 }`.\n\nThe step size must be greater than zero.",290)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),AssertionError),String$("if the given step size is nonpositive, \ni.e. `step<1`",53)),shared(),$default()];},d:['ceylon.language','Iterable','$m','by']};};
            $$iterable.count=function count(selecting$122){
                var $$iterable=this;
                var count$123=(0);
                function setCount$123(count$124){return count$123=count$124;};
                var it$125 = $$iterable.iterator();
                var elem$126;while((elem$126=it$125.next())!==getFinished()){
                    var elem$127;
                    if((elem$127=elem$126)!==null&&selecting$122(elem$127)){
                        (oldcount$128=count$123,count$123=oldcount$128.successor,oldcount$128);
                        var oldcount$128;
                    }
                }
                return count$123;
            };$$iterable.count.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate satisfied by the elements to\nbe counted.")];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces the number of elements in this stream that \nsatisfy the [[given predicate function|selecting]].\nFor an infinite stream, this operation never \nterminates.",162)),shared(),$default()];},d:['ceylon.language','Iterable','$m','count']};};
            defineAttr($$iterable,'coalesced',function(){
                var $$iterable=this;
                return Comprehension(function(){
                    var e$131;
                    var it$129=$$iterable.iterator();
                    var e$130=getFinished();
                    var e$131;
                    var next$e$130=function(){
                        while((e$130=it$129.next())!==getFinished()){
                            if((e$131=e$130)!==null){
                                return e$130;
                            }
                        }
                        return getFinished();
                    }
                    next$e$130();
                    return function(){
                        if(e$130!==getFinished()){
                            var e$130$132=e$130;
                            var tmpvar$133=e$131;
                            next$e$130();
                            return tmpvar$133;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]}});
            },undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'i', l:['Element$Iterable',{t:$Object}]},Absent$Iterable:{t:Null}}},$cont:Iterable,$an:function(){return[doc(String$("The non-null elements of this stream, in the order in\nwhich they occur in this stream. For null elements of \nthe original stream, there is no entry in the resulting \nstream.",173)),shared(),$default()];},d:['ceylon.language','Iterable','$at','coalesced']};});
            defineAttr($$iterable,'indexed',function(){
                var $$iterable=this;
                function indexes$134($$targs$$){
                    var $$indexes$134=new indexes$134.$$;
                    $$indexes$134.$$outer=$$iterable;
                    $$indexes$134.$$targs$$=$$targs$$;
                    Iterable({Element$Iterable:{t:Entry,a:{Item$Entry:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]},Key$Entry:{t:Integer}}},Absent$Iterable:{t:Null}},$$indexes$134);
                    add_type_arg($$indexes$134,'Element$Iterable',{t:Entry,a:{Item$Entry:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]},Key$Entry:{t:Integer}}});
                    add_type_arg($$indexes$134,'Absent$Iterable',{t:Null});
                    $$indexes$134.$prop$getOrig$135={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:'Absent$Iterable',Element$Iterable:'Element$Iterable'}},$cont:indexes$134,d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$at','orig']};}};
                    $$indexes$134.$prop$getOrig$135.get=function(){return orig$135};
                    return $$indexes$134;
                };indexes$134.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:{t:Entry,a:{Item$Entry:{t:'i', l:['Element$Iterable',{t:$Object}]},Key$Entry:{t:Integer}}},Absent$Iterable:{t:Null}}}],d:['ceylon.language','Iterable','$at','indexed','$o','indexes']};};
                function $init$indexes$134(){
                    if(indexes$134.$$===undefined){
                        initTypeProto(indexes$134,'ceylon.language::Iterable.indexed.indexes',Basic,$init$Iterable());
                        (function($$indexes$134){
                            defineAttr($$indexes$134,'orig$135',function(){
                                var $$indexes$134=this;
                                return $$iterable;
                            },undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:'Absent$Iterable',Element$Iterable:'Element$Iterable'}},$cont:indexes$134,d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$at','orig']};});
                            $$indexes$134.iterator=function iterator(){
                                var $$indexes$134=this;
                                function iterator$136($$targs$$){
                                    var $$iterator$136=new iterator$136.$$;
                                    $$iterator$136.$$outer=$$indexes$134;
                                    $$iterator$136.$$targs$$=$$targs$$;
                                    Iterator({Element$Iterator:{t:Entry,a:{Item$Entry:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]},Key$Entry:{t:Integer}}}},$$iterator$136);
                                    add_type_arg($$iterator$136,'Element$Iterator',{t:Entry,a:{Item$Entry:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]},Key$Entry:{t:Integer}}});
                                    $$iterator$136.iter$137_=$$indexes$134.orig$135.iterator();
                                    $$iterator$136.$prop$getIter$137={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$cont:iterator$136,d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator','$o','iterator','$at','iter']};}};
                                    $$iterator$136.$prop$getIter$137.get=function(){return iter$137};
                                    $$iterator$136.i$138_=(0);
                                    $$iterator$136.$prop$getI$138={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$136,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator','$o','iterator','$at','i']};}};
                                    $$iterator$136.$prop$getI$138.get=function(){return i$138};
                                    return $$iterator$136;
                                };iterator$136.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:{t:Entry,a:{Item$Entry:{t:'i', l:['Element$Iterable',{t:$Object}]},Key$Entry:{t:Integer}}}}}],d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator','$o','iterator']};};
                                function $init$iterator$136(){
                                    if(iterator$136.$$===undefined){
                                        initTypeProto(iterator$136,'ceylon.language::Iterable.indexed.indexes.iterator.iterator',Basic,$init$Iterator());
                                        (function($$iterator$136){
                                            defineAttr($$iterator$136,'iter$137',function(){return this.iter$137_;},undefined,function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$cont:iterator$136,d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator','$o','iterator','$at','iter']};});
                                            defineAttr($$iterator$136,'i$138',function(){return this.i$138_;},function(i$139){return this.i$138_=i$139;},function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$136,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator','$o','iterator','$at','i']};});
                                            $$iterator$136.next=function next(){
                                                var $$iterator$136=this;
                                                var next$140=$$iterator$136.iter$137.next();
                                                function setNext$140(next$141){return next$140=next$141;};
                                                while((!exists(next$140))){
                                                    (oldi$142=$$iterator$136.i$138,$$iterator$136.i$138=oldi$142.successor,oldi$142);
                                                    var oldi$142;
                                                    next$140=$$iterator$136.iter$137.next();
                                                }
                                                //assert at Iterable.ceylon (571:24-571:48)
                                                var n$143;
                                                if(!((n$143=next$140)!==null)) {throw wrapexc(AssertionException("Assertion failed: \'exists n = next\' at Iterable.ceylon (571:31-571:47)"),'571:24-571:48','Iterable.ceylon'); }
                                                var n$144;
                                                if(!isOfType((n$144=n$143),{t:Finished})){
                                                    return Entry((oldi$145=$$iterator$136.i$138,$$iterator$136.i$138=oldi$145.successor,oldi$145),n$144,{Item$Entry:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]},Key$Entry:{t:Integer}});
                                                    var oldi$145;
                                                }else {
                                                    return getFinished();
                                                }
                                            };$$iterator$136.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Entry,a:{Item$Entry:{t:'i', l:['Element$Iterable',{t:$Object}]},Key$Entry:{t:Integer}}},{t:Finished}]},$ps:[],$cont:iterator$136,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator','$o','iterator','$m','next']};};
                                        })(iterator$136.$$.prototype);
                                    }
                                    return iterator$136;
                                }
                                $init$iterator$136();
                                var iterator$146;
                                function getIterator$146(){
                                    if(iterator$146===undefined){iterator$146=$init$iterator$136()({Element$Iterator:{t:Entry,a:{Item$Entry:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]},Key$Entry:{t:Integer}}}});iterator$146.$crtmm$=getIterator$146.$crtmm$;}
                                    return iterator$146;
                                }
                                getIterator$146.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$136},d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator','$o','iterator']};};
                                $prop$getIterator$146={get:getIterator$146,$crtmm$:getIterator$146.$crtmm$};
                                return getIterator$146();
                            };$$indexes$134.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:Entry,a:{Item$Entry:{t:'i', l:['Element$Iterable',{t:$Object}]},Key$Entry:{t:Integer}}}}},$ps:[],$cont:indexes$134,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$at','indexed','$o','indexes','$m','iterator']};};
                        })(indexes$134.$$.prototype);
                    }
                    return indexes$134;
                }
                $init$indexes$134();
                var indexes$147;
                function getIndexes$147(){
                    if(indexes$147===undefined){indexes$147=$init$indexes$134()({Absent$Iterable:{t:Null},Element$Iterable:{t:Entry,a:{Item$Entry:{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]},Key$Entry:{t:Integer}}}});indexes$147.$crtmm$=getIndexes$147.$crtmm$;}
                    return indexes$147;
                }
                getIndexes$147.$crtmm$=function(){return{mod:$CCMM$,$t:{t:indexes$134},d:['ceylon.language','Iterable','$at','indexed','$o','indexes']};};
                $prop$getIndexes$147={get:getIndexes$147,$crtmm$:getIndexes$147.$crtmm$};
                return getIndexes$147();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:Entry,a:{Item$Entry:{t:'i', l:['Element$Iterable',{t:$Object}]},Key$Entry:{t:Integer}}},Absent$Iterable:{t:Null}}},$cont:Iterable,$an:function(){return[doc(String$("All entries of form `index->element` where `index` is \nthe position at which `element` occurs, for every\nnon-null element of this stream, ordered by increasing \n`index`. For a null element at a given position in this \nstream, there is no entry with the corresponding index \nin the resulting stream.\n\nFor example, the expression \n\n    { \"hello\", null, \"world\" }.indexed\n\nresults in the stream `{ 0->\"hello\", 2->\"world\" }`.",421)),shared(),$default()];},d:['ceylon.language','Iterable','$at','indexed']};});$$iterable.following=function following(head$148,$$$mptypes){
                var $$iterable=this;
                function cons$149($$targs$$){
                    var $$cons$149=new cons$149.$$;
                    $$cons$149.$$outer=$$iterable;
                    $$cons$149.$$targs$$=$$targs$$;
                    Iterable({Element$Iterable:{t:'u', l:[$$iterable.$$targs$$.Element$Iterable,$$$mptypes.Other$following]},Absent$Iterable:{t:Nothing}},$$cons$149);
                    return $$cons$149;
                };cons$149.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:{t:'u', l:['Element$Iterable','Other$following']},Absent$Iterable:{t:Nothing}}}],d:['ceylon.language','Iterable','$m','following','$o','cons']};};
                function $init$cons$149(){
                    if(cons$149.$$===undefined){
                        initTypeProto(cons$149,'ceylon.language::Iterable.following.cons',Basic,$init$Iterable());
                        (function($$cons$149){
                            $$cons$149.iterator=function iterator(){
                                var $$cons$149=this;
                                var iter$150=$$iterable.iterator();
                                function iterator$151($$targs$$){
                                    var $$iterator$151=new iterator$151.$$;
                                    $$iterator$151.$$outer=$$cons$149;
                                    $$iterator$151.$$targs$$=$$targs$$;
                                    Iterator({Element$Iterator:{t:'u', l:[$$iterable.$$targs$$.Element$Iterable,$$$mptypes.Other$following]}},$$iterator$151);
                                    $$iterator$151.first$152_=true;
                                    $$iterator$151.$prop$getFirst$152={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:iterator$151,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','following','$o','cons','$m','iterator','$o','iterator','$at','first']};}};
                                    $$iterator$151.$prop$getFirst$152.get=function(){return first$152};
                                    return $$iterator$151;
                                };iterator$151.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:{t:'u', l:['Element$Iterable','Other$following']}}}],d:['ceylon.language','Iterable','$m','following','$o','cons','$m','iterator','$o','iterator']};};
                                function $init$iterator$151(){
                                    if(iterator$151.$$===undefined){
                                        initTypeProto(iterator$151,'ceylon.language::Iterable.following.cons.iterator.iterator',Basic,$init$Iterator());
                                        (function($$iterator$151){
                                            defineAttr($$iterator$151,'first$152',function(){return this.first$152_;},function(first$153){return this.first$152_=first$153;},function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:iterator$151,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','following','$o','cons','$m','iterator','$o','iterator','$at','first']};});
                                            $$iterator$151.next=function next(){
                                                var $$iterator$151=this;
                                                if($$iterator$151.first$152){
                                                    $$iterator$151.first$152=false;
                                                    return head$148;
                                                }else {
                                                    return iter$150.next();
                                                }
                                            };$$iterator$151.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterable','Other$following',{t:Finished}]},$ps:[],$cont:iterator$151,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','following','$o','cons','$m','iterator','$o','iterator','$m','next']};};
                                        })(iterator$151.$$.prototype);
                                    }
                                    return iterator$151;
                                }
                                $init$iterator$151();
                                var iterator$154;
                                function getIterator$154(){
                                    if(iterator$154===undefined){iterator$154=$init$iterator$151()({Element$Iterator:{t:'u', l:[$$iterable.$$targs$$.Element$Iterable,$$$mptypes.Other$following]}});iterator$154.$crtmm$=getIterator$154.$crtmm$;}
                                    return iterator$154;
                                }
                                getIterator$154.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$151},d:['ceylon.language','Iterable','$m','following','$o','cons','$m','iterator','$o','iterator']};};
                                $prop$getIterator$154={get:getIterator$154,$crtmm$:getIterator$154.$crtmm$};
                                return getIterator$154();
                            };$$cons$149.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:'u', l:['Element$Iterable','Other$following']}}},$ps:[],$cont:cons$149,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','following','$o','cons','$m','iterator']};};
                        })(cons$149.$$.prototype);
                    }
                    return cons$149;
                }
                $init$cons$149();
                var cons$155;
                function getCons$155(){
                    if(cons$155===undefined){cons$155=$init$cons$149()({Absent$Iterable:{t:Nothing},Element$Iterable:{t:'u', l:[$$iterable.$$targs$$.Element$Iterable,$$$mptypes.Other$following]}});cons$155.$crtmm$=getCons$155.$crtmm$;}
                    return cons$155;
                }
                getCons$155.$crtmm$=function(){return{mod:$CCMM$,$t:{t:cons$149},d:['ceylon.language','Iterable','$m','following','$o','cons']};};
                $prop$getCons$155={get:getCons$155,$crtmm$:getCons$155.$crtmm$};
                return getCons$155();
            };$$iterable.following.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'u', l:['Element$Iterable','Other$following']},Absent$Iterable:{t:Nothing}}},$ps:[{$nm:'head',$mt:'prm',$t:'Other$following',$an:function(){return[];}}],$cont:Iterable,$tp:{Other$following:{}},$an:function(){return[doc(String$("Produces a stream with a [[given initial element|head]], \nfollowed by the elements of this stream.",98)),shared(),$default()];},d:['ceylon.language','Iterable','$m','following']};};
            $$iterable.chain=function chain(other$156,$$$mptypes){
                var $$iterable=this;
                function chained$157($$targs$$){
                    var $$chained$157=new chained$157.$$;
                    $$chained$157.$$outer=$$iterable;
                    $$chained$157.$$targs$$=$$targs$$;
                    Iterable({Element$Iterable:{t:'u', l:[$$iterable.$$targs$$.Element$Iterable,$$$mptypes.Other$chain]},Absent$Iterable:{t:'i', l:[$$iterable.$$targs$$.Absent$Iterable,$$$mptypes.OtherAbsent$chain]}},$$chained$157);
                    return $$chained$157;
                };chained$157.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:{t:'u', l:['Element$Iterable','Other$chain']},Absent$Iterable:{t:'i', l:['Absent$Iterable','OtherAbsent$chain']}}}],d:['ceylon.language','Iterable','$m','chain','$o','chained']};};
                function $init$chained$157(){
                    if(chained$157.$$===undefined){
                        initTypeProto(chained$157,'ceylon.language::Iterable.chain.chained',Basic,$init$Iterable());
                        (function($$chained$157){
                            $$chained$157.iterator=function (){
                                var $$chained$157=this;
                                return ChainedIterator($$iterable,other$156,{Other$ChainedIterator:$$$mptypes.Other$chain,Element$ChainedIterator:$$iterable.$$targs$$.Element$Iterable});
                            };
                            $$chained$157.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:'u', l:['Element$Iterable','Other$chain']}}},$ps:[],$cont:chained$157,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','chain','$o','chained','$m','iterator']};};
                        })(chained$157.$$.prototype);
                    }
                    return chained$157;
                }
                $init$chained$157();
                var chained$158;
                function getChained$158(){
                    if(chained$158===undefined){chained$158=$init$chained$157()({Absent$Iterable:{t:'i', l:[$$iterable.$$targs$$.Absent$Iterable,$$$mptypes.OtherAbsent$chain]},Element$Iterable:{t:'u', l:[$$iterable.$$targs$$.Element$Iterable,$$$mptypes.Other$chain]}});chained$158.$crtmm$=getChained$158.$crtmm$;}
                    return chained$158;
                }
                getChained$158.$crtmm$=function(){return{mod:$CCMM$,$t:{t:chained$157},d:['ceylon.language','Iterable','$m','chain','$o','chained']};};
                $prop$getChained$158={get:getChained$158,$crtmm$:getChained$158.$crtmm$};
                return getChained$158();
            };$$iterable.chain.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'u', l:['Element$Iterable','Other$chain']},Absent$Iterable:{t:'i', l:['Absent$Iterable','OtherAbsent$chain']}}},$ps:[{$nm:'other',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Other$chain',Absent$Iterable:'OtherAbsent$chain'}},$an:function(){return[];}}],$cont:Iterable,$tp:{Other$chain:{},OtherAbsent$chain:{'satisfies':[{t:Null}]}},$an:function(){return[doc(String$("The elements of this stream, in the order in which they \noccur in this stream, followed by the elements of the \n[[given stream|other]] in the order in which they occur \nin the given stream.",189)),shared(),$default()];},d:['ceylon.language','Iterable','$m','chain']};};
            $$iterable.defaultNullElements=function (defaultValue$159,$$$mptypes){
                var $$iterable=this;
                return Comprehension(function(){
                    var it$160=$$iterable.iterator();
                    var elem$161=getFinished();
                    var next$elem$161=function(){return elem$161=it$160.next();}
                    next$elem$161();
                    return function(){
                        if(elem$161!==getFinished()){
                            var elem$161$162=elem$161;
                            var tmpvar$163=(opt$164=elem$161$162,opt$164!==null&&opt$164!==undefined?opt$164:defaultValue$159);
                            next$elem$161();
                            return tmpvar$163;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[$$$mptypes.Default$defaultNullElements,{t:'i', l:[$$iterable.$$targs$$.Element$Iterable,{t:$Object}]}]}});
            };
            $$iterable.defaultNullElements.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'u', l:[{t:'i', l:['Element$Iterable',{t:$Object}]},'Default$defaultNullElements']},Absent$Iterable:'Absent$Iterable'}},$ps:[{$nm:'defaultValue',$mt:'prm',$t:'Default$defaultNullElements',$an:function(){return[doc("A default value that replaces `null` elements.")];}}],$cont:Iterable,$tp:{Default$defaultNullElements:{}},$an:function(){return[doc(String$("Produces a stream containing the elements of this \nstream, replacing every `null` element with the [[given \ndefault value|defaultValue]]. The resulting stream does \nnot have the value `null`.",191)),shared(),$default()];},d:['ceylon.language','Iterable','$m','defaultNullElements']};};
            defineAttr($$iterable,'string',function(){
                var $$iterable=this;
                if($$iterable.empty){
                    return String$("{}",2);
                }else {
                    var list$165=commaList($$iterable.taking((30)));
                    $prop$getList$165={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Iterable','$at','string','$at','list']};}};
                    $prop$getList$165.get=function(){return list$165};
                    return StringBuilder([String$("{ ",2),(opt$166=($$iterable.longerThan((30))?list$165.plus(String$(", ...",5)):null),opt$166!==null&&opt$166!==undefined?opt$166:list$165).string,String$(" }",2)]).string;
                    var opt$166;
                }
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Iterable,$an:function(){return[doc(String$("A string of form `\"{ x, y, z }\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \nstream, or the string `\"{}\"` if this stream is empty. \nIf the stream is very long, the list of elements might \nbe truncated, as indicated by an ellipse.",316)),shared(),actual(),$default()];},d:['ceylon.language','Iterable','$at','string']};});defineAttr($$iterable,'cycled',function(){
                var $$iterable=this;
                function iterable$167($$targs$$){
                    var $$iterable$167=new iterable$167.$$;
                    $$iterable$167.$$outer=$$iterable;
                    $$iterable$167.$$targs$$=$$targs$$;
                    Iterable({Element$Iterable:$$iterable.$$targs$$.Element$Iterable,Absent$Iterable:$$iterable.$$targs$$.Absent$Iterable},$$iterable$167);
                    $$iterable$167.$prop$getOrig$168={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:'Absent$Iterable',Element$Iterable:'Element$Iterable'}},$cont:iterable$167,d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$at','orig']};}};
                    $$iterable$167.$prop$getOrig$168.get=function(){return orig$168};
                    return $$iterable$167;
                };iterable$167.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:'Absent$Iterable'}}],d:['ceylon.language','Iterable','$at','cycled','$o','iterable']};};
                function $init$iterable$167(){
                    if(iterable$167.$$===undefined){
                        initTypeProto(iterable$167,'ceylon.language::Iterable.cycled.iterable',Basic,$init$Iterable());
                        (function($$iterable$167){
                            defineAttr($$iterable$167,'orig$168',function(){
                                var $$iterable$167=this;
                                return $$iterable;
                            },undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:'Absent$Iterable',Element$Iterable:'Element$Iterable'}},$cont:iterable$167,d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$at','orig']};});
                            $$iterable$167.iterator=function iterator(){
                                var $$iterable$167=this;
                                function iterator$169($$targs$$){
                                    var $$iterator$169=new iterator$169.$$;
                                    $$iterator$169.$$outer=$$iterable$167;
                                    $$iterator$169.$$targs$$=$$targs$$;
                                    Iterator({Element$Iterator:$$iterable.$$targs$$.Element$Iterable},$$iterator$169);
                                    $$iterator$169.iter$170_=getEmptyIterator();
                                    $$iterator$169.$prop$getIter$170={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$cont:iterator$169,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$m','iterator','$o','iterator','$at','iter']};}};
                                    $$iterator$169.$prop$getIter$170.get=function(){return iter$170};
                                    return $$iterator$169;
                                };iterator$169.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Iterable'}}],d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$m','iterator','$o','iterator']};};
                                function $init$iterator$169(){
                                    if(iterator$169.$$===undefined){
                                        initTypeProto(iterator$169,'ceylon.language::Iterable.cycled.iterable.iterator.iterator',Basic,$init$Iterator());
                                        (function($$iterator$169){
                                            defineAttr($$iterator$169,'iter$170',function(){return this.iter$170_;},function(iter$171){return this.iter$170_=iter$171;},function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$cont:iterator$169,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$m','iterator','$o','iterator','$at','iter']};});
                                            $$iterator$169.next=function next(){
                                                var $$iterator$169=this;
                                                var next$172;
                                                if(!isOfType((next$172=$$iterator$169.iter$170.next()),{t:Finished})){
                                                    return next$172;
                                                }else {
                                                    $$iterator$169.iter$170=$$iterable$167.orig$168.iterator();
                                                    return $$iterator$169.iter$170.next();
                                                }
                                            };$$iterator$169.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterable',{t:Finished}]},$ps:[],$cont:iterator$169,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$m','iterator','$o','iterator','$m','next']};};
                                        })(iterator$169.$$.prototype);
                                    }
                                    return iterator$169;
                                }
                                $init$iterator$169();
                                var iterator$173;
                                function getIterator$173(){
                                    if(iterator$173===undefined){iterator$173=$init$iterator$169()({Element$Iterator:$$iterable.$$targs$$.Element$Iterable});iterator$173.$crtmm$=getIterator$173.$crtmm$;}
                                    return iterator$173;
                                }
                                getIterator$173.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$169},d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$m','iterator','$o','iterator']};};
                                $prop$getIterator$173={get:getIterator$173,$crtmm$:getIterator$173.$crtmm$};
                                return getIterator$173();
                            };$$iterable$167.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:iterable$167,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$at','cycled','$o','iterable','$m','iterator']};};
                        })(iterable$167.$$.prototype);
                    }
                    return iterable$167;
                }
                $init$iterable$167();
                var iterable$174;
                function getIterable$174(){
                    if(iterable$174===undefined){iterable$174=$init$iterable$167()({Absent$Iterable:$$iterable.$$targs$$.Absent$Iterable,Element$Iterable:$$iterable.$$targs$$.Element$Iterable});iterable$174.$crtmm$=getIterable$174.$crtmm$;}
                    return iterable$174;
                }
                getIterable$174.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$167},d:['ceylon.language','Iterable','$at','cycled','$o','iterable']};};
                $prop$getIterable$174={get:getIterable$174,$crtmm$:getIterable$174.$crtmm$};
                return getIterable$174();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:'Absent$Iterable'}},$cont:Iterable,$an:function(){return[doc(String$("An infinite stream that produces the elements of this \nstream, repeatedly.\n\nFor example, the expression\n\n    {6, 9}.cycled.taking(5)\n\nevaluates to the stream `{ 6, 9, 6, 9, 6 }`.",178)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.cycle)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$at','cycled']};});$$iterable.cycle=function cycle(times$175){
                var $$iterable=this;
                function iterable$176($$targs$$){
                    var $$iterable$176=new iterable$176.$$;
                    $$iterable$176.$$outer=$$iterable;
                    $$iterable$176.$$targs$$=$$targs$$;
                    Iterable({Element$Iterable:$$iterable.$$targs$$.Element$Iterable,Absent$Iterable:$$iterable.$$targs$$.Absent$Iterable},$$iterable$176);
                    $$iterable$176.$prop$getOrig$177={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:'Absent$Iterable',Element$Iterable:'Element$Iterable'}},$cont:iterable$176,d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$at','orig']};}};
                    $$iterable$176.$prop$getOrig$177.get=function(){return orig$177};
                    return $$iterable$176;
                };iterable$176.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:'Absent$Iterable'}}],d:['ceylon.language','Iterable','$m','cycle','$o','iterable']};};
                function $init$iterable$176(){
                    if(iterable$176.$$===undefined){
                        initTypeProto(iterable$176,'ceylon.language::Iterable.cycle.iterable',Basic,$init$Iterable());
                        (function($$iterable$176){
                            defineAttr($$iterable$176,'orig$177',function(){
                                var $$iterable$176=this;
                                return $$iterable;
                            },undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:'Absent$Iterable',Element$Iterable:'Element$Iterable'}},$cont:iterable$176,d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$at','orig']};});
                            $$iterable$176.iterator=function iterator(){
                                var $$iterable$176=this;
                                function iterator$178($$targs$$){
                                    var $$iterator$178=new iterator$178.$$;
                                    $$iterator$178.$$outer=$$iterable$176;
                                    $$iterator$178.$$targs$$=$$targs$$;
                                    Iterator({Element$Iterator:$$iterable.$$targs$$.Element$Iterable},$$iterator$178);
                                    $$iterator$178.iter$179_=getEmptyIterator();
                                    $$iterator$178.$prop$getIter$179={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$cont:iterator$178,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator','$o','iterator','$at','iter']};}};
                                    $$iterator$178.$prop$getIter$179.get=function(){return iter$179};
                                    $$iterator$178.count$180_=(0);
                                    $$iterator$178.$prop$getCount$180={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$178,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator','$o','iterator','$at','count']};}};
                                    $$iterator$178.$prop$getCount$180.get=function(){return count$180};
                                    return $$iterator$178;
                                };iterator$178.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Iterable'}}],d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator','$o','iterator']};};
                                function $init$iterator$178(){
                                    if(iterator$178.$$===undefined){
                                        initTypeProto(iterator$178,'ceylon.language::Iterable.cycle.iterable.iterator.iterator',Basic,$init$Iterator());
                                        (function($$iterator$178){
                                            defineAttr($$iterator$178,'iter$179',function(){return this.iter$179_;},function(iter$181){return this.iter$179_=iter$181;},function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$cont:iterator$178,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator','$o','iterator','$at','iter']};});
                                            defineAttr($$iterator$178,'count$180',function(){return this.count$180_;},function(count$182){return this.count$180_=count$182;},function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$178,$an:function(){return[variable()];},d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator','$o','iterator','$at','count']};});
                                            $$iterator$178.next=function next(){
                                                var $$iterator$178=this;
                                                var next$183;
                                                if(!isOfType((next$183=$$iterator$178.iter$179.next()),{t:Finished})){
                                                    return next$183;
                                                }else {
                                                    if(($$iterator$178.count$180<times$175)){
                                                        (oldcount$184=$$iterator$178.count$180,$$iterator$178.count$180=oldcount$184.successor,oldcount$184);
                                                        var oldcount$184;
                                                        $$iterator$178.iter$179=$$iterable$176.orig$177.iterator();
                                                    }else {
                                                        $$iterator$178.iter$179=getEmptyIterator();
                                                    }
                                                    return $$iterator$178.iter$179.next();
                                                }
                                            };$$iterator$178.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterable',{t:Finished}]},$ps:[],$cont:iterator$178,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator','$o','iterator','$m','next']};};
                                        })(iterator$178.$$.prototype);
                                    }
                                    return iterator$178;
                                }
                                $init$iterator$178();
                                var iterator$185;
                                function getIterator$185(){
                                    if(iterator$185===undefined){iterator$185=$init$iterator$178()({Element$Iterator:$$iterable.$$targs$$.Element$Iterable});iterator$185.$crtmm$=getIterator$185.$crtmm$;}
                                    return iterator$185;
                                }
                                getIterator$185.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$178},d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator','$o','iterator']};};
                                $prop$getIterator$185={get:getIterator$185,$crtmm$:getIterator$185.$crtmm$};
                                return getIterator$185();
                            };$$iterable$176.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Iterable'}},$ps:[],$cont:iterable$176,$an:function(){return[shared(),actual()];},d:['ceylon.language','Iterable','$m','cycle','$o','iterable','$m','iterator']};};
                        })(iterable$176.$$.prototype);
                    }
                    return iterable$176;
                }
                $init$iterable$176();
                var iterable$186;
                function getIterable$186(){
                    if(iterable$186===undefined){iterable$186=$init$iterable$176()({Absent$Iterable:$$iterable.$$targs$$.Absent$Iterable,Element$Iterable:$$iterable.$$targs$$.Element$Iterable});iterable$186.$crtmm$=getIterable$186.$crtmm$;}
                    return iterable$186;
                }
                getIterable$186.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$176},d:['ceylon.language','Iterable','$m','cycle','$o','iterable']};};
                $prop$getIterable$186={get:getIterable$186,$crtmm$:getIterable$186.$crtmm$};
                return getIterable$186();
            };$$iterable.cycle.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Iterable',Absent$Iterable:'Absent$Iterable'}},$ps:[{$nm:'times',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a stream formed by repeating the elements of \nthis stream the [[given number of times|times]], or an \nempty stream if `times<=0`.",138)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$prop$getCycled),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.repeat)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:ValueDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','cycle']};};
            $$iterable.repeat=function repeat(times$187){
                var $$iterable=this;
                var sb$188=SequenceBuilder({Element$SequenceBuilder:$$iterable.$$targs$$.Element$Iterable});
                var count$189=(0);
                function setCount$189(count$190){return count$189=count$190;};
                while(((oldcount$191=count$189,count$189=oldcount$191.successor,oldcount$191)<times$187)){
                    sb$188.appendAll($$iterable);
                }
                var oldcount$191;
                return sb$188.sequence;
            };$$iterable.repeat.$crtmm$=function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$Iterable'}},$ps:[{$nm:'times',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Iterable,$an:function(){return[doc(String$("Produces a list formed by repeating the elements of \nthis stream the [[given number of times|times]], or an \nempty list if `times<=0`. An eager counterpart to \n[[cycle]].",170)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.cycle)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Iterable','$m','repeat']};};
        })(Iterable.$$.prototype);
    }
    return Iterable;
}
exports.$init$Iterable=$init$Iterable;
$init$Iterable();
var opt$22,opt$164;
var commaList=function (elements$192){
    return (strings$193=Comprehension(function(){
        var it$194=elements$192.iterator();
        var element$195=getFinished();
        var next$element$195=function(){return element$195=it$194.next();}
        next$element$195();
        return function(){
            if(element$195!==getFinished()){
                var element$195$196=element$195;
                var tmpvar$197=(opt$198=(opt$199=element$195$196,opt$199!==null&&opt$199!==undefined?opt$199.string:null),opt$198!==null&&opt$198!==undefined?opt$198:String$("<null>",6));
                next$element$195();
                return tmpvar$197;
            }
            return getFinished();
        }
    },{Absent$Iterable:{t:Null},Element$Iterable:{t:String$}}),(opt$200=String$(", ",2),JsCallable(opt$200,opt$200!==null?opt$200.join:null))(strings$193));
};
commaList.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},$ps:[{$nm:'elements',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:Anything},Absent$Iterable:{t:Null}}},$an:function(){return[];}}],d:['ceylon.language','commaList']};};
var strings$193,opt$198,opt$199,opt$200;
function ifExists(predicate$201){
    return function(val$202){
        var val$203;
        if((val$203=val$202)!==null){
            return predicate$201(val$203);
        }else {
            return false;
        }
    }
};ifExists.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'predicate',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],d:['ceylon.language','ifExists']};};
function Sequential($$targs$$,$$sequential){
    List({Element$List:$$targs$$.Element$Sequential},$$sequential);
    Ranged({Span$Ranged:{t:Sequential,a:{Element$Sequential:$$targs$$.Element$Sequential}},Index$Ranged:{t:Integer}},$$sequential);
    add_type_arg($$sequential,'Span$Ranged',{t:Sequential,a:{Element$Sequential:$$sequential.$$targs$$.Element$Sequential}});
    add_type_arg($$sequential,'Index$Ranged',{t:Integer});
    set_type_args($$sequential,$$targs$$);
    $$sequential.$prop$getSequence={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$cont:Sequential,$an:function(){return[doc(String$("This sequence.",14)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$at','sequence']};}};
    $$sequential.$prop$getSequence.get=function(){return sequence};
    $$sequential.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Sequential,$an:function(){return[doc(String$("A string of form `\"[ x, y, z ]\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \ncollection, or the string `\"{}\"` if this collection \nis empty. If the collection iterator produces the value \n`null`, the string representation contains the string \n`\"null\"`.",338)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$at','string']};}};
    $$sequential.$prop$getString.get=function(){return string};
}
Sequential.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$Sequential:{'var':'out'}},satisfies:[{t:List,a:{Element$List:'Element$Sequential'}},{t:Ranged,a:{Span$Ranged:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},Index$Ranged:{t:Integer}}}],of:[{t:Empty},{t:Sequence,a:{Element$Sequence:'Element$Sequential'}}],$an:function(){return[doc(String$("A possibly-empty, immutable sequence of values. The type \n`Sequential<Element>` may be abbreviated `[Element*]` or \n`Element[]`. \n\n`Sequential` has two enumerated subtypes:\n\n- `Empty`, abbreviated `[]`, represents an empty sequence, \n   and\n- `Sequence<Element>`, abbreviated `[Element+]` represents \n   a non-empty sequence, and has the very important \n   subclass [[Tuple]].",376)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Tuple)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ClassDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','Sequential']};};
exports.Sequential=Sequential;
function $init$Sequential(){
    if(Sequential.$$===undefined){
        initTypeProtoI(Sequential,'ceylon.language::Sequential',$init$List(),$init$Ranged());
        (function($$sequential){
            $$sequential.$prop$getReversed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$cont:Sequential,$an:function(){return[doc(String$("Reverse this sequence, returning a new sequence.",48)),shared(),actual(),formal()];},d:['ceylon.language','Sequential','$at','reversed']};}};
            defineAttr($$sequential,'sequence',function(){
                var $$sequential=this;
                return $$sequential;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$cont:Sequential,$an:function(){return[doc(String$("This sequence.",14)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$at','sequence']};});
            $$sequential.$prop$getRest={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$cont:Sequential,$an:function(){return[doc(String$("The rest of the sequence, without the first \nelement.",53)),shared(),actual(),formal()];},d:['ceylon.language','Sequential','$at','rest']};}};
            $$sequential.repeat=function (times$204){
                var $$sequential=this;
                return $$sequential.cycle(times$204).sequence;
            };
            $$sequential.repeat.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$ps:[{$nm:'times',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Sequential,$an:function(){return[doc(String$("Returns a sequence formed by repeating the elements of \nthis sequence the given number of times, or an empty \nsequence if `times<=0`.",133)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$m','repeat']};};
            $$sequential.initial=function (length$205){
                var $$sequential=this;
                return $$sequential.segment((0),length$205);
            };
            $$sequential.initial.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Sequential,$an:function(){return[doc(String$("Select the first elements of this sequence, returning \na sequence no longer than the given length. If this \nsequence is shorter than the given length, return this \nsequence. Otherwise return a sequence of the given \nlength.",223)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$m','initial']};};
            $$sequential.terminal=function terminal(length$206){
                var $$sequential=this;
                var l$207;
                if((l$207=$$sequential.lastIndex)!==null&&(length$206>(0))){
                    return $$sequential.span(l$207.minus(length$206).plus((1)),l$207);
                }else {
                    return getEmpty();
                }
            };$$sequential.terminal.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Sequential,$an:function(){return[doc(String$("Select the last elements of the sequence, returning a \nsequence no longer than the given length. If this \nsequence is shorter than the given length, return this \nsequence. Otherwise return a sequence of the given \nlength.",221)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$m','terminal']};};
            $$sequential.trim=function (trimming$208){
                var $$sequential=this;
                return $$sequential.getT$all()['ceylon.language::List'].$$.prototype.trim.call(this,$JsCallable(trimming$208,[{$nm:'elem',$mt:'prm',$t:'Element$Sequential',$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[$$sequential.$$targs$$.Element$Sequential]}})).sequence;
            };
            $$sequential.trim.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$ps:[{$nm:'trimming',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Sequential,$an:function(){return[doc(String$("Trim the elements satisfying the given predicate\nfunction from the start and end of this sequence, \nreturning a sequence no longer than this sequence.",150)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$m','trim']};};
            $$sequential.trimLeading=function (trimming$209){
                var $$sequential=this;
                return $$sequential.getT$all()['ceylon.language::List'].$$.prototype.trimLeading.call(this,$JsCallable(trimming$209,[{$nm:'elem',$mt:'prm',$t:'Element$Sequential',$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[$$sequential.$$targs$$.Element$Sequential]}})).sequence;
            };
            $$sequential.trimLeading.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$ps:[{$nm:'trimming',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Sequential,$an:function(){return[doc(String$("Trim the elements satisfying the given predicate\nfunction from the start of this sequence, returning \na sequence no longer than this sequence.",142)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$m','trimLeading']};};
            $$sequential.trimTrailing=function (trimming$210){
                var $$sequential=this;
                return $$sequential.getT$all()['ceylon.language::List'].$$.prototype.trimTrailing.call(this,$JsCallable(trimming$210,[{$nm:'elem',$mt:'prm',$t:'Element$Sequential',$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[$$sequential.$$targs$$.Element$Sequential]}})).sequence;
            };
            $$sequential.trimTrailing.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$ps:[{$nm:'trimming',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Sequential,$an:function(){return[doc(String$("Trim the elements satisfying the given predicate\nfunction from the end of this sequence, returning a \nsequence no longer than this sequence.",140)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$m','trimTrailing']};};
            $$sequential.following={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Other$following'},{$t:'Element$Sequential',seq:1}]},$ps:[{$nm:'head',$mt:'prm',$t:'Other$following',$an:function(){return[];}}],$cont:Sequential,$tp:{Other$following:{}},$an:function(){return[doc("Produces a sequence with a given [[initial element|head]], \nfollowed by the elements of this sequence."),shared(),actual(),formal()];},d:['ceylon.language','Sequential','$m','following']};}};$$sequential.clone=function (){
                var $$sequential=this;
                return $$sequential;
            };
            $$sequential.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequential'}},$ps:[],$cont:Sequential,$an:function(){return[doc(String$("This sequence.",14)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$m','clone']};};
            defineAttr($$sequential,'string',function(){
                var $$sequential=this;
                return (opt$211=($$sequential.empty?String$("[]",2):null),opt$211!==null&&opt$211!==undefined?opt$211:StringBuilder([String$("[",1),commaList($$sequential).string,String$("]",1)]).string);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Sequential,$an:function(){return[doc(String$("A string of form `\"[ x, y, z ]\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \ncollection, or the string `\"{}\"` if this collection \nis empty. If the collection iterator produces the value \n`null`, the string representation contains the string \n`\"null\"`.",338)),shared(),actual(),$default()];},d:['ceylon.language','Sequential','$at','string']};});
        })(Sequential.$$.prototype);
    }
    return Sequential;
}
exports.$init$Sequential=$init$Sequential;
$init$Sequential();
var opt$211;
function Sequence($$targs$$,$$sequence){
    Sequential({Element$Sequential:$$targs$$.Element$Sequence},$$sequence);
    Iterable({Element$Iterable:$$targs$$.Element$Sequence,Absent$Iterable:{t:Nothing}},$$sequence);
    set_type_args($$sequence,$$targs$$);
    $$sequence.$prop$getEmpty={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Sequence,$an:function(){return[doc(String$("Returns `false`, since every `Sequence` contains at\nleast one element.",70)),shared(),actual()];},d:['ceylon.language','Sequence','$at','empty']};}};
    $$sequence.$prop$getEmpty.get=function(){return empty};
    $$sequence.$prop$getSequence={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:'Element$Sequence'}},$cont:Sequence,$an:function(){return[doc(String$("This nonempty sequence.",23)),shared(),$default(),actual()];},d:['ceylon.language','Sequence','$at','sequence']};}};
    $$sequence.$prop$getSequence.get=function(){return sequence};
    $$sequence.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Sequence,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Sequence','$at','string']};}};
    $$sequence.$prop$getString.get=function(){return string};
}
Sequence.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$Sequence:{'var':'out'}},satisfies:[{t:Sequential,a:{Element$Sequential:'Element$Sequence'}},{t:Iterable,a:{Element$Iterable:'Element$Sequence',Absent$Iterable:{t:Nothing}}}],$an:function(){return[doc(String$("A nonempty, immutable sequence of values. The type \n`Sequence<Element>` may be abbreviated `[Element+]`.\n\nGiven a possibly-empty sequence of type `[Element*]`, the \n`if (nonempty ...)` construct, or, alternatively, \n`assert (nonempty ...)`, may be used to narrow to a \nsequence type to a nonempty sequence type:\n\n    [Integer*] nums = ... ;\n    if (nonempty nums) {\n        Integer first = nums.first;\n        Integer max = max(nums);\n        [Integer+] squares = nums.collect((Integer i) => i**2));\n        [Integer+] sorted = nums.sort(byIncreasing((Integer i) => i));\n    }\n\nOperations like `first`, `max()`, `collect()`, and `sort()`, \nwhich polymorphically produce a nonempty or non-null output \nwhen given a nonempty input are called \n_emptiness-preserving_.",764)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Empty)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Sequence']};};
exports.Sequence=Sequence;
function $init$Sequence(){
    if(Sequence.$$===undefined){
        initTypeProtoI(Sequence,'ceylon.language::Sequence',$init$Sequential(),$init$Iterable());
        (function($$sequence){
            $$sequence.$prop$getLastIndex={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Sequence,$an:function(){return[doc(String$("The index of the last element of the sequence.",46)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$prop$getSize)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),actual(),formal()];},d:['ceylon.language','Sequence','$at','lastIndex']};}};
            $$sequence.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Sequence',$cont:Sequence,$an:function(){return[doc(String$("The first element of the sequence, that is, the element\nwith index `0`.",71)),shared(),actual(),formal()];},d:['ceylon.language','Sequence','$at','first']};}};
            $$sequence.$prop$getLast={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Sequence',$cont:Sequence,$an:function(){return[doc(String$("The last element of the sequence, that is, the element\nwith index `sequence.lastIndex`.",87)),shared(),actual(),formal()];},d:['ceylon.language','Sequence','$at','last']};}};
            defineAttr($$sequence,'empty',function(){
                var $$sequence=this;
                return false;
            },undefined,function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Sequence,$an:function(){return[doc(String$("Returns `false`, since every `Sequence` contains at\nleast one element.",70)),shared(),actual()];},d:['ceylon.language','Sequence','$at','empty']};});
            $$sequence.$prop$getReversed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:'Element$Sequence'}},$cont:Sequence,$an:function(){return[doc(String$("Reverse this sequence, returning a new nonempty\nsequence.",57)),shared(),actual(),formal()];},d:['ceylon.language','Sequence','$at','reversed']};}};
            defineAttr($$sequence,'sequence',function(){
                var $$sequence=this;
                return $$sequence;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:'Element$Sequence'}},$cont:Sequence,$an:function(){return[doc(String$("This nonempty sequence.",23)),shared(),$default(),actual()];},d:['ceylon.language','Sequence','$at','sequence']};});
            $$sequence.$prop$getRest={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequence'}},$cont:Sequence,$an:function(){return[doc(String$("The rest of the sequence, without the first element.",52)),shared(),actual(),formal()];},d:['ceylon.language','Sequence','$at','rest']};}};
            $$sequence.$sort=function $sort(comparing$212){
                var $$sequence=this;
                var s$213=internalSort($JsCallable(comparing$212,[{$nm:'x',$mt:'prm',$t:'Element$Sequence',$an:function(){return[];}},{$nm:'y',$mt:'prm',$t:'Element$Sequence',$an:function(){return[];}}],{Return$Callable:{t:Comparison},Arguments$Callable:{t:'T', l:[$$sequence.$$targs$$.Element$Sequence,$$sequence.$$targs$$.Element$Sequence]}}),$$sequence,{Element$internalSort:$$sequence.$$targs$$.Element$Sequence});
                //assert at Sequence.ceylon (61:8-61:27)
                var s$214;
                if(!(nonempty((s$214=s$213)))) {throw wrapexc(AssertionException("Assertion failed: \'nonempty s\' at Sequence.ceylon (61:15-61:26)"),'61:8-61:27','Sequence.ceylon'); }
                return s$214;
            };$$sequence.$sort.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:'Element$Sequence'}},$ps:[{$nm:'comparing',$mt:'prm',$pt:'f',$t:{t:Comparison},$an:function(){return[doc("The function comparing pairs of elements.")];}}],$cont:Sequence,$an:function(){return[doc(String$("A nonempty sequence containing the elements of this\ncontainer, sorted according to a function imposing a \npartial order upon the elements.",138)),shared(),$default(),actual()];},d:['ceylon.language','Sequence','$m','sort']};};
            $$sequence.collect=function collect(collecting$215,$$$mptypes){
                var $$sequence=this;
                var s$216=$$sequence.$map($JsCallable(collecting$215,[{$nm:'element',$mt:'prm',$t:'Element$Sequence',$an:function(){return[];}}],{Return$Callable:$$$mptypes.Result$collect,Arguments$Callable:{t:'T', l:[$$sequence.$$targs$$.Element$Sequence]}}),{Result$map:$$$mptypes.Result$collect}).sequence;
                //assert at Sequence.ceylon (71:8-71:27)
                var s$217;
                if(!(nonempty((s$217=s$216)))) {throw wrapexc(AssertionException("Assertion failed: \'nonempty s\' at Sequence.ceylon (71:15-71:26)"),'71:8-71:27','Sequence.ceylon'); }
                return s$217;
            };$$sequence.collect.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:'Result$collect'}},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$collect',$an:function(){return[doc("The transformation applied to the elements.")];}}],$cont:Sequence,$tp:{Result$collect:{}},$an:function(){return[doc(String$("A nonempty sequence containing the results of applying \nthe given mapping to the elements of this sequence.",107)),shared(),$default(),actual()];},d:['ceylon.language','Sequence','$m','collect']};};
            $$sequence.clone=function (){
                var $$sequence=this;
                return $$sequence;
            };
            $$sequence.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:'Element$Sequence'}},$ps:[],$cont:Sequence,$an:function(){return[doc(String$("This nonempty sequence.",23)),shared(),actual(),$default()];},d:['ceylon.language','Sequence','$m','clone']};};
            defineAttr($$sequence,'string',function(){
                var $$sequence=this;
                return attrGetter($$sequence.getT$all()['ceylon.language::Sequential'],'string').call(this);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Sequence,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Sequence','$at','string']};});
            $$sequence.shorterThan=function (length$218){
                var $$sequence=this;
                return $$sequence.getT$all()['ceylon.language::List'].$$.prototype.shorterThan.call(this,length$218);
            };
            $$sequence.shorterThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Sequence,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Sequence','$m','shorterThan']};};
            $$sequence.longerThan=function (length$219){
                var $$sequence=this;
                return $$sequence.getT$all()['ceylon.language::List'].$$.prototype.longerThan.call(this,length$219);
            };
            $$sequence.longerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Sequence,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Sequence','$m','longerThan']};};
            $$sequence.findLast=function (selecting$220){
                var $$sequence=this;
                return $$sequence.getT$all()['ceylon.language::List'].$$.prototype.findLast.call(this,$JsCallable(selecting$220,[{$nm:'elem',$mt:'prm',$t:'Element$Sequence',$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[$$sequence.$$targs$$.Element$Sequence]}}));
            };
            $$sequence.findLast.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Sequence']},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Sequence,$an:function(){return[shared(),$default(),actual()];},d:['ceylon.language','Sequence','$m','findLast']};};
            $$sequence.repeat=function (times$221){
                var $$sequence=this;
                return $$sequence.getT$all()['ceylon.language::Sequential'].$$.prototype.repeat.call(this,times$221);
            };
            $$sequence.repeat.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Sequence'}},$ps:[{$nm:'times',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Sequence,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Sequence','$m','repeat']};};
            $$sequence.following=function (head$222,$$$mptypes){
                var $$sequence=this;
                return Tuple(head$222,$$sequence.sequence,{Rest$Tuple:{t:Sequence,a:{Element$Sequence:$$sequence.$$targs$$.Element$Sequence}},First$Tuple:$$$mptypes.Other$following,Element$Tuple:{t:'u', l:[$$$mptypes.Other$following,$$sequence.$$targs$$.Element$Sequence]}});
            };
            $$sequence.following.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Other$following'},{$t:'Element$Sequence',seq:1}]},$ps:[{$nm:'head',$mt:'prm',$t:'Other$following',$an:function(){return[];}}],$cont:Sequence,$tp:{Other$following:{}},$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Sequence','$m','following']};};
        })(Sequence.$$.prototype);
    }
    return Sequence;
}
exports.$init$Sequence=$init$Sequence;
$init$Sequence();
function Empty($$empty){
    Sequential({Element$Sequential:{t:Nothing}},$$empty);
    Ranged({Span$Ranged:{t:Empty},Index$Ranged:{t:Integer}},$$empty);
    add_type_arg($$empty,'Span$Ranged',{t:Empty});
    add_type_arg($$empty,'Index$Ranged',{t:Integer});
    $$empty.$prop$getEmpty={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Empty,$an:function(){return[doc(String$("Returns `true`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','empty']};}};
    $$empty.$prop$getEmpty.get=function(){return empty};
    $$empty.$prop$getSize={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Empty,$an:function(){return[doc(String$("Returns 0.",10)),shared(),actual()];},d:['ceylon.language','Empty','$at','size']};}};
    $$empty.$prop$getSize.get=function(){return size};
    $$empty.$prop$getReversed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','reversed']};}};
    $$empty.$prop$getReversed.get=function(){return reversed};
    $$empty.$prop$getSequence={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','sequence']};}};
    $$empty.$prop$getSequence.get=function(){return sequence};
    $$empty.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Empty,$an:function(){return[doc(String$("Returns a string description of the empty sequence: \n`[]`.",58)),shared(),actual()];},d:['ceylon.language','Empty','$at','string']};}};
    $$empty.$prop$getString.get=function(){return string};
    $$empty.$prop$getLastIndex={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Null},$cont:Empty,$an:function(){return[doc(String$("Returns `null`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','lastIndex']};}};
    $$empty.$prop$getLastIndex.get=function(){return lastIndex};
    $$empty.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Null},$cont:Empty,$an:function(){return[doc(String$("Returns `null`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','first']};}};
    $$empty.$prop$getFirst.get=function(){return first};
    $$empty.$prop$getLast={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Null},$cont:Empty,$an:function(){return[doc(String$("Returns `null`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','last']};}};
    $$empty.$prop$getLast.get=function(){return last};
    $$empty.$prop$getRest={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','rest']};}};
    $$empty.$prop$getRest.get=function(){return rest};
    $$empty.$prop$getCoalesced={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','coalesced']};}};
    $$empty.$prop$getCoalesced.get=function(){return coalesced};
    $$empty.$prop$getIndexed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','indexed']};}};
    $$empty.$prop$getIndexed.get=function(){return indexed};
}
Empty.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:Sequential,a:{Element$Sequential:{t:Nothing}}},{t:Ranged,a:{Span$Ranged:{t:Empty},Index$Ranged:{t:Integer}}}],of:[{t:empty$223}],$an:function(){return[doc(String$("A sequence with no elements. The type `Empty` may be\nabbreviated `[]`, and an instance is produced by the \nexpression `[]`. That is, in the following expression,\n`none` has type `[]` and refers to the value `[]`:\n\n    [] none = [];\n\n(Whether the syntax `[]` refers to the type or the value \ndepends upon how it occurs grammatically.)",333)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Sequence)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','Empty']};};
exports.Empty=Empty;
function $init$Empty(){
    if(Empty.$$===undefined){
        initTypeProtoI(Empty,'ceylon.language::Empty',$init$Sequential(),$init$Ranged());
        (function($$empty){
            $$empty.iterator=function (){
                var $$empty=this;
                return getEmptyIterator();
            };
            $$empty.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:Nothing}}},$ps:[],$cont:Empty,$an:function(){return[doc(String$("Returns an iterator that is already exhausted.",46)),shared(),actual()];},d:['ceylon.language','Empty','$m','iterator']};};
            $$empty.$get=function (index$224){
                var $$empty=this;
                return null;
            };
            $$empty.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Null},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[doc(String$("Returns `null` for any given index.",35)),shared(),actual()];},d:['ceylon.language','Empty','$m','get']};};
            $$empty.segment=function (from$225,length$226){
                var $$empty=this;
                return $$empty;
            };
            $$empty.segment.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty` for any given segment.",41)),shared(),actual()];},d:['ceylon.language','Empty','$m','segment']};};
            $$empty.span=function (from$227,to$228){
                var $$empty=this;
                return $$empty;
            };
            $$empty.span.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'to',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty` for any given span.",38)),shared(),actual()];},d:['ceylon.language','Empty','$m','span']};};
            $$empty.spanTo=function (to$229){
                var $$empty=this;
                return $$empty;
            };
            $$empty.spanTo.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'to',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty` for any given span.",38)),shared(),actual()];},d:['ceylon.language','Empty','$m','spanTo']};};
            $$empty.spanFrom=function (from$230){
                var $$empty=this;
                return $$empty;
            };
            $$empty.spanFrom.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty` for any given span.",38)),shared(),actual()];},d:['ceylon.language','Empty','$m','spanFrom']};};
            defineAttr($$empty,'empty',function(){
                var $$empty=this;
                return true;
            },undefined,function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Empty,$an:function(){return[doc(String$("Returns `true`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','empty']};});
            defineAttr($$empty,'size',function(){
                var $$empty=this;
                return (0);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Empty,$an:function(){return[doc(String$("Returns 0.",10)),shared(),actual()];},d:['ceylon.language','Empty','$at','size']};});
            defineAttr($$empty,'reversed',function(){
                var $$empty=this;
                return $$empty;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','reversed']};});
            defineAttr($$empty,'sequence',function(){
                var $$empty=this;
                return $$empty;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','sequence']};});
            defineAttr($$empty,'string',function(){
                var $$empty=this;
                return String$("[]",2);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Empty,$an:function(){return[doc(String$("Returns a string description of the empty sequence: \n`[]`.",58)),shared(),actual()];},d:['ceylon.language','Empty','$at','string']};});
            defineAttr($$empty,'lastIndex',function(){
                var $$empty=this;
                return null;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Null},$cont:Empty,$an:function(){return[doc(String$("Returns `null`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','lastIndex']};});
            defineAttr($$empty,'first',function(){
                var $$empty=this;
                return null;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Null},$cont:Empty,$an:function(){return[doc(String$("Returns `null`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','first']};});
            defineAttr($$empty,'last',function(){
                var $$empty=this;
                return null;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Null},$cont:Empty,$an:function(){return[doc(String$("Returns `null`.",15)),shared(),actual()];},d:['ceylon.language','Empty','$at','last']};});
            defineAttr($$empty,'rest',function(){
                var $$empty=this;
                return $$empty;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','rest']};});
            $$empty.clone=function (){
                var $$empty=this;
                return $$empty;
            };
            $$empty.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[],$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$m','clone']};};
            defineAttr($$empty,'coalesced',function(){
                var $$empty=this;
                return $$empty;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','coalesced']};});
            defineAttr($$empty,'indexed',function(){
                var $$empty=this;
                return $$empty;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Empty,$an:function(){return[doc(String$("Returns an `Empty`.",19)),shared(),actual()];},d:['ceylon.language','Empty','$at','indexed']};});
            $$empty.chain=function (other$231,$$$mptypes){
                var $$empty=this;
                return other$231;
            };
            $$empty.chain.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Other$chain',Absent$Iterable:'OtherAbsent$chain'}},$ps:[{$nm:'other',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Other$chain',Absent$Iterable:'OtherAbsent$chain'}},$an:function(){return[];}}],$cont:Empty,$tp:{Other$chain:{},OtherAbsent$chain:{'satisfies':[{t:Null}]}},$an:function(){return[doc(String$("Returns `other`.",16)),shared(),actual()];},d:['ceylon.language','Empty','$m','chain']};};
            $$empty.contains=function (element$232){
                var $$empty=this;
                return false;
            };
            $$empty.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Empty,$an:function(){return[doc(String$("Returns `false` for any given element.",38)),shared(),actual()];},d:['ceylon.language','Empty','$m','contains']};};
            $$empty.count=function (selecting$233){
                var $$empty=this;
                return (0);
            };
            $$empty.count.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Empty,$an:function(){return[doc(String$("Returns 0 for any given predicate.",34)),shared(),actual()];},d:['ceylon.language','Empty','$m','count']};};
            $$empty.defines=function (index$234){
                var $$empty=this;
                return false;
            };
            $$empty.defines.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','defines']};};
            $$empty.$map=function (collecting$235,$$$mptypes){
                var $$empty=this;
                return $$empty;
            };
            $$empty.$map.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$map',$an:function(){return[];}}],$cont:Empty,$tp:{Result$map:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','map']};};
            $$empty.$filter=function (selecting$236){
                var $$empty=this;
                return $$empty;
            };
            $$empty.$filter.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','filter']};};
            $$empty.fold=function (initial$237,accumulating$238,$$$mptypes){
                var $$empty=this;
                return initial$237;
            };
            $$empty.fold.$crtmm$=function(){return{mod:$CCMM$,$t:'Result$fold',$ps:[{$nm:'initial',$mt:'prm',$t:'Result$fold',$an:function(){return[];}},{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$fold',$an:function(){return[];}}],$cont:Empty,$tp:{Result$fold:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','fold']};};
            $$empty.$reduce=function (accumulating$239,$$$mptypes){
                var $$empty=this;
                return null;
            };
            $$empty.$reduce.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Null},$ps:[{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$reduce',$an:function(){return[];}}],$cont:Empty,$tp:{Result$reduce:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','reduce']};};
            $$empty.find=function (selecting$240){
                var $$empty=this;
                return null;
            };
            $$empty.find.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Null},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','find']};};
            $$empty.$sort=function (comparing$241){
                var $$empty=this;
                return $$empty;
            };
            $$empty.$sort.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'comparing',$mt:'prm',$pt:'f',$t:{t:Comparison},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','sort']};};
            $$empty.collect=function (collecting$242,$$$mptypes){
                var $$empty=this;
                return $$empty;
            };
            $$empty.collect.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$collect',$an:function(){return[];}}],$cont:Empty,$tp:{Result$collect:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','collect']};};
            $$empty.select=function (selecting$243){
                var $$empty=this;
                return $$empty;
            };
            $$empty.select.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','select']};};
            $$empty.any=function (selecting$244){
                var $$empty=this;
                return false;
            };
            $$empty.any.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','any']};};
            $$empty.$every=function (selecting$245){
                var $$empty=this;
                return false;
            };
            $$empty.$every.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','every']};};
            $$empty.skipping=function (skip$246){
                var $$empty=this;
                return $$empty;
            };
            $$empty.skipping.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'skip',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','skipping']};};
            $$empty.taking=function (take$247){
                var $$empty=this;
                return $$empty;
            };
            $$empty.taking.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'take',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','taking']};};
            $$empty.by=function (step$248){
                var $$empty=this;
                return $$empty;
            };
            $$empty.by.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'step',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Empty,$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','by']};};
            $$empty.withLeading=function (element$249,$$$mptypes){
                var $$empty=this;
                return Tuple(element$249,getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:$$$mptypes.Element$withLeading,Element$Tuple:$$$mptypes.Element$withLeading});
            };
            $$empty.withLeading.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Element$withLeading'}]},$ps:[{$nm:'element',$mt:'prm',$t:'Element$withLeading',$an:function(){return[];}}],$cont:Empty,$tp:{Element$withLeading:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','withLeading']};};
            $$empty.withTrailing=function (element$250,$$$mptypes){
                var $$empty=this;
                return Tuple(element$250,getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:$$$mptypes.Element$withTrailing,Element$Tuple:$$$mptypes.Element$withTrailing});
            };
            $$empty.withTrailing.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Element$withTrailing'}]},$ps:[{$nm:'element',$mt:'prm',$t:'Element$withTrailing',$an:function(){return[];}}],$cont:Empty,$tp:{Element$withTrailing:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','withTrailing']};};
            $$empty.following=function (head$251,$$$mptypes){
                var $$empty=this;
                return Tuple(head$251,getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:$$$mptypes.Other$following,Element$Tuple:$$$mptypes.Other$following});
            };
            $$empty.following.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Other$following'}]},$ps:[{$nm:'head',$mt:'prm',$t:'Other$following',$an:function(){return[];}}],$cont:Empty,$tp:{Other$following:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Empty','$m','following']};};
        })(Empty.$$.prototype);
    }
    return Empty;
}
exports.$init$Empty=$init$Empty;
$init$Empty();
function empty$223(){
    var $$empty=new empty$223.$$;
    $Object($$empty);
    Empty($$empty);
    return $$empty;
};empty$223.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},satisfies:[{t:Empty}],$an:function(){return[doc("A sequence with no elements, abbreviated `[]`. The unique \ninstance of the type `[]`."),shared()];},d:['ceylon.language','empty']};};
function $init$empty$223(){
    if(empty$223.$$===undefined){
        initTypeProto(empty$223,'ceylon.language::empty',$init$$Object(),$init$Empty());
    }
    return empty$223;
}
exports.$init$empty$223=$init$empty$223;
$init$empty$223();
var empty$252;
function getEmpty(){
    if(empty$252===undefined){empty$252=$init$empty$223()();empty$252.$crtmm$=getEmpty.$crtmm$;}
    return empty$252;
}
exports.getEmpty=getEmpty;
getEmpty.$crtmm$=function(){return{mod:$CCMM$,$t:{t:empty$223},$an:function(){return[doc(String$("A sequence with no elements, abbreviated `[]`. The unique \ninstance of the type `[]`.",85)),shared()];},d:['ceylon.language','empty']};};
$prop$getEmpty={get:getEmpty,$crtmm$:getEmpty.$crtmm$};
exports.$prop$getEmpty=$prop$getEmpty;
function emptyIterator$253($$targs$$){
    var $$emptyIterator=new emptyIterator$253.$$;
    $$emptyIterator.$$targs$$=$$targs$$;
    Iterator({Element$Iterator:{t:Nothing}},$$emptyIterator);
    return $$emptyIterator;
};emptyIterator$253.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:{t:Nothing}}}],$an:function(){return[doc("An iterator that returns no elements."),shared()];},d:['ceylon.language','emptyIterator']};};
function $init$emptyIterator$253(){
    if(emptyIterator$253.$$===undefined){
        initTypeProto(emptyIterator$253,'ceylon.language::emptyIterator',Basic,$init$Iterator());
        (function($$emptyIterator){
            $$emptyIterator.next=function (){
                var $$emptyIterator=this;
                return getFinished();
            };
        })(emptyIterator$253.$$.prototype);
    }
    return emptyIterator$253;
}
exports.$init$emptyIterator$253=$init$emptyIterator$253;
$init$emptyIterator$253();
var emptyIterator$254;
function getEmptyIterator(){
    if(emptyIterator$254===undefined){emptyIterator$254=$init$emptyIterator$253()({Element$Iterator:{t:Nothing}});emptyIterator$254.$crtmm$=getEmptyIterator.$crtmm$;}
    return emptyIterator$254;
}
exports.getEmptyIterator=getEmptyIterator;
getEmptyIterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:emptyIterator$253},$an:function(){return[doc(String$("An iterator that returns no elements.",37)),shared()];},d:['ceylon.language','emptyIterator']};};
$prop$getEmptyIterator={get:getEmptyIterator,$crtmm$:getEmptyIterator.$crtmm$};
exports.$prop$getEmptyIterator=$prop$getEmptyIterator;
function Keys(correspondence$255,$$targs$$,$$keys){
    $init$Keys();
    if($$keys===undefined)$$keys=new Keys.$$;
    set_type_args($$keys,$$targs$$);
    $$keys.correspondence$255_=correspondence$255;
    Category({Element$Category:{t:$Object}},$$keys);
    add_type_arg($$keys,'Element$Category',{t:$Object});
    return $$keys;
}
Keys.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'correspondence',$mt:'prm',$t:{t:Correspondence,a:{Item$Correspondence:'Item$Keys',Key$Correspondence:'Key$Keys'}},$an:function(){return[];}}],$tp:{Key$Keys:{'var':'in','satisfies':[{t:$Object}]},Item$Keys:{'var':'out'}},satisfies:[{t:Category,a:{Element$Category:{t:$Object}}}],d:['ceylon.language','Keys']};};
function $init$Keys(){
    if(Keys.$$===undefined){
        initTypeProto(Keys,'ceylon.language::Keys',Basic,$init$Category());
        (function($$keys){
            $$keys.contains=function contains(key$256){
                var $$keys=this;
                var key$257;
                if(isOfType((key$257=key$256),$$keys.$$targs$$.Key$Keys)){
                    return $$keys.correspondence$255.defines(key$257);
                }else {
                    return false;
                }
            };$$keys.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'key',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Keys,$an:function(){return[shared(),actual()];},d:['ceylon.language','Keys','$m','contains']};};
            defineAttr($$keys,'correspondence$255',function(){return this.correspondence$255_;},undefined,function(){return{mod:$CCMM$,$t:{t:Correspondence,a:{Item$Correspondence:'Item$Keys',Key$Correspondence:'Key$Keys'}},$cont:Keys,d:['ceylon.language','Keys','$at','correspondence']};});
        })(Keys.$$.prototype);
    }
    return Keys;
}
exports.$init$Keys=$init$Keys;
$init$Keys();
function Correspondence($$targs$$,$$correspondence){
    set_type_args($$correspondence,$$targs$$);
    $$correspondence.$prop$getKeys={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Category,a:{Element$Category:{t:$Object}}},$cont:Correspondence,$an:function(){return[doc(String$("The `Category` of all keys for which a value is \ndefined by this `Correspondence`.",82)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.defines)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Correspondence','$at','keys']};}};
    $$correspondence.$prop$getKeys.get=function(){return keys};
}
Correspondence.$crtmm$=function(){return{mod:$CCMM$,$tp:{Key$Correspondence:{'var':'in','satisfies':[{t:$Object}]},Item$Correspondence:{'var':'out'}},$an:function(){return[doc(String$("Abstract supertype of objects which associate values with \nkeys.\n\n`Correspondence` does not satisfy [[Category]], since in \nsome cases&mdash;`List`, for example&mdash;it is convenient \nto consider the subtype a `Category` of its values, and in \nother cases&mdash;`Map`, for example&mdash;it is convenient \nto treat the subtype as a `Category` of its \n[[entries|Entry]].\n\nThe item corresponding to a given key may be obtained from \na `Correspondence` using the item operator:\n\n    value bg = settings[\"backgroundColor\"] else white;\n\nThe `get()` operation and item operator result in an\noptional type, to reflect the possibility that there may be\nno item for the given key.",671)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Map),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),List),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Category)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Correspondence']};};
exports.Correspondence=Correspondence;
function $init$Correspondence(){
    if(Correspondence.$$===undefined){
        initTypeProtoI(Correspondence,'ceylon.language::Correspondence');
        (function($$correspondence){
            $$correspondence.$get={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Item$Correspondence']},$ps:[{$nm:'key',$mt:'prm',$t:'Key$Correspondence',$an:function(){return[];}}],$cont:Correspondence,$an:function(){return[doc("Returns the value defined for the given key, or \n`null` if there is no value defined for the given \nkey."),see("Correspondence.items"),shared(),formal()];},d:['ceylon.language','Correspondence','$m','get']};}};$$correspondence.defines=function (key$258){
                var $$correspondence=this;
                return exists($$correspondence.$get(key$258));
            };
            $$correspondence.defines.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'key',$mt:'prm',$t:'Key$Correspondence',$an:function(){return[];}}],$cont:Correspondence,$an:function(){return[doc(String$("Determines if there is a value defined for the \ngiven key.",58)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.definesAny),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.definesEvery),$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.$prop$getKeys)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:FunctionDeclaration$meta$declaration},{t:ValueDeclaration$meta$declaration}]}})),shared(),$default()];},d:['ceylon.language','Correspondence','$m','defines']};};
            defineAttr($$correspondence,'keys',function(){
                var $$correspondence=this;
                return Keys($$correspondence,{Key$Keys:$$correspondence.$$targs$$.Key$Correspondence,Item$Keys:$$correspondence.$$targs$$.Item$Correspondence});
            },undefined,function(){return{mod:$CCMM$,$t:{t:Category,a:{Element$Category:{t:$Object}}},$cont:Correspondence,$an:function(){return[doc(String$("The `Category` of all keys for which a value is \ndefined by this `Correspondence`.",82)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.defines)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Correspondence','$at','keys']};});
            $$correspondence.definesEvery=function definesEvery(keys$259){
                var $$correspondence=this;
                var it$260 = keys$259.iterator();
                var key$261;while((key$261=it$260.next())!==getFinished()){
                    if((!$$correspondence.defines(key$261))){
                        return false;
                    }
                }
                if(getFinished() === key$261){
                    return true;
                }
            };$$correspondence.definesEvery.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'keys',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Key$Correspondence',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$cont:Correspondence,$an:function(){return[doc(String$("Determines if this `Correspondence` defines a value\nfor every one of the given keys.",84)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.defines)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Correspondence','$m','definesEvery']};};
            $$correspondence.definesAny=function definesAny(keys$262){
                var $$correspondence=this;
                var it$263 = keys$262.iterator();
                var key$264;while((key$264=it$263.next())!==getFinished()){
                    if($$correspondence.defines(key$264)){
                        return true;
                    }
                }
                if(getFinished() === key$264){
                    return false;
                }
            };$$correspondence.definesAny.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'keys',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Key$Correspondence',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$cont:Correspondence,$an:function(){return[doc(String$("Determines if this `Correspondence` defines a value\nfor any one of the given keys.",82)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.defines)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Correspondence','$m','definesAny']};};
            $$correspondence.items=function (keys$265){
                var $$correspondence=this;
                return Comprehension(function(){
                    var it$266=keys$265.iterator();
                    var key$267=getFinished();
                    var next$key$267=function(){return key$267=it$266.next();}
                    next$key$267();
                    return function(){
                        if(key$267!==getFinished()){
                            var key$267$268=key$267;
                            var tmpvar$269=$$correspondence.$get(key$267$268);
                            next$key$267();
                            return tmpvar$269;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:Null},$$correspondence.$$targs$$.Item$Correspondence]}}).sequence;
            };
            $$correspondence.items.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:'u', l:[{t:Null},'Item$Correspondence']}}},$ps:[{$nm:'keys',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Key$Correspondence',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$cont:Correspondence,$an:function(){return[doc(String$("Returns the items defined for the given keys, in\nthe same order as the corresponding keys.",90)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Correspondence().$$.prototype.$get)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Correspondence','$m','items']};};
        })(Correspondence.$$.prototype);
    }
    return Correspondence;
}
exports.$init$Correspondence=$init$Correspondence;
$init$Correspondence();
function Finished($$finished){
    $init$Finished();
    if($$finished===undefined)throwexc(InvocationException$meta$model(String$("Cannot instantiate abstract class")),'?','?')
    return $$finished;
}
Finished.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],of:[{t:finished$270}],$an:function(){return[doc(String$("The type of the value that indicates that an [[Iterator]] \nis exhausted and has no more values to return.",105)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Iterator)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared(),abstract()];},d:['ceylon.language','Finished']};};
exports.Finished=Finished;
function $init$Finished(){
    if(Finished.$$===undefined){
        initTypeProto(Finished,'ceylon.language::Finished',Basic);
    }
    return Finished;
}
exports.$init$Finished=$init$Finished;
$init$Finished();
function finished$270(){
    var $$finished=new finished$270.$$;
    Finished($$finished);
    $$finished.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:finished$270,$an:function(){return[shared(),actual()];},d:['ceylon.language','finished','$at','string']};}};
    $$finished.$prop$getString.get=function(){return string};
    return $$finished;
};finished$270.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Finished},$an:function(){return[doc("A value that indicates that an [[Iterator]] is exhausted \nand has no more values to return."),see("Iterator"),shared()];},d:['ceylon.language','finished']};};
function $init$finished$270(){
    if(finished$270.$$===undefined){
        initTypeProto(finished$270,'ceylon.language::finished',$init$Finished());
        (function($$finished){
            defineAttr($$finished,'string',function(){
                var $$finished=this;
                return String$("finished",8);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:finished$270,$an:function(){return[shared(),actual()];},d:['ceylon.language','finished','$at','string']};});
        })(finished$270.$$.prototype);
    }
    return finished$270;
}
exports.$init$finished$270=$init$finished$270;
$init$finished$270();
var finished$271;
function getFinished(){
    if(finished$271===undefined){finished$271=$init$finished$270()();finished$271.$crtmm$=getFinished.$crtmm$;}
    return finished$271;
}
exports.getFinished=getFinished;
getFinished.$crtmm$=function(){return{mod:$CCMM$,$t:{t:finished$270},$an:function(){return[doc(String$("A value that indicates that an [[Iterator]] is exhausted \nand has no more values to return.",91)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Iterator)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','finished']};};
$prop$getFinished={get:getFinished,$crtmm$:getFinished.$crtmm$};
exports.$prop$getFinished=$prop$getFinished;
function Binary($$targs$$,$$binary){
    set_type_args($$binary,$$targs$$);
    $$binary.set$defs$bit=function(index$272,bit$273){return true;};
}
Binary.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Binary:{'satisfies':[{t:Binary,a:{Other$Binary:'Other$Binary'}}]}},of:['Other$Binary'],$an:function(){return[doc(String$("Abstraction of numeric types like [[Integer]] that may be \nrepresented as a sequence of bits, and may be the subject\nof bitwise operations. A bit is a [[Boolean]] value.",169)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Integer)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ClassDeclaration$meta$declaration}})),by([String$("Stef",4)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Binary']};};
exports.Binary=Binary;
function $init$Binary(){
    if(Binary.$$===undefined){
        initTypeProtoI(Binary,'ceylon.language::Binary');
        (function($$binary){
            $$binary.$prop$getNot={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$cont:Binary,$an:function(){return[doc(String$("The binary complement of this sequence of bits.",47)),shared(),formal()];},d:['ceylon.language','Binary','$at','not']};}};
            $$binary.$prop$getSize={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Binary,$an:function(){return[doc(String$("The number of bits that this sequence of bits can hold.",55)),shared(),formal()];},d:['ceylon.language','Binary','$at','size']};}};
            $$binary.leftLogicalShift={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'shift',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Performs a left logical shift. Sign is not preserved. \nPadded with zeros."),shared(),formal()];},d:['ceylon.language','Binary','$m','leftLogicalShift']};}};$$binary.rightLogicalShift={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'shift',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Performs a right logical shift. Sign is not preserved. \nPadded with zeros."),shared(),formal()];},d:['ceylon.language','Binary','$m','rightLogicalShift']};}};$$binary.rightArithmeticShift={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'shift',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Performs a right arithmetic shift. Sign is preserved. \nPadded with zeros."),shared(),formal()];},d:['ceylon.language','Binary','$m','rightArithmeticShift']};}};$$binary.and={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Binary',$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Performs a logical AND operation."),shared(),formal()];},d:['ceylon.language','Binary','$m','and']};}};$$binary.or={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Binary',$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Performs a logical inclusive OR operation."),shared(),formal()];},d:['ceylon.language','Binary','$m','or']};}};$$binary.xor={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Binary',$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Performs a logical exclusive OR operation."),shared(),formal()];},d:['ceylon.language','Binary','$m','xor']};}};$$binary.$get={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Retrieves a given bit from this bit sequence. Bits are \nindexed from right to left."),shared(),formal()];},d:['ceylon.language','Binary','$m','get']};}};$$binary.set={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'bit',$mt:'prm',$def:1,$t:{t:$Boolean},$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Returns a new number with the given bit set to the given \nvalue. Bits are indexed from right to left."),shared(),formal()];},d:['ceylon.language','Binary','$m','set']};}};$$binary.clear=function (index$274){
                var $$binary=this;
                return $$binary.set(index$274,false);
            };
            $$binary.clear.$crtmm$=function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc(String$("Returns a new number with the given bit set to 0.\nBits are indexed from right to left.",86)),shared(),$default()];},d:['ceylon.language','Binary','$m','clear']};};
            $$binary.flip={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Binary',$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Binary,$an:function(){return[doc("Returns a new number with the given bit flipped to its \nopposite value. Bits are indexed from right to left."),shared(),formal()];},d:['ceylon.language','Binary','$m','flip']};}};
        })(Binary.$$.prototype);
    }
    return Binary;
}
exports.$init$Binary=$init$Binary;
$init$Binary();
function Destroyable($$destroyable){
}
Destroyable.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("Abstract supertype of classes which are instantiated \nas resources in a `try` statement and [[destroyed|destroy]]\nwhether or not an exception propagates out of the `try` block.\nUnlike [[Obtainable]] a single `Destroyable` instance cannot be \nreused between `try` statements: Its scope is the `try` block.\n",305)),shared()];},d:['ceylon.language','Destroyable']};};
exports.Destroyable=Destroyable;
function $init$Destroyable(){
    if(Destroyable.$$===undefined){
        initTypeProtoI(Destroyable,'ceylon.language::Destroyable');
        (function($$destroyable){
            $$destroyable.destroy={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'error',$mt:'prm',$t:{t:'u', l:[{t:Null},{t:Throwable}]},$an:function(){return[doc("The error propagating out of the `try` block, or null")];}}],$cont:Destroyable,$an:function(){return[doc("Called after completion of a `try` block."),shared(),formal()];},d:['ceylon.language','Destroyable','$m','destroy']};}};
        })(Destroyable.$$.prototype);
    }
    return Destroyable;
}
exports.$init$Destroyable=$init$Destroyable;
$init$Destroyable();
function Obtainable($$obtainable){
}
Obtainable.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("Abstract supertype of instances which are used as resources\nin a `try` statement and [[released|release]]\nwhether or not an exception propagates out of the `try` block.\nUnlike [[Destroyable]] a single `Obtainable` instance can be \nreused between `try` statements.\n\nAlthough it is possible to use `Obtainable` instances outside of a `try` \nstatement this is not recommended.\n\nClasses which satisfy `Obtainable` may impose specific constraints on \nthe ordering and nesting of invocations of `obtain()` and `release()`. \nFor example it may be not be allowed to invoke `obtain()` on a \nresource that has already been `obtain()`ed. \nThose methods should throw an [[AssertionError]] when such \nconstraints are broken.\n",712)),shared()];},d:['ceylon.language','Obtainable']};};
exports.Obtainable=Obtainable;
function $init$Obtainable(){
    if(Obtainable.$$===undefined){
        initTypeProtoI(Obtainable,'ceylon.language::Obtainable');
        (function($$obtainable){
            $$obtainable.obtain={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[],$cont:Obtainable,$an:function(){return[doc("Prepares the instance for use.\nIf an exception propagates from `obtain()` then `release()` \nwill not be called."),$throws("AssertionError","If an illegal state is detected"),shared(),formal()];},d:['ceylon.language','Obtainable','$m','obtain']};}};$$obtainable.release={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'error',$mt:'prm',$t:{t:'u', l:[{t:Null},{t:Throwable}]},$an:function(){return[doc("The error propagating out of the `try` block, or null")];}}],$cont:Obtainable,$an:function(){return[doc("Releases the instance after use."),$throws("AssertionError","If an illegal state is detected"),shared(),formal()];},d:['ceylon.language','Obtainable','$m','release']};}};
        })(Obtainable.$$.prototype);
    }
    return Obtainable;
}
exports.$init$Obtainable=$init$Obtainable;
$init$Obtainable();
function Ranged($$targs$$,$$ranged){
    set_type_args($$ranged,$$targs$$);
}
Ranged.$crtmm$=function(){return{mod:$CCMM$,$tp:{Index$Ranged:{'var':'in'},Span$Ranged:{'var':'out'}},of:['Span$Ranged'],$an:function(){return[doc(String$("Abstract supertype of ranged objects which map a range of \n[[Comparable]] keys to ranges of values. The type parameter \n[[Span]] abstracts the type of the resulting range. A \nsubrange may be obtained from an instance of `Ranged` using\nthe _span_ and _segment_ operators.\n\nThe _span_ operator accepts the first and last indices of \nthe subrange.\n\n    print(\"hello world\"[0..5]); //prints \"hello\"\n    print(\"hello world\"[6..6]); //prints \"w\"\n\nIf the last index is smaller than the first index, the\nsubrange is reversed.\n\n    print(\"hello world\"[5..0]); //prints \"olleh\"\n\nIf the range of indices identified by the first and last\nindices is outside the range of indices of this object, an\nempty subrange is produced.\n\n    print(\"hello world\"[-5..-1]); //prints \"\"\n    print(\"hello world\"[11..11]); //prints \"\"\n\nThe first index may be ommitted, implying that the subrange\nextends forward from the smallest possible index (in this\ncase `runtime.minIntegerValue-1`) to the given index.\n\n    print(\"hello world\"[...5]) //prints \"hello\"\n\nIf the first index is before the first index of this object, \nan empty subrange is produced. (A reversed subrange is \nnever produced.)\n\n    print(\"hello world\"[-5...]); //prints \"\"\n\nThe last index may be ommitted, implying that the subrange \nextends forward from the given index to the largest \npossible index (in this case `runtime.maxIntegerValue+1`).\n\n    print(\"hello world\"[6...]) //prints \"world\"\n\nIf the last index is after the last index of this object, \nan empty subrange is produced. (A reversed subrange is \nnever produced.)\n\n    print(\"hello world\"[11...]); //prints \"\"\n\nThe _segment_ operator accepts the first index and maximum \nlength of the subrange.\n\n    print(\"hello world\"[6:5]) //prints \"world\"\n    print(\"hello world\"[6:0]) //prints \"\"\n\nIf the length is nonpositive, the subrange is empty. If the\nrange of indices identified by the first index and length\nis outside the range of indices of this object, an empty\nsubrange is produced. (A reversed subrange is never \nproduced.)\n\n    print(\"hello world\"[-3:3]) //prints \"\"\n    print(\"hello world\"[11:3]) //prints \"\"\n    print(\"hello world\"[6:-3]) //prints \"\"",2155)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),List),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Sequence),$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),String)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:InterfaceDeclaration$meta$declaration},{t:ClassDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','Ranged']};};
exports.Ranged=Ranged;
function $init$Ranged(){
    if(Ranged.$$===undefined){
        initTypeProtoI(Ranged,'ceylon.language::Ranged');
        (function($$ranged){
            $$ranged.span={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Span$Ranged',$ps:[{$nm:'from',$mt:'prm',$t:'Index$Ranged',$an:function(){return[];}},{$nm:'to',$mt:'prm',$t:'Index$Ranged',$an:function(){return[];}}],$cont:Ranged,$an:function(){return[doc("Obtain a span containing the mapped values between \nthe two given indices."),shared(),formal()];},d:['ceylon.language','Ranged','$m','span']};}};$$ranged.spanFrom={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Span$Ranged',$ps:[{$nm:'from',$mt:'prm',$t:'Index$Ranged',$an:function(){return[];}}],$cont:Ranged,$an:function(){return[doc("Obtain a span containing the mapped values between\nthe starting index and the end of the receiver."),shared(),formal()];},d:['ceylon.language','Ranged','$m','spanFrom']};}};$$ranged.spanTo={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Span$Ranged',$ps:[{$nm:'to',$mt:'prm',$t:'Index$Ranged',$an:function(){return[];}}],$cont:Ranged,$an:function(){return[doc("Obtain a span containing the mapped values between\nthe start of the receiver and the end index."),shared(),formal()];},d:['ceylon.language','Ranged','$m','spanTo']};}};$$ranged.segment={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Span$Ranged',$ps:[{$nm:'from',$mt:'prm',$t:'Index$Ranged',$an:function(){return[];}},{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Ranged,$an:function(){return[doc("Obtain a segment containing the mapped values\nstarting from the given index, with the given \nlength."),shared(),formal()];},d:['ceylon.language','Ranged','$m','segment']};}};
        })(Ranged.$$.prototype);
    }
    return Ranged;
}
exports.$init$Ranged=$init$Ranged;
$init$Ranged();
function Iterator($$targs$$,$$iterator){
    set_type_args($$iterator,$$targs$$);
}
Iterator.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$Iterator:{'var':'out'}},$an:function(){return[doc(String$("Produces elements of an [[Iterable]] object.",44)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Iterable)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Iterator']};};
exports.Iterator=Iterator;
function $init$Iterator(){
    if(Iterator.$$===undefined){
        initTypeProtoI(Iterator,'ceylon.language::Iterator');
        (function($$iterator){
            $$iterator.next={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Iterator',{t:Finished}]},$ps:[],$cont:Iterator,$an:function(){return[doc("The next element, or [[finished]] if there are no more \nelements to be iterated."),shared(),formal()];},d:['ceylon.language','Iterator','$m','next']};}};
        })(Iterator.$$.prototype);
    }
    return Iterator;
}
exports.$init$Iterator=$init$Iterator;
$init$Iterator();
function Collection($$targs$$,$$collection){
    Iterable({Element$Iterable:$$targs$$.Element$Collection,Absent$Iterable:{t:Null}},$$collection);
    add_type_arg($$collection,'Absent$Iterable',{t:Null});
    set_type_args($$collection,$$targs$$);
    $$collection.$prop$getEmpty={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Collection,$an:function(){return[doc(String$("Determine if the collection is empty, that is, if it \nhas no elements.",70)),shared(),actual(),$default()];},d:['ceylon.language','Collection','$at','empty']};}};
    $$collection.$prop$getEmpty.get=function(){return empty};
    $$collection.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Collection,$an:function(){return[doc(String$("A string of form `\"{ x, y, z }\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \ncollection, or the string `\"{}\"` if this collection \nis empty. If the collection iterator produces the value \n`null`, the string representation contains the string \n`\"<null>\"`.",340)),shared(),actual(),$default()];},d:['ceylon.language','Collection','$at','string']};}};
    $$collection.$prop$getString.get=function(){return string};
}
Collection.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$Collection:{'var':'out'}},satisfies:[{t:Iterable,a:{Element$Iterable:'Element$Collection',Absent$Iterable:{t:Null}}}],$an:function(){return[doc(String$("Represents an iterable collection of elements of finite \nsize. `Collection` is the abstract supertype of [[List]],\n[[Map]], and [[Set]].\n\nA `Collection` forms a [[Category]] of its elements, and \nis [[Iterable]]. The elements of a collection are not\nnecessarily distinct when compared using [[Object.equals]].\n\nA `Collection` may be [[cloned|clone]]. If a collection is\nimmutable, it is acceptable that `clone()` produce a\nreference to the collection itself. If a collection is\nmutable, `clone()` should produce a collection containing \nreferences to the same elements, with the same structure as \nthe original collection&mdash;that is, it should produce a \nshallow copy of the collection.",689)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),List),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Map),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Set)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','Collection']};};
exports.Collection=Collection;
function $init$Collection(){
    if(Collection.$$===undefined){
        initTypeProtoI(Collection,'ceylon.language::Collection',$init$Iterable());
        (function($$collection){
            $$collection.clone={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Collection,a:{Element$Collection:'Element$Collection'}},$ps:[],$cont:Collection,$an:function(){return[doc("A shallow copy of this collection, that is, a \ncollection with identical elements which does not\nchange if this collection changes. If this collection\nis immutable, it is acceptable to return a reference to\nthis collection. If this collection is mutable, a newly\ninstantiated collection must be returned."),shared(),formal()];},d:['ceylon.language','Collection','$m','clone']};}};defineAttr($$collection,'empty',function(){
                var $$collection=this;
                return ($$collection.size==(0));
            },undefined,function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Collection,$an:function(){return[doc(String$("Determine if the collection is empty, that is, if it \nhas no elements.",70)),shared(),actual(),$default()];},d:['ceylon.language','Collection','$at','empty']};});
            $$collection.contains=function contains(element$275){
                var $$collection=this;
                var it$276 = $$collection.iterator();
                var elem$277;while((elem$277=it$276.next())!==getFinished()){
                    var elem$278;
                    if((elem$278=elem$277)!==null&&elem$278.equals(element$275)){
                        return true;
                    }
                }
                if(getFinished() === elem$277){
                    return false;
                }
            };$$collection.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Collection,$an:function(){return[doc(String$("Return `true` if the given object is an element of\nthis collection. In this default implementation, and in \nmost refining implementations, return `false` \notherwise. An acceptable refining implementation may \nreturn `true` for objects which are not elements of the \ncollection, but this is not recommended. (For example, \nthe `contains()` method of `String` returns `true` for \nany substring of the string.)",407)),shared(),actual(),$default()];},d:['ceylon.language','Collection','$m','contains']};};
            defineAttr($$collection,'string',function(){
                var $$collection=this;
                return (opt$279=($$collection.empty?String$("{}",2):null),opt$279!==null&&opt$279!==undefined?opt$279:StringBuilder([String$("{ ",2),commaList($$collection).string,String$(" }",2)]).string);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Collection,$an:function(){return[doc(String$("A string of form `\"{ x, y, z }\"` where `x`, `y`, and \n`z` are the `string` representations of the elements of \nthis collection, as produced by the iterator of the \ncollection, or the string `\"{}\"` if this collection \nis empty. If the collection iterator produces the value \n`null`, the string representation contains the string \n`\"<null>\"`.",340)),shared(),actual(),$default()];},d:['ceylon.language','Collection','$at','string']};});
        })(Collection.$$.prototype);
    }
    return Collection;
}
exports.$init$Collection=$init$Collection;
$init$Collection();
var opt$279;
function Category($$targs$$,$$category){
    set_type_args($$category,$$targs$$);
}
Category.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$Category:{'var':'in','satisfies':[{t:$Object}],'def':{t:$Object}}},$an:function(){return[doc(String$("Abstract supertype of objects that contain other values, \ncalled *elements*, where it is possible to efficiently \ndetermine if a given value is an element.\n\n`Category` models a mathematical set, but is distinct \nfrom the [[Set]] collection type.\n\nThe `in` operator may be used to determine if a value\nbelongs to a `Category`:\n\n    if (69 in 0..100) { ... }\n    assert (key->item in { for (n in 0..100) n.string->n**2 });\n\nAn object may be a `Category` of two different disjoint\nelement types. For example, [[String]] is a `Category`\nof its `Character`s and of its substrings.\n\n    if (\"hello\" in \"hello world\") { ... }\n    assert (\'.\' in string);\n\nOrdinarily, `x==y` implies that `x in cat == y in cat`.\nBut this contract is not required since it is possible to \nform a meaningful `Category` using a different \nequivalence relation. For example, an `IdentitySet` is a \nmeaningful `Category`.\n\nNote that even though `Category<Element>` is declared\ncontravariant in its [[element type|Element]], most types\nthat inherit `Category` are covariant in their element\ntype, and therefore satisfy `Category<Object>`, resulting\nin some loss of typesafety. For such types, [[contains]] \nshould return `false` for any value that is not an \ninstance of the element type. For example, `String` is a \n`Category<Object>`, not a `Category<Character|String>`,\nand `x in string` evaluates to `false` for every `x` that\nis not a `String` or `Character`.",1433)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Category']};};
exports.Category=Category;
function $init$Category(){
    if(Category.$$===undefined){
        initTypeProtoI(Category,'ceylon.language::Category');
        (function($$category){
            $$category.contains={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:'Element$Category',$an:function(){return[];}}],$cont:Category,$an:function(){return[doc("Returns `true` if the given value belongs to this\n`Category`, that is, if it is an element of this\n`Category`, or `false` otherwise.\n\nFor most `Category`s the following relationship is \nsatisfied by every pair of elements `x` and `y`:\n\n- if `x==y`, then `x in category == y in category`\n\nHowever, it is possible to form a useful `Category` \nconsistent with some other equivalence relation, for \nexample `===`. Therefore implementations of `contains()` \nwhich do not satisfy this relationship are tolerated."),see("containsEvery","containsAny"),shared(),formal()];},d:['ceylon.language','Category','$m','contains']};}};$$category.containsEvery=function containsEvery(elements$280){
                var $$category=this;
                var it$281 = elements$280.iterator();
                var element$282;while((element$282=it$281.next())!==getFinished()){
                    if((!$$category.contains(element$282))){
                        return false;
                    }
                }
                if(getFinished() === element$282){
                    return true;
                }
            };$$category.containsEvery.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'elements',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Element$Category',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$cont:Category,$an:function(){return[doc(String$("Returns `true` if every one of the given values belongs \nto this `Category`, or `false` otherwise.",98)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Category().$$.prototype.contains)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Category','$m','containsEvery']};};
            $$category.containsAny=function containsAny(elements$283){
                var $$category=this;
                var it$284 = elements$283.iterator();
                var element$285;while((element$285=it$284.next())!==getFinished()){
                    if($$category.contains(element$285)){
                        return true;
                    }
                }
                if(getFinished() === element$285){
                    return false;
                }
            };$$category.containsAny.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'elements',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Element$Category',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$cont:Category,$an:function(){return[doc(String$("Returns `true` if any one of the given values belongs \nto this `Category`, or `false` otherwise.",96)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Category().$$.prototype.contains)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','Category','$m','containsAny']};};
        })(Category.$$.prototype);
    }
    return Category;
}
exports.$init$Category=$init$Category;
$init$Category();
function List($$targs$$,$$list){
    Collection({Element$Collection:$$targs$$.Element$List},$$list);
    Correspondence({Item$Correspondence:$$targs$$.Element$List,Key$Correspondence:{t:Integer}},$$list);
    add_type_arg($$list,'Key$Correspondence',{t:Integer});
    Ranged({Span$Ranged:{t:List,a:{Element$List:$$targs$$.Element$List}},Index$Ranged:{t:Integer}},$$list);
    add_type_arg($$list,'Span$Ranged',{t:List,a:{Element$List:$$list.$$targs$$.Element$List}});
    add_type_arg($$list,'Index$Ranged',{t:Integer});
    set_type_args($$list,$$targs$$);
    $$list.$prop$getSize={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:List,$an:function(){return[doc(String$("The number of elements in this list, always\n`list.lastIndex+1`.",63)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$List().$$.prototype.$prop$getLastIndex)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),actual(),$default()];},d:['ceylon.language','List','$at','size']};}};
    $$list.$prop$getSize.get=function(){return size};
    $$list.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$List']},$cont:List,$an:function(){return[doc(String$("Returns the first element of this `List`, if any.",49)),shared(),actual(),$default()];},d:['ceylon.language','List','$at','first']};}};
    $$list.$prop$getFirst.get=function(){return first};
}
List.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$List:{'var':'out'}},satisfies:[{t:Collection,a:{Element$Collection:'Element$List'}},{t:Correspondence,a:{Item$Correspondence:'Element$List',Key$Correspondence:{t:Integer}}},{t:Ranged,a:{Span$Ranged:{t:List,a:{Element$List:'Element$List'}},Index$Ranged:{t:Integer}}}],$an:function(){return[doc(String$("Represents a collection in which every element has a \nunique non-negative integer index.\n\nA `List` is a [[Collection]] of its elements, and a \n[[Correspondence]] from indices to elements.\n\nDirect access to a list element by index produces a value \nof optional type. The following idiom may be used instead \nof upfront bounds-checking, as long as the list element \ntype is a non-`null` type:\n\n    if (exists char = \"hello world\"[index]) { \n        //do something with char\n    }\n    else {\n        //out of bounds\n    }\n\nWhen an algorithm guarantees that a list contains a given \nindex, the following idiom may be used:\n\n    assert (exists char = \"hello world\"[index]);\n    //do something with char\n\nTo iterate the indices of a `List`, use the following\nidiom:\n\n    for (i->char in \"hello world\".indexed) { ... }\n\n[[Strings|String]], [[sequences|Sequential]], \n[[tuples|Tuple]], and [[arrays|Array]] are all `List`s,\nand are all of fixed length. Variable-length mutable\n`List`s are also possible.",995)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Sequence),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Empty),$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$Array)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:InterfaceDeclaration$meta$declaration},{t:ClassDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','List']};};
exports.List=List;
function $init$List(){
    if(List.$$===undefined){
        initTypeProtoI(List,'ceylon.language::List',$init$Collection(),$init$Correspondence(),$init$Ranged());
        (function($$list){
            $$list.$prop$getLastIndex={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$cont:List,$an:function(){return[doc(String$("The index of the last element of the list, or `null` if \nthe list is empty.",75)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$List().$$.prototype.$prop$getSize)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),formal()];},d:['ceylon.language','List','$at','lastIndex']};}};
            defineAttr($$list,'size',function(){
                var $$list=this;
                return (opt$286=$$list.lastIndex,opt$286!==null&&opt$286!==undefined?opt$286:(-(1))).plus((1));
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:List,$an:function(){return[doc(String$("The number of elements in this list, always\n`list.lastIndex+1`.",63)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$List().$$.prototype.$prop$getLastIndex)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared(),actual(),$default()];},d:['ceylon.language','List','$at','size']};});
            $$list.shorterThan=function (length$287){
                var $$list=this;
                return ($$list.size<length$287);
            };
            $$list.shorterThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:List,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','List','$m','shorterThan']};};
            $$list.longerThan=function (length$288){
                var $$list=this;
                return ($$list.size>length$288);
            };
            $$list.longerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:List,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','List','$m','longerThan']};};
            $$list.$prop$getRest={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$cont:List,$an:function(){return[doc(String$("The rest of the list, without the first element.",48)),shared(),actual(),formal()];},d:['ceylon.language','List','$at','rest']};}};
            $$list.defines=function (index$289){
                var $$list=this;
                return (tmpvar$290=index$289,tmpvar$290.compare((0))!==getSmaller()&&tmpvar$290.compare((opt$291=$$list.lastIndex,opt$291!==null&&opt$291!==undefined?opt$291:(-(1))))!==getLarger());
            };
            $$list.defines.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determines if the given index refers to an element of \nthis list, that is, if `0<=index<=list.lastIndex`.",105)),shared(),actual(),$default()];},d:['ceylon.language','List','$m','defines']};};
            $$list.$get={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$List']},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:List,$an:function(){return[doc("Returns the element of this sequence with the given\nindex if the index refers to an element of the list,\nthat is, if `0<=index<=list.lastIndex`, or `null` \notherwise. The first element of the list has index \n`0`."),shared(),actual(),formal()];},d:['ceylon.language','List','$m','get']};}};$$list.iterator=function iterator(){
                var $$list=this;
                function listIterator$292($$targs$$){
                    var $$listIterator$292=new listIterator$292.$$;
                    $$listIterator$292.$$outer=$$list;
                    $$listIterator$292.$$targs$$=$$targs$$;
                    Iterator({Element$Iterator:$$list.$$targs$$.Element$List},$$listIterator$292);
                    $$listIterator$292.index$293_=(0);
                    $$listIterator$292.$prop$getIndex$293={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:listIterator$292,$an:function(){return[variable()];},d:['ceylon.language','List','$m','iterator','$o','listIterator','$at','index']};}};
                    $$listIterator$292.$prop$getIndex$293.get=function(){return index$293};
                    return $$listIterator$292;
                };listIterator$292.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$List'}}],d:['ceylon.language','List','$m','iterator','$o','listIterator']};};
                function $init$listIterator$292(){
                    if(listIterator$292.$$===undefined){
                        initTypeProto(listIterator$292,'ceylon.language::List.iterator.listIterator',Basic,$init$Iterator());
                        (function($$listIterator$292){
                            defineAttr($$listIterator$292,'index$293',function(){return this.index$293_;},function(index$294){return this.index$293_=index$294;},function(){return{mod:$CCMM$,$t:{t:Integer},$cont:listIterator$292,$an:function(){return[variable()];},d:['ceylon.language','List','$m','iterator','$o','listIterator','$at','index']};});
                            $$listIterator$292.next=function next(){
                                var $$listIterator$292=this;
                                if(($$listIterator$292.index$293<=(opt$295=$$list.lastIndex,opt$295!==null&&opt$295!==undefined?opt$295:(-(1))))){
                                    //assert at List.ceylon (80:20-80:65)
                                    var elem$296;
                                    if(!(isOfType((elem$296=$$list.$get((oldindex$297=$$listIterator$292.index$293,$$listIterator$292.index$293=oldindex$297.successor,oldindex$297))),$$list.$$targs$$.Element$List))) {throw wrapexc(AssertionException("Assertion failed: \'is Element elem = outer.get(index++)\' at List.ceylon (80:27-80:64)"),'80:20-80:65','List.ceylon'); }
                                    var oldindex$297;
                                    return elem$296;
                                }else {
                                    return getFinished();
                                }
                                var opt$295;
                            };$$listIterator$292.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$List',{t:Finished}]},$ps:[],$cont:listIterator$292,$an:function(){return[shared(),actual()];},d:['ceylon.language','List','$m','iterator','$o','listIterator','$m','next']};};
                        })(listIterator$292.$$.prototype);
                    }
                    return listIterator$292;
                }
                $init$listIterator$292();
                var listIterator$298;
                function getListIterator$298(){
                    if(listIterator$298===undefined){listIterator$298=$init$listIterator$292()({Element$Iterator:$$list.$$targs$$.Element$List});listIterator$298.$crtmm$=getListIterator$298.$crtmm$;}
                    return listIterator$298;
                }
                getListIterator$298.$crtmm$=function(){return{mod:$CCMM$,$t:{t:listIterator$292},d:['ceylon.language','List','$m','iterator','$o','listIterator']};};
                $prop$getListIterator$298={get:getListIterator$298,$crtmm$:getListIterator$298.$crtmm$};
                return getListIterator$298();
            };$$list.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$List'}},$ps:[],$cont:List,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','List','$m','iterator']};};
            $$list.$prop$getReversed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$cont:List,$an:function(){return[doc(String$("A `List` containing the elements of this list in \nreverse order.",64)),shared(),formal()];},d:['ceylon.language','List','$at','reversed']};}};
            $$list.equals=function equals(that$299){
                var $$list=this;
                var that$300;
                if(isOfType((that$300=that$299),{t:List,a:{Element$List:{t:Anything}}})){
                    if((that$300.size==$$list.size)){
                        var it$301 = Range((0),$$list.size.minus((1)),{Element$Range:{t:Integer}}).iterator();
                        var i$302;while((i$302=it$301.next())!==getFinished()){
                            var x$303=$$list.$get(i$302);
                            var y$304=that$300.$get(i$302);
                            var x$305;
                            if((x$305=x$303)!==null){
                                var y$306;
                                if((y$306=y$304)!==null){
                                    if((!x$305.equals(y$306))){
                                        return false;
                                    }
                                }else {
                                    return false;
                                }
                            }else {
                                var y$307;
                                if((y$307=y$304)!==null){
                                    return false;
                                }
                            }
                        }
                        if(getFinished() === i$302){
                            return true;
                        }
                    }
                }
                return false;
            };$$list.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'that',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Two `List`s are considered equal iff they have the \nsame `size` and _entry sets_. The entry set of a list \n`l` is the set of elements of `l.indexed`. This \ndefinition is equivalent to the more intuitive notion \nthat two lists are equal iff they have the same `size` \nand for every index either:\n\n- the lists both have the element `null`, or\n- the lists both have a non-null element, and the\n  two elements are equal.",416)),shared(),actual(),$default()];},d:['ceylon.language','List','$m','equals']};};
            defineAttr($$list,'hash',function(){
                var $$list=this;
                var hash$308=(1);
                function setHash$308(hash$309){return hash$308=hash$309;};
                $prop$getHash$308={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$an:function(){return[variable()];},d:['ceylon.language','List','$at','hash','$at','hash']};}};
                $prop$getHash$308.get=function(){return hash$308};
                $prop$getHash$308.set=setHash$308;
                if(setHash$308.$crtmm$===undefined)setHash$308.$crtmm$=$prop$getHash$308.$crtmm$;
                var it$310 = $$list.iterator();
                var elem$311;while((elem$311=it$310.next())!==getFinished()){
                    (hash$308=hash$308.times((31)));
                    var elem$312;
                    if((elem$312=elem$311)!==null){
                        (hash$308=hash$308.plus(elem$312.hash));
                    }
                }
                return hash$308;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:List,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','List','$at','hash']};});$$list.findLast=function findLast(selecting$313){
                var $$list=this;
                var l$314;
                if((l$314=$$list.lastIndex)!==null){
                    var index$315=l$314;
                    function setIndex$315(index$316){return index$315=index$316;};
                    while((index$315>=(0))){
                        var elem$317;
                        if((elem$317=$$list.$get((oldindex$318=index$315,index$315=oldindex$318.predecessor,oldindex$318)))!==null){
                            if(selecting$313(elem$317)){
                                return elem$317;
                            }
                        }
                        var oldindex$318;
                    }
                }
                return null;
            };$$list.findLast.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$List']},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:List,$an:function(){return[shared(),$default(),actual()];},d:['ceylon.language','List','$m','findLast']};};
            defineAttr($$list,'first',function(){
                var $$list=this;
                return $$list.$get((0));
            },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$List']},$cont:List,$an:function(){return[doc(String$("Returns the first element of this `List`, if any.",49)),shared(),actual(),$default()];},d:['ceylon.language','List','$at','first']};});
            defineAttr($$list,'last',function(){
                var $$list=this;
                var i$319;
                if((i$319=$$list.lastIndex)!==null){
                    return $$list.$get(i$319);
                }else {
                    return null;
                }
            },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$List']},$cont:List,$an:function(){return[doc(String$("Returns the last element of this `List`, if any.",48)),shared(),actual(),$default()];},d:['ceylon.language','List','$at','last']};});$$list.withLeading=function (element$320,$$$mptypes){
                var $$list=this;
                return Singleton(element$320,{Element$Singleton:$$$mptypes.Other$withLeading}).chain($$list,{Other$chain:$$list.$$targs$$.Element$List,OtherAbsent$chain:{t:Null}}).sequence;
            };
            $$list.withLeading.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:{t:'u', l:['Other$withLeading','Element$List']}}},$ps:[{$nm:'element',$mt:'prm',$t:'Other$withLeading',$an:function(){return[doc("The first element of the resulting sequence.")];}}],$cont:List,$tp:{Other$withLeading:{}},$an:function(){return[doc(String$("Returns a new `List` that starts with the specified\nelement, followed by the elements of this list.",99)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.following)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','List','$m','withLeading']};};
            $$list.withTrailing=function (element$321,$$$mptypes){
                var $$list=this;
                return $$list.chain(Singleton(element$321,{Element$Singleton:$$$mptypes.Other$withTrailing}),{Other$chain:$$$mptypes.Other$withTrailing,OtherAbsent$chain:{t:Nothing}}).sequence;
            };
            $$list.withTrailing.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:{t:'u', l:['Element$List','Other$withTrailing']}}},$ps:[{$nm:'element',$mt:'prm',$t:'Other$withTrailing',$an:function(){return[doc("The last element of the resulting sequence.")];}}],$cont:List,$tp:{Other$withTrailing:{}},$an:function(){return[doc(String$("Returns a new `List` that contains the specified\nelement appended to the end of the elements of this \nlist.",107)),shared(),$default()];},d:['ceylon.language','List','$m','withTrailing']};};
            $$list.startsWith=function (sublist$322){
                var $$list=this;
                return $$list.includesAt((0),sublist$322);
            };
            $$list.startsWith.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determine if the given list occurs at the start of this \nlist.",62)),shared(),$default()];},d:['ceylon.language','List','$m','startsWith']};};
            $$list.endsWith=function (sublist$323){
                var $$list=this;
                return $$list.includesAt($$list.size.minus(sublist$323.size),sublist$323);
            };
            $$list.endsWith.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determine if the given list occurs at the end of this \nlist.",60)),shared(),$default()];},d:['ceylon.language','List','$m','endsWith']};};
            $$list.includesAt=function includesAt(index$324,sublist$325){
                var $$list=this;
                var it$326 = (function(){var tmpvar$328=sublist$325.size;
                if(tmpvar$328>0){
                var tmpvar$329=(0);
                var tmpvar$330=tmpvar$329;
                for(var i=1; i<tmpvar$328; i++){tmpvar$330=tmpvar$330.successor;}
                return Range(tmpvar$329,tmpvar$330,{Element$Sequential:{t:Integer}})
                }else return getEmpty();}()).iterator();
                var i$327;while((i$327=it$326.next())!==getFinished()){
                    var x$331=$$list.$get(index$324.plus(i$327));
                    var y$332=sublist$325.$get(i$327);
                    var x$333;
                    if((x$333=x$331)!==null){
                        var y$334;
                        if((y$334=y$332)!==null){
                            if((!x$333.equals(y$334))){
                                return false;
                            }
                        }else {
                            return false;
                        }
                    }else {
                        var y$335;
                        if((y$335=y$332)!==null){
                            return false;
                        }
                    }
                }
                if(getFinished() === i$327){
                    return true;
                }
            };$$list.includesAt.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[doc("The index at which this list might occur")];}},{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determine if the given list occurs at the given index \nof this list.",68)),shared(),$default()];},d:['ceylon.language','List','$m','includesAt']};};
            $$list.includes=function includes(sublist$336){
                var $$list=this;
                var it$337 = (function(){var tmpvar$339=$$list.size;
                if(tmpvar$339>0){
                var tmpvar$340=(0);
                var tmpvar$341=tmpvar$340;
                for(var i=1; i<tmpvar$339; i++){tmpvar$341=tmpvar$341.successor;}
                return Range(tmpvar$340,tmpvar$341,{Element$Sequential:{t:Integer}})
                }else return getEmpty();}()).iterator();
                var index$338;while((index$338=it$337.next())!==getFinished()){
                    if($$list.includesAt(index$338,sublist$336)){
                        return true;
                    }
                }
                return false;
            };$$list.includes.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determine if the given list occurs at some index in \nthis list.",63)),shared(),$default()];},d:['ceylon.language','List','$m','includes']};};
            $$list.inclusions=function (sublist$342){
                var $$list=this;
                return Comprehension(function(){
                    var it$343=(function(){var tmpvar$345=$$list.size;
                    if(tmpvar$345>0){
                    var tmpvar$346=(0);
                    var tmpvar$347=tmpvar$346;
                    for(var i=1; i<tmpvar$345; i++){tmpvar$347=tmpvar$347.successor;}
                    return Range(tmpvar$346,tmpvar$347,{Element$Sequential:{t:Integer}})
                    }else return getEmpty();}()).iterator();
                    var index$344=getFinished();
                    var next$index$344=function(){
                        while((index$344=it$343.next())!==getFinished()){
                            if($$list.includesAt(index$344,sublist$342)){
                                return index$344;
                            }
                        }
                        return getFinished();
                    }
                    next$index$344();
                    return function(){
                        if(index$344!==getFinished()){
                            var index$344$348=index$344;
                            var tmpvar$349=index$344$348;
                            next$index$344();
                            return tmpvar$349;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:{t:Integer}});
            };
            $$list.inclusions.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:Integer},Absent$Iterable:{t:Null}}},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("The indexes in this list at which the given list \noccurs.",57)),shared(),$default()];},d:['ceylon.language','List','$m','inclusions']};};
            $$list.firstInclusion=function firstInclusion(sublist$350){
                var $$list=this;
                var it$351 = (function(){var tmpvar$353=$$list.size;
                if(tmpvar$353>0){
                var tmpvar$354=(0);
                var tmpvar$355=tmpvar$354;
                for(var i=1; i<tmpvar$353; i++){tmpvar$355=tmpvar$355.successor;}
                return Range(tmpvar$354,tmpvar$355,{Element$Sequential:{t:Integer}})
                }else return getEmpty();}()).iterator();
                var index$352;while((index$352=it$351.next())!==getFinished()){
                    if($$list.includesAt(index$352,sublist$350)){
                        return index$352;
                    }
                }
                if(getFinished() === index$352){
                    return null;
                }
            };$$list.firstInclusion.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("The first index in this list at which the given list \noccurs.",61)),shared(),$default()];},d:['ceylon.language','List','$m','firstInclusion']};};
            $$list.lastInclusion=function lastInclusion(sublist$356){
                var $$list=this;
                var it$357 = (function(){var tmpvar$359=$$list.size;
                if(tmpvar$359>0){
                var tmpvar$360=(0);
                var tmpvar$361=tmpvar$360;
                for(var i=1; i<tmpvar$359; i++){tmpvar$361=tmpvar$361.successor;}
                return Range(tmpvar$360,tmpvar$361,{Element$Sequential:{t:Integer}})
                }else return getEmpty();}()).reversed.iterator();
                var index$358;while((index$358=it$357.next())!==getFinished()){
                    if($$list.includesAt(index$358,sublist$356)){
                        return index$358;
                    }
                }
                if(getFinished() === index$358){
                    return null;
                }
            };$$list.lastInclusion.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("The last index in this list at which the given list \noccurs.",60)),shared(),$default()];},d:['ceylon.language','List','$m','lastInclusion']};};
            $$list.occursAt=function occursAt(index$362,element$363){
                var $$list=this;
                var elem$364=$$list.$get(index$362);
                var element$365;
                if((element$365=element$363)!==null){
                    var elem$366;
                    if((elem$366=elem$364)!==null){
                        return elem$366.equals(element$365);
                    }else {
                        return false;
                    }
                }else {
                    return (!exists(elem$364));
                }
            };$$list.occursAt.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'element',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determines if the given value occurs at the given index \nin this list.",70)),shared(),$default()];},d:['ceylon.language','List','$m','occursAt']};};
            $$list.occurs=function occurs(element$367){
                var $$list=this;
                var it$368 = (function(){var tmpvar$370=$$list.size;
                if(tmpvar$370>0){
                var tmpvar$371=(0);
                var tmpvar$372=tmpvar$371;
                for(var i=1; i<tmpvar$370; i++){tmpvar$372=tmpvar$372.successor;}
                return Range(tmpvar$371,tmpvar$372,{Element$Sequential:{t:Integer}})
                }else return getEmpty();}()).iterator();
                var index$369;while((index$369=it$368.next())!==getFinished()){
                    if($$list.occursAt(index$369,element$367)){
                        return true;
                    }
                }
                return false;
            };$$list.occurs.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determines if the given value occurs as an element of \nthis list.",65)),shared(),$default()];},d:['ceylon.language','List','$m','occurs']};};
            $$list.contains=function (element$373){
                var $$list=this;
                return $$list.occurs(element$373);
            };
            $$list.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Determines if this list contains the given value.\nReturns `true` for every element of this list.",96)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$List().$$.prototype.occurs)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),actual(),$default()];},d:['ceylon.language','List','$m','contains']};};
            $$list.occurrences=function (element$374){
                var $$list=this;
                return Comprehension(function(){
                    var it$375=(function(){var tmpvar$377=$$list.size;
                    if(tmpvar$377>0){
                    var tmpvar$378=(0);
                    var tmpvar$379=tmpvar$378;
                    for(var i=1; i<tmpvar$377; i++){tmpvar$379=tmpvar$379.successor;}
                    return Range(tmpvar$378,tmpvar$379,{Element$Sequential:{t:Integer}})
                    }else return getEmpty();}()).iterator();
                    var index$376=getFinished();
                    var next$index$376=function(){
                        while((index$376=it$375.next())!==getFinished()){
                            if($$list.occursAt(index$376,element$374)){
                                return index$376;
                            }
                        }
                        return getFinished();
                    }
                    next$index$376();
                    return function(){
                        if(index$376!==getFinished()){
                            var index$376$380=index$376;
                            var tmpvar$381=index$376$380;
                            next$index$376();
                            return tmpvar$381;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:{t:Integer}});
            };
            $$list.occurrences.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:Integer},Absent$Iterable:{t:Null}}},$ps:[{$nm:'element',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("The indexes in this list at which the given element \noccurs.",60)),shared(),$default()];},d:['ceylon.language','List','$m','occurrences']};};
            $$list.firstOccurrence=function firstOccurrence(element$382){
                var $$list=this;
                var it$383 = (function(){var tmpvar$385=$$list.size;
                if(tmpvar$385>0){
                var tmpvar$386=(0);
                var tmpvar$387=tmpvar$386;
                for(var i=1; i<tmpvar$385; i++){tmpvar$387=tmpvar$387.successor;}
                return Range(tmpvar$386,tmpvar$387,{Element$Sequential:{t:Integer}})
                }else return getEmpty();}()).iterator();
                var index$384;while((index$384=it$383.next())!==getFinished()){
                    if($$list.occursAt(index$384,element$382)){
                        return index$384;
                    }
                }
                if(getFinished() === index$384){
                    return null;
                }
            };$$list.firstOccurrence.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'element',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("The first index in this list at which the given element \noccurs.",64)),shared(),$default()];},d:['ceylon.language','List','$m','firstOccurrence']};};
            $$list.lastOccurrence=function lastOccurrence(element$388){
                var $$list=this;
                var it$389 = (function(){var tmpvar$391=$$list.size;
                if(tmpvar$391>0){
                var tmpvar$392=(0);
                var tmpvar$393=tmpvar$392;
                for(var i=1; i<tmpvar$391; i++){tmpvar$393=tmpvar$393.successor;}
                return Range(tmpvar$392,tmpvar$393,{Element$Sequential:{t:Integer}})
                }else return getEmpty();}()).reversed.iterator();
                var index$390;while((index$390=it$389.next())!==getFinished()){
                    if($$list.occursAt(index$390,element$388)){
                        return index$390;
                    }
                }
                if(getFinished() === index$390){
                    return null;
                }
            };$$list.lastOccurrence.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'element',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("The last index in this list at which the given element \noccurs.",63)),shared(),$default()];},d:['ceylon.language','List','$m','lastOccurrence']};};
            $$list.indexes=function (selecting$394){
                var $$list=this;
                return Comprehension(function(){
                    var it$395=(function(){var tmpvar$397=$$list.size;
                    if(tmpvar$397>0){
                    var tmpvar$398=(0);
                    var tmpvar$399=tmpvar$398;
                    for(var i=1; i<tmpvar$397; i++){tmpvar$399=tmpvar$399.successor;}
                    return Range(tmpvar$398,tmpvar$399,{Element$Sequential:{t:Integer}})
                    }else return getEmpty();}()).iterator();
                    var index$396=getFinished();
                    var next$index$396=function(){
                        while((index$396=it$395.next())!==getFinished()){
                            if(selecting$394((opt$400=$$list.$get(index$396),opt$400!==null&&opt$400!==undefined?opt$400:getNothing()))){
                                return index$396;
                            }
                        }
                        return getFinished();
                    }
                    next$index$396();
                    return function(){
                        if(index$396!==getFinished()){
                            var index$396$401=index$396;
                            var tmpvar$402=index$396$401;
                            next$index$396();
                            return tmpvar$402;
                        }
                        return getFinished();
                    }
                },{Absent$Iterable:{t:Null},Element$Iterable:{t:Integer}});
            };
            $$list.indexes.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:Integer},Absent$Iterable:{t:Null}}},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[doc("The predicate the indexed elements must \nsatisfy")];}}],$cont:List,$an:function(){return[doc(String$("The indexes in this list for which the element \nsatisfies the given predicate.",78)),shared(),$default()];},d:['ceylon.language','List','$m','indexes']};};
            $$list.trim=function trim(trimming$403){
                var $$list=this;
                var l$404;
                if((l$404=$$list.lastIndex)!==null){
                    var from$405=(-(1));
                    function setFrom$405(from$406){return from$405=from$406;};
                    var to$407=(-(1));
                    function setTo$407(to$408){return to$407=to$408;};
                    var it$409 = Range((0),l$404,{Element$Range:{t:Integer}}).iterator();
                    var index$410;while((index$410=it$409.next())!==getFinished()){
                        if((!trimming$403((opt$411=$$list.$get(index$410),opt$411!==null&&opt$411!==undefined?opt$411:getNothing())))){
                            from$405=index$410;
                            break;
                        }
                        var opt$411;
                    }
                    if(getFinished() === index$410){
                        return getEmpty();
                    }
                    var it$412 = Range(l$404,(0),{Element$Range:{t:Integer}}).iterator();
                    var index$413;while((index$413=it$412.next())!==getFinished()){
                        if((!trimming$403((opt$414=$$list.$get(index$413),opt$414!==null&&opt$414!==undefined?opt$414:getNothing())))){
                            to$407=index$413;
                            break;
                        }
                        var opt$414;
                    }
                    if(getFinished() === index$413){
                        return getEmpty();
                    }
                    return $$list.span(from$405,to$407);
                }else {
                    return getEmpty();
                }
            };$$list.trim.$crtmm$=function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$ps:[{$nm:'trimming',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Trim the elements satisfying the given predicate\nfunction from the start and end of this list, returning \na list no longer than this list.",138)),shared(),$default()];},d:['ceylon.language','List','$m','trim']};};
            $$list.trimLeading=function trimLeading(trimming$415){
                var $$list=this;
                var l$416;
                if((l$416=$$list.lastIndex)!==null){
                    var it$417 = Range((0),l$416,{Element$Range:{t:Integer}}).iterator();
                    var index$418;while((index$418=it$417.next())!==getFinished()){
                        if((!trimming$415((opt$419=$$list.$get(index$418),opt$419!==null&&opt$419!==undefined?opt$419:getNothing())))){
                            return $$list.span(index$418,l$416);
                        }
                        var opt$419;
                    }
                }
                return getEmpty();
            };$$list.trimLeading.$crtmm$=function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$ps:[{$nm:'trimming',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Trim the elements satisfying the given predicate\nfunction from the start of this list, returning a list \nno longer than this list.",130)),shared(),$default()];},d:['ceylon.language','List','$m','trimLeading']};};
            $$list.trimTrailing=function trimTrailing(trimming$420){
                var $$list=this;
                var l$421;
                if((l$421=$$list.lastIndex)!==null){
                    var it$422 = Range(l$421,(0),{Element$Range:{t:Integer}}).iterator();
                    var index$423;while((index$423=it$422.next())!==getFinished()){
                        if((!trimming$420((opt$424=$$list.$get(index$423),opt$424!==null&&opt$424!==undefined?opt$424:getNothing())))){
                            return $$list.span((0),index$423);
                        }
                        var opt$424;
                    }
                }
                return getEmpty();
            };$$list.trimTrailing.$crtmm$=function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$ps:[{$nm:'trimming',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Trim the elements satisfying the given predicate\nfunction from the end of this list, returning a list no \nlonger than this list.",128)),shared(),$default()];},d:['ceylon.language','List','$m','trimTrailing']};};
            $$list.initial=function (length$425){
                var $$list=this;
                return $$list.segment((0),length$425);
            };
            $$list.initial.$crtmm$=function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Select the first elements of this list, returning a \nlist no longer than the given length. If this list is \nshorter than the given length, return this list. \nOtherwise return a list of the given length.",202)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$List().$$.prototype.terminal)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','List','$m','initial']};};
            $$list.terminal=function terminal(length$426){
                var $$list=this;
                var l$427;
                if((l$427=$$list.lastIndex)!==null&&(length$426>(0))){
                    return $$list.span(l$427.minus(length$426).plus((1)),l$427);
                }else {
                    return getEmpty();
                }
            };$$list.terminal.$crtmm$=function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$ps:[{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:List,$an:function(){return[doc(String$("Select the last elements of the list, returning a list \nno longer than the given length. If this list is \nshorter than the given length, return this list. \nOtherwise return a list of the given length.",200)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$List().$$.prototype.initial)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared(),$default()];},d:['ceylon.language','List','$m','terminal']};};
            $$list.clone={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:'Element$List'}},$ps:[],$cont:List,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language','List','$m','clone']};}};
        })(List.$$.prototype);
    }
    return List;
}
exports.$init$List=$init$List;
$init$List();
var opt$286,opt$291,opt$400;
function Tuple(first,rest,$$targs$$,$$tuple){
    $init$Tuple();
    if($$tuple===undefined)$$tuple=new Tuple.$$;
    set_type_args($$tuple,$$targs$$);
    $$tuple.first_=first;
    $$tuple.rest_=rest;
    $Object($$tuple);
    Sequence({Element$Sequence:$$targs$$.Element$Tuple},$$tuple);
    $$tuple.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:'First$Tuple',$cont:Tuple,$an:function(){return[doc(String$("The first element of this tuple.",32)),shared(),actual()];},d:['ceylon.language','Tuple','$at','first']};}};
    $$tuple.$prop$getFirst.get=function(){return first};
    $$tuple.$prop$getRest={$crtmm$:function(){return{mod:$CCMM$,$t:'Rest$Tuple',$cont:Tuple,$an:function(){return[doc(String$("A tuple with the elements of this tuple, except\nfor the first element.",70)),shared(),actual()];},d:['ceylon.language','Tuple','$at','rest']};}};
    $$tuple.$prop$getRest.get=function(){return rest};
    return $$tuple;
}
Tuple.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},$ps:[{$nm:'first',$mt:'prm',$t:'First$Tuple',$an:function(){return[doc("The first element of this tuple."),shared(),actual()];}},{$nm:'rest',$mt:'prm',$t:'Rest$Tuple',$an:function(){return[doc("A tuple with the elements of this tuple, except\nfor the first element."),shared(),actual()];}}],$tp:{Element$Tuple:{'var':'out'},First$Tuple:{'var':'out','satisfies':['Element$Tuple']},Rest$Tuple:{'var':'out','satisfies':[{t:Sequential,a:{Element$Sequential:'Element$Tuple'}}],'def':{t:Empty}}},satisfies:[{t:Sequence,a:{Element$Sequence:'Element$Tuple'}}],$an:function(){return[doc(String$("A _tuple_ is a typed linked list. Each instance of \n`Tuple` represents the value and type of a single link.\nThe attributes `first` and `rest` allow us to retrieve\na value form the list without losing its static type \ninformation.\n\n    value point = Tuple(0.0, Tuple(0.0, Tuple(\"origin\")));\n    Float x = point.first;\n    Float y = point.rest.first;\n    String label = point.rest.rest.first;\n\nUsually, we abbreviate code involving tuples.\n\n    [Float,Float,String] point = [0.0, 0.0, \"origin\"];\n    Float x = point[0];\n    Float y = point[1];\n    String label = point[2];\n\nA list of types enclosed in brackets is an abbreviated \ntuple type. An instance of `Tuple` may be constructed \nby surrounding a value list in brackets:\n\n    [String,String] words = [\"hello\", \"world\"];\n\nThe index operator with a literal integer argument is a \nshortcut for a chain of evaluations of `rest` and \n`first`. For example, `point[1]` means `point.rest.first`.\n\nA _terminated_ tuple type is a tuple where the type of\nthe last link in the chain is `Empty`. An _unterminated_ \ntuple type is a tuple where the type of the last link\nin the chain is `Sequence` or `Sequential`. Thus, a \nterminated tuple type has a length that is known\nstatically. For an unterminated tuple type only a lower\nbound on its length is known statically.\n\nHere, `point` is an unterminated tuple:\n\n    String[] labels = ... ;\n    [Float,Float,String*] point = [0.0, 0.0, *labels];\n    Float x = point[0];\n    Float y = point[1];\n    String? firstLabel = point[2];\n    String[] allLabels = point[2...];",1553)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared(),$final()];},d:['ceylon.language','Tuple']};};
exports.Tuple=Tuple;
function $init$Tuple(){
    if(Tuple.$$===undefined){
        initTypeProto(Tuple,'ceylon.language::Tuple',$init$$Object(),$init$Sequence());
        (function($$tuple){
            defineAttr($$tuple,'first',function(){return this.first_;},undefined,function(){return{mod:$CCMM$,$t:'First$Tuple',$cont:Tuple,$an:function(){return[doc(String$("The first element of this tuple.",32)),shared(),actual()];},d:['ceylon.language','Tuple','$at','first']};});
            defineAttr($$tuple,'rest',function(){return this.rest_;},undefined,function(){return{mod:$CCMM$,$t:'Rest$Tuple',$cont:Tuple,$an:function(){return[doc(String$("A tuple with the elements of this tuple, except\nfor the first element.",70)),shared(),actual()];},d:['ceylon.language','Tuple','$at','rest']};});
            defineAttr($$tuple,'size',function(){
                var $$tuple=this;
                return (1).plus($$tuple.rest.size);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$at','size']};});
            $$tuple.$get=function $get(index$428){
                var $$tuple=this;
                var case$429=index$428.compare((0));
                if(case$429===getSmaller()) {
                    return null;
                }else if(case$429===getEqual()) {
                    return $$tuple.first;
                }else if(case$429===getLarger()) {
                    return $$tuple.rest.$get(index$428.minus((1)));
                }
            };$$tuple.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Tuple']},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$m','get']};};
            defineAttr($$tuple,'lastIndex',function(){
                var $$tuple=this;
                var restLastIndex$430;
                if((restLastIndex$430=$$tuple.rest.lastIndex)!==null){
                    return restLastIndex$430.plus((1));
                }else {
                    return (0);
                }
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$at','lastIndex']};});defineAttr($$tuple,'last',function(){
                var $$tuple=this;
                var rest$431;
                if(nonempty((rest$431=$$tuple.rest))){
                    return rest$431.last;
                }else {
                    return $$tuple.first;
                }
            },undefined,function(){return{mod:$CCMM$,$t:'Element$Tuple',$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$at','last']};});$$tuple.segment=function segment(from$432,length$433){
                var $$tuple=this;
                if((length$433<=(0))){
                    return getEmpty();
                }
                var realFrom$434=(opt$435=((from$432<(0))?(0):null),opt$435!==null&&opt$435!==undefined?opt$435:from$432);
                var opt$435;
                if((realFrom$434==(0))){
                    return (opt$436=((length$433==(1))?Tuple($$tuple.first,getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:$$tuple.$$targs$$.First$Tuple,Element$Tuple:$$tuple.$$targs$$.First$Tuple}):null),opt$436!==null&&opt$436!==undefined?opt$436:$$tuple.rest.segment((0),length$433.plus(realFrom$434).minus((1))).withLeading($$tuple.first,{Other$withLeading:$$tuple.$$targs$$.First$Tuple}));
                    var opt$436;
                }
                return $$tuple.rest.segment(realFrom$434.minus((1)),length$433);
            };$$tuple.segment.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Tuple'}},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$m','segment']};};
            $$tuple.span=function span(from$437,end$438){
                var $$tuple=this;
                if(((from$437<(0))&&(end$438<(0)))){
                    return getEmpty();
                }
                var realFrom$439=(opt$440=((from$437<(0))?(0):null),opt$440!==null&&opt$440!==undefined?opt$440:from$437);
                var opt$440;
                var realEnd$441=(opt$442=((end$438<(0))?(0):null),opt$442!==null&&opt$442!==undefined?opt$442:end$438);
                var opt$442;
                return (opt$443=((realFrom$439<=realEnd$441)?$$tuple.segment(from$437,realEnd$441.minus(realFrom$439).plus((1))):null),opt$443!==null&&opt$443!==undefined?opt$443:$$tuple.segment(realEnd$441,realFrom$439.minus(realEnd$441).plus((1))).reversed.sequence);
                var opt$443;
            };$$tuple.span.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Tuple'}},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'end',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$m','span']};};
            $$tuple.spanTo=function (to$444){
                var $$tuple=this;
                return (opt$445=((to$444<(0))?getEmpty():null),opt$445!==null&&opt$445!==undefined?opt$445:$$tuple.span((0),to$444));
            };$$tuple.spanFrom=function (from$446){
                var $$tuple=this;
                return $$tuple.span(from$446,$$tuple.size);
            };defineAttr($$tuple,'reversed',function(){
                var $$tuple=this;
                return $$tuple.rest.reversed.withTrailing($$tuple.first,{Other$withTrailing:$$tuple.$$targs$$.First$Tuple});
            },undefined,function(){return{mod:$CCMM$,$t:{t:Sequence,a:{Element$Sequence:'Element$Tuple'}},$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$at','reversed']};});
            $$tuple.clone=function (){
                var $$tuple=this;
                return $$tuple;
            };
            $$tuple.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'First$Tuple'}]},$ps:[],$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$m','clone']};};
            $$tuple.iterator=function iterator(){
                var $$tuple=this;
                function iterator$447($$targs$$){
                    var $$iterator$447=new iterator$447.$$;
                    $$iterator$447.$$outer=$$tuple;
                    $$iterator$447.$$targs$$=$$targs$$;
                    Iterator({Element$Iterator:$$tuple.$$targs$$.Element$Tuple},$$iterator$447);
                    $$iterator$447.current$448_=$$tuple;
                    $$iterator$447.$prop$getCurrent$448={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Tuple'}},$cont:iterator$447,$an:function(){return[variable()];},d:['ceylon.language','Tuple','$m','iterator','$o','iterator','$at','current']};}};
                    $$iterator$447.$prop$getCurrent$448.get=function(){return current$448};
                    return $$iterator$447;
                };iterator$447.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Tuple'}}],d:['ceylon.language','Tuple','$m','iterator','$o','iterator']};};
                function $init$iterator$447(){
                    if(iterator$447.$$===undefined){
                        initTypeProto(iterator$447,'ceylon.language::Tuple.iterator.iterator',Basic,$init$Iterator());
                        (function($$iterator$447){
                            defineAttr($$iterator$447,'current$448',function(){return this.current$448_;},function(current$449){return this.current$448_=current$449;},function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Tuple'}},$cont:iterator$447,$an:function(){return[variable()];},d:['ceylon.language','Tuple','$m','iterator','$o','iterator','$at','current']};});
                            $$iterator$447.next=function next(){
                                var $$iterator$447=this;
                                var c$450;
                                if(nonempty((c$450=$$iterator$447.current$448))){
                                    $$iterator$447.current$448=c$450.rest;
                                    return c$450.first;
                                }else {
                                    return getFinished();
                                }
                            };$$iterator$447.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Tuple',{t:Finished}]},$ps:[],$cont:iterator$447,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$m','iterator','$o','iterator','$m','next']};};
                        })(iterator$447.$$.prototype);
                    }
                    return iterator$447;
                }
                $init$iterator$447();
                var iterator$451;
                function getIterator$451(){
                    if(iterator$451===undefined){iterator$451=$init$iterator$447()({Element$Iterator:$$tuple.$$targs$$.Element$Tuple});iterator$451.$crtmm$=getIterator$451.$crtmm$;}
                    return iterator$451;
                }
                getIterator$451.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$447},d:['ceylon.language','Tuple','$m','iterator','$o','iterator']};};
                $prop$getIterator$451={get:getIterator$451,$crtmm$:getIterator$451.$crtmm$};
                return getIterator$451();
            };$$tuple.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Tuple'}},$ps:[],$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$m','iterator']};};
            $$tuple.contains=function contains(element$452){
                var $$tuple=this;
                var first$453;
                if((first$453=$$tuple.first)!==null&&first$453.equals(element$452)){
                    return true;
                }else {
                    return $$tuple.rest.contains(element$452);
                }
            };$$tuple.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Tuple,$an:function(){return[shared(),actual()];},d:['ceylon.language','Tuple','$m','contains']};};
            $$tuple.withLeading=function (element$454,$$$mptypes){
                var $$tuple=this;
                return Tuple(element$454,$$tuple,{Rest$Tuple:{t:'T', l:[$$tuple.$$targs$$.First$Tuple]},First$Tuple:$$$mptypes.Other$withLeading,Element$Tuple:{t:'u', l:[$$$mptypes.Other$withLeading,$$tuple.$$targs$$.Element$Tuple]}});
            };
            $$tuple.withLeading.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Other$withLeading'},{$t:'First$Tuple'}]},$ps:[{$nm:'element',$mt:'prm',$t:'Other$withLeading',$an:function(){return[doc("The first element of the resulting tuple.")];}}],$cont:Tuple,$tp:{Other$withLeading:{}},$an:function(){return[doc(String$("Returns a new tuple that starts with the specified\nelement, followed by the elements of this tuple.",99)),shared(),actual()];},d:['ceylon.language','Tuple','$m','withLeading']};};
        })(Tuple.$$.prototype);
    }
    return Tuple;
}
exports.$init$Tuple=$init$Tuple;
$init$Tuple();
var opt$445;
function ChainedIterator(first$455,second$456,$$targs$$,$$chainedIterator){
    $init$ChainedIterator();
    if($$chainedIterator===undefined)$$chainedIterator=new ChainedIterator.$$;
    set_type_args($$chainedIterator,$$targs$$);
    $$chainedIterator.first$455_=first$455;
    $$chainedIterator.second$456_=second$456;
    Iterator({Element$Iterator:{t:'u', l:[$$targs$$.Element$ChainedIterator,$$targs$$.Other$ChainedIterator]}},$$chainedIterator);
    $$chainedIterator.iter$457_=$$chainedIterator.first$455.iterator();
    $$chainedIterator.$prop$getIter$457={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:'u', l:['Element$ChainedIterator','Other$ChainedIterator']}}},$cont:ChainedIterator,$an:function(){return[variable()];},d:['ceylon.language','ChainedIterator','$at','iter']};}};
    $$chainedIterator.$prop$getIter$457.get=function(){return iter$457};
    $$chainedIterator.more$458_=true;
    $$chainedIterator.$prop$getMore$458={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:ChainedIterator,$an:function(){return[variable()];},d:['ceylon.language','ChainedIterator','$at','more']};}};
    $$chainedIterator.$prop$getMore$458.get=function(){return more$458};
    return $$chainedIterator;
}
ChainedIterator.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'first',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Element$ChainedIterator',Absent$Iterable:{t:Null}}},$an:function(){return[];}},{$nm:'second',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Other$ChainedIterator',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Element$ChainedIterator:{'var':'out'},Other$ChainedIterator:{'var':'out'}},satisfies:[{t:Iterator,a:{Element$Iterator:{t:'u', l:['Element$ChainedIterator','Other$ChainedIterator']}}}],$an:function(){return[doc(String$("An [[Iterator]] that returns the elements of two\n[[Iterable]]s, as if they were chained together.",97)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.chain)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),by([String$("Enrique Zamudio",15)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}}))];},d:['ceylon.language','ChainedIterator']};};
function $init$ChainedIterator(){
    if(ChainedIterator.$$===undefined){
        initTypeProto(ChainedIterator,'ceylon.language::ChainedIterator',Basic,$init$Iterator());
        (function($$chainedIterator){
            defineAttr($$chainedIterator,'iter$457',function(){return this.iter$457_;},function(iter$459){return this.iter$457_=iter$459;},function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:'u', l:['Element$ChainedIterator','Other$ChainedIterator']}}},$cont:ChainedIterator,$an:function(){return[variable()];},d:['ceylon.language','ChainedIterator','$at','iter']};});
            defineAttr($$chainedIterator,'more$458',function(){return this.more$458_;},function(more$460){return this.more$458_=more$460;},function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:ChainedIterator,$an:function(){return[variable()];},d:['ceylon.language','ChainedIterator','$at','more']};});
            $$chainedIterator.next=function next(){
                var $$chainedIterator=this;
                var e$461=$$chainedIterator.iter$457.next();
                function setE$461(e$462){return e$461=e$462;};
                var f$463;
                if(isOfType((f$463=e$461),{t:Finished})){
                    if($$chainedIterator.more$458){
                        $$chainedIterator.iter$457=$$chainedIterator.second$456.iterator();
                        $$chainedIterator.more$458=false;
                        e$461=$$chainedIterator.iter$457.next();
                    }
                }
                return e$461;
            };$$chainedIterator.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$ChainedIterator','Other$ChainedIterator',{t:Finished}]},$ps:[],$cont:ChainedIterator,$an:function(){return[shared(),actual()];},d:['ceylon.language','ChainedIterator','$m','next']};};
            defineAttr($$chainedIterator,'first$455',function(){return this.first$455_;},undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$ChainedIterator',Absent$Iterable:{t:Null}}},$cont:ChainedIterator,d:['ceylon.language','ChainedIterator','$at','first']};});
            defineAttr($$chainedIterator,'second$456',function(){return this.second$456_;},undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Other$ChainedIterator',Absent$Iterable:{t:Null}}},$cont:ChainedIterator,d:['ceylon.language','ChainedIterator','$at','second']};});
        })(ChainedIterator.$$.prototype);
    }
    return ChainedIterator;
}
exports.$init$ChainedIterator=$init$ChainedIterator;
$init$ChainedIterator();
function Entry(key,item,$$targs$$,$$entry){
    $init$Entry();
    if($$entry===undefined)$$entry=new Entry.$$;
    set_type_args($$entry,$$targs$$);
    $$entry.key_=key;
    $$entry.item_=item;
    $Object($$entry);
    $$entry.$prop$getKey={$crtmm$:function(){return{mod:$CCMM$,$t:'Key$Entry',$cont:Entry,$an:function(){return[doc(String$("The key used to access the entry.",33)),shared()];},d:['ceylon.language','Entry','$at','key']};}};
    $$entry.$prop$getKey.get=function(){return key};
    $$entry.$prop$getItem={$crtmm$:function(){return{mod:$CCMM$,$t:'Item$Entry',$cont:Entry,$an:function(){return[doc(String$("The value associated with the key.",34)),shared()];},d:['ceylon.language','Entry','$at','item']};}};
    $$entry.$prop$getItem.get=function(){return item};
    $$entry.$prop$getPair={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Key$Entry'},{$t:'Item$Entry'}]},$cont:Entry,$an:function(){return[doc(String$("A pair (2 element tuple) with the key and\nitem of this entry.",61)),shared()];},d:['ceylon.language','Entry','$at','pair']};}};
    $$entry.$prop$getPair.get=function(){return pair};
    $$entry.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Entry,$an:function(){return[doc(String$("Returns a description of the entry in the form \n`key->item`.",60)),shared(),actual()];},d:['ceylon.language','Entry','$at','string']};}};
    $$entry.$prop$getString.get=function(){return string};
    return $$entry;
}
Entry.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},$ps:[{$nm:'key',$mt:'prm',$t:'Key$Entry',$an:function(){return[doc("The key used to access the entry."),shared()];}},{$nm:'item',$mt:'prm',$t:'Item$Entry',$an:function(){return[doc("The value associated with the key."),shared()];}}],$tp:{Key$Entry:{'var':'out','satisfies':[{t:$Object}]},Item$Entry:{'var':'out','satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("A pair containing a _key_ and an associated value called \nthe _item_. Used primarily to represent the elements of a \n[[Map]]. The type `Entry<Key,Item>` may be abbreviated \n`Key->Item`. An instance of `Entry` may be constructed \nusing the `->` operator:\n\n    String->Person entry = person.name->person;",302)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared(),$final()];},d:['ceylon.language','Entry']};};
exports.Entry=Entry;
function $init$Entry(){
    if(Entry.$$===undefined){
        initTypeProto(Entry,'ceylon.language::Entry',$init$$Object());
        (function($$entry){
            defineAttr($$entry,'key',function(){return this.key_;},undefined,function(){return{mod:$CCMM$,$t:'Key$Entry',$cont:Entry,$an:function(){return[doc(String$("The key used to access the entry.",33)),shared()];},d:['ceylon.language','Entry','$at','key']};});
            defineAttr($$entry,'item',function(){return this.item_;},undefined,function(){return{mod:$CCMM$,$t:'Item$Entry',$cont:Entry,$an:function(){return[doc(String$("The value associated with the key.",34)),shared()];},d:['ceylon.language','Entry','$at','item']};});
            defineAttr($$entry,'pair',function(){
                var $$entry=this;
                return Tuple($$entry.key,Tuple($$entry.item,getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:$$entry.$$targs$$.Item$Entry,Element$Tuple:$$entry.$$targs$$.Item$Entry}),{Rest$Tuple:{t:'T', l:[$$entry.$$targs$$.Item$Entry]},First$Tuple:$$entry.$$targs$$.Key$Entry,Element$Tuple:{t:'u', l:[$$entry.$$targs$$.Key$Entry,$$entry.$$targs$$.Item$Entry]}});
            },undefined,function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Key$Entry'},{$t:'Item$Entry'}]},$cont:Entry,$an:function(){return[doc(String$("A pair (2 element tuple) with the key and\nitem of this entry.",61)),shared()];},d:['ceylon.language','Entry','$at','pair']};});
            $$entry.equals=function equals(that$464){
                var $$entry=this;
                var that$465;
                if(isOfType((that$465=that$464),{t:Entry,a:{Item$Entry:{t:$Object},Key$Entry:{t:$Object}}})){
                    return ($$entry.key.equals(that$465.key)&&$$entry.item.equals(that$465.item));
                }else {
                    return false;
                }
            };$$entry.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'that',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Entry,$an:function(){return[doc(String$("Determines if this entry is equal to the given entry. \nTwo entries are equal if they have the same key and \nthe same value.",123)),shared(),actual()];},d:['ceylon.language','Entry','$m','equals']};};
            defineAttr($$entry,'hash',function(){
                var $$entry=this;
                return (31).plus($$entry.key.hash).times((31)).plus($$entry.item.hash);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Entry,$an:function(){return[shared(),actual()];},d:['ceylon.language','Entry','$at','hash']};});
            defineAttr($$entry,'string',function(){
                var $$entry=this;
                return StringBuilder([$$entry.key.string,String$("->",2),$$entry.item.string]).string;
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Entry,$an:function(){return[doc(String$("Returns a description of the entry in the form \n`key->item`.",60)),shared(),actual()];},d:['ceylon.language','Entry','$at','string']};});
        })(Entry.$$.prototype);
    }
    return Entry;
}
exports.$init$Entry=$init$Entry;
$init$Entry();
function Comparable($$targs$$,$$comparable){
    set_type_args($$comparable,$$targs$$);
}
Comparable.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Comparable:{'var':'in','satisfies':[{t:Comparable,a:{Other$Comparable:'Other$Comparable'}}]}},of:['Other$Comparable'],$an:function(){return[doc(String$("The general contract for values whose magnitude can be \ncompared. `Comparable` imposes a total ordering upon\ninstances of any type that satisfies the interface.\n\nIf a type `T` satisfies `Comparable<T>`, then instances \nof `T` may be compared using the comparison operators\n`<`, `>`, `<=`, `>=`.\n\n    assert (x>=0.0);\n\nA _ternary comparison_ is useful for asserting lower and \nupper bounds.\n\n    assert (0.0<=x<1.0);\n\nFinally, the _compare_ operator `<=>` may be used to \nproduce an instance of [[Comparison]].\n\n    switch (x<=>y)\n    case (equal) {\n        print(\"same same\");\n    }\n    case (smaller) {\n        print(\"x smaller\");\n    }\n    case (larger) {\n        print(\"y smaller\");\n    }\n\nThe total order of a type must be consistent with the \ndefinition of equality for the type. That is, there are \nthree mutually exclusive possibilities:\n\n- `x<y`,\n- `x>y`, or\n- `x==y`\n\n(These possibilities are expressed by the enumerated\ninstances [[smaller]], [[larger]], and [[equal]] of\n`Comparison`.)",996)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Comparable']};};
exports.Comparable=Comparable;
function $init$Comparable(){
    if(Comparable.$$===undefined){
        initTypeProtoI(Comparable,'ceylon.language::Comparable');
        (function($$comparable){
            $$comparable.compare={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Comparison},$ps:[{$nm:'other',$mt:'prm',$t:'Other$Comparable',$an:function(){return[];}}],$cont:Comparable,$an:function(){return[doc("Compares this value with the given value. \nImplementations must respect the constraints that: \n\n- `x==y` if and only if `x<=>y == equal` \n   (consistency with `equals()`), \n- if `x>y` then `y<x` (symmetry), and \n- if `x>y` and `y>z` then `x>z` (transitivity)."),see("equals"),shared(),formal()];},d:['ceylon.language','Comparable','$m','compare']};}};$$comparable.largerThan=function (other$466){
                var $$comparable=this;
                return ($$comparable.compare(other$466)===getLarger());
            };
            $$comparable.largerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'other',$mt:'prm',$t:'Other$Comparable',$an:function(){return[];}}],$cont:Comparable,$an:function(){return[doc(String$("Determines if this value is strictly larger than the \ngiven value.",66)),shared(),$default()];},d:['ceylon.language','Comparable','$m','largerThan']};};
            $$comparable.smallerThan=function (other$467){
                var $$comparable=this;
                return ($$comparable.compare(other$467)===getSmaller());
            };
            $$comparable.smallerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'other',$mt:'prm',$t:'Other$Comparable',$an:function(){return[];}}],$cont:Comparable,$an:function(){return[doc(String$("Determines if this value is strictly smaller than the \ngiven value.",67)),shared(),$default()];},d:['ceylon.language','Comparable','$m','smallerThan']};};
            $$comparable.notSmallerThan=function (other$468){
                var $$comparable=this;
                return (!($$comparable.compare(other$468)===getSmaller()));
            };
            $$comparable.notSmallerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'other',$mt:'prm',$t:'Other$Comparable',$an:function(){return[];}}],$cont:Comparable,$an:function(){return[doc(String$("Determines if this value is larger than or equal to the \ngiven value.",69)),shared(),$default()];},d:['ceylon.language','Comparable','$m','notSmallerThan']};};
            $$comparable.notLargerThan=function (other$469){
                var $$comparable=this;
                return (!($$comparable.compare(other$469)===getLarger()));
            };
            $$comparable.notLargerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'other',$mt:'prm',$t:'Other$Comparable',$an:function(){return[];}}],$cont:Comparable,$an:function(){return[doc(String$("Determines if this value is smaller than or equal to \nthe given value.",70)),shared(),$default()];},d:['ceylon.language','Comparable','$m','notLargerThan']};};
        })(Comparable.$$.prototype);
    }
    return Comparable;
}
exports.$init$Comparable=$init$Comparable;
$init$Comparable();
function Invertable($$targs$$,$$invertable){
    Summable({Other$Summable:$$targs$$.Other$Invertable},$$invertable);
    set_type_args($$invertable,$$targs$$);
}
Invertable.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Invertable:{'satisfies':[{t:Invertable,a:{Other$Invertable:'Other$Invertable'}}]}},satisfies:[{t:Summable,a:{Other$Summable:'Other$Invertable'}}],of:['Other$Invertable'],$an:function(){return[doc(String$("Abstraction of [[additive|Summable]] numeric types which \nsupport a unary operation `-x` producing the additive\ninverse of `x`. Every `Invertable` type supports a binary \nsubtraction operation `x-y`.\n\n    Integer negativeOne = -1;\n    Float delta = x-y;\n\nA concrete class that implements this interface should be a \nmathematical _group_. That is, it should have an additive \nidentity, denoted `0`, and satisfy:\n\n- `0+x == x+0 == x`\n- `x + -x == 0`\n\nSubtraction must be defined so that it is consistent with\nthe additive inverse:\n\n- `x - y == x + -y`",549)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Integer),$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Float)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ClassDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Invertable']};};
exports.Invertable=Invertable;
function $init$Invertable(){
    if(Invertable.$$===undefined){
        initTypeProtoI(Invertable,'ceylon.language::Invertable',$init$Summable());
        (function($$invertable){
            $$invertable.$prop$getNegativeValue={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Invertable',$cont:Invertable,$an:function(){return[doc(String$("The additive inverse of this value.",35)),shared(),formal()];},d:['ceylon.language','Invertable','$at','negativeValue']};}};
            $$invertable.$prop$getPositiveValue={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Invertable',$cont:Invertable,$an:function(){return[doc(String$("This value.",11)),deprecated(),shared(),formal()];},d:['ceylon.language','Invertable','$at','positiveValue']};}};
            $$invertable.minus=function (other$470){
                var $$invertable=this;
                return $$invertable.plus(other$470.negativeValue);
            };
            $$invertable.minus.$crtmm$=function(){return{mod:$CCMM$,$t:'Other$Invertable',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Invertable',$an:function(){return[];}}],$cont:Invertable,$an:function(){return[doc(String$("The difference between this number and the given \nnumber. Must produce the value `x + -y`.",90)),shared(),$default()];},d:['ceylon.language','Invertable','$m','minus']};};
        })(Invertable.$$.prototype);
    }
    return Invertable;
}
exports.$init$Invertable=$init$Invertable;
$init$Invertable();
function Summable($$targs$$,$$summable){
    set_type_args($$summable,$$targs$$);
}
Summable.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Summable:{'satisfies':[{t:Summable,a:{Other$Summable:'Other$Summable'}}]}},of:['Other$Summable'],$an:function(){return[doc(String$("Abstraction of types which support a binary addition\noperator `x + y`. For [[numeric types|Numeric]], this is\njust familiar numeric addition. For [[String]], it is\nstring concatenation.\n    \n    Integer next = current + 1;\n    String helloWorld = \"hello\" + \" \" + \"world\";\n\nA concrete class that implements this interface should be \na mathematical _semigroup_. That is, the addition \noperation should be associative, satisfying:\n\n- `(x+y)+z == x+(y+z)`\n\nA `Summable` type might be a _monoid_, that is, a \nsemigroup with an additive identity element, usually \ndenoted `0`, but this is not required. For example:\n\n- `String` is a monoid with identity element `\"\"`, \n- `Float` is a monoid with identity element `0.0`, and \n- `Integer` is a monoid with identity element `0`.\n\nFor any monoid, the addition operation must satisfy:\n\n- `x + 0 == x`",839)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),String),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Numeric)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:InterfaceDeclaration$meta$declaration}]}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Summable']};};
exports.Summable=Summable;
function $init$Summable(){
    if(Summable.$$===undefined){
        initTypeProtoI(Summable,'ceylon.language::Summable');
        (function($$summable){
            $$summable.plus={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Summable',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Summable',$an:function(){return[];}}],$cont:Summable,$an:function(){return[doc("The result of adding the given value to this value. \nThis operation should never perform any kind of \nmutation upon either the receiving value or the \nargument value."),shared(),formal()];},d:['ceylon.language','Summable','$m','plus']};}};
        })(Summable.$$.prototype);
    }
    return Summable;
}
exports.$init$Summable=$init$Summable;
$init$Summable();
function Ordinal($$targs$$,$$ordinal){
    set_type_args($$ordinal,$$targs$$);
}
Ordinal.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Ordinal:{'var':'out','satisfies':[{t:Ordinal,a:{Other$Ordinal:'Other$Ordinal'}}]}},of:['Other$Ordinal'],$an:function(){return[doc(String$("Abstraction of ordinal types, that is, types with \n[[successor]] and [[predecessor]] operations, including \n[[Integer]] and other [[Integral]] numeric types.\n[[Character]] is also considered an ordinal type.\n\nThe _increment_ operator `++` and _decrement_ operator `--`\nare defined for all `Ordinal` types.\n\n    function increment() {\n        count++;\n    }\n\nAn `Ordinal` type may be used to generate a [[Range]], \nusing the span or segment operators.\n\nThe _span_ operator `..` accepts the first and last values \nof the range.\n\n    0..5    // [0, 1, 2, 3, 4, 5]\n    0..0    // [0]\n\nIf the last value is smaller than the first value, the\nrange is reversed.\n\n    5..0    // [5, 4, 3, 2, 1, 0]\n    0..-5   // [0, -1, -2, -3, -4, -5]\n\nThe _segment_ operator `:` accepts the first index and \nmaximum length of the subrange.\n\n    0:5     // [0, 1, 2, 3, 4]\n\nIf the length is nonpositive, the subrange is empty.\n\n    0:0     // []\n    5:0     // []\n    0:-5    // []\n\nMost `Ordinal` types are also [[Enumerable]].",1005)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Character),$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Integer),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Integral),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Enumerable),$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Range)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:InterfaceDeclaration$meta$declaration}]}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Ordinal']};};
exports.Ordinal=Ordinal;
function $init$Ordinal(){
    if(Ordinal.$$===undefined){
        initTypeProtoI(Ordinal,'ceylon.language::Ordinal');
        (function($$ordinal){
            $$ordinal.$prop$getSuccessor={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Ordinal',$cont:Ordinal,$an:function(){return[doc(String$("The successor of this value.",28)),shared(),formal()];},d:['ceylon.language','Ordinal','$at','successor']};}};
            $$ordinal.$prop$getPredecessor={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Ordinal',$cont:Ordinal,$an:function(){return[doc(String$("The predecessor of this value.",30)),shared(),formal()];},d:['ceylon.language','Ordinal','$at','predecessor']};}};
        })(Ordinal.$$.prototype);
    }
    return Ordinal;
}
exports.$init$Ordinal=$init$Ordinal;
$init$Ordinal();
function Enumerable($$targs$$,$$enumerable){
    Ordinal({Other$Ordinal:$$targs$$.Other$Enumerable},$$enumerable);
    set_type_args($$enumerable,$$targs$$);
}
Enumerable.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Enumerable:{'var':'out','satisfies':[{t:Enumerable,a:{Other$Enumerable:'Other$Enumerable'}}]}},satisfies:[{t:Ordinal,a:{Other$Ordinal:'Other$Enumerable'}}],of:['Other$Enumerable'],$an:function(){return[doc(String$("Abstraction of [[ordinal types|Ordinal]] whose instances \ncan be mapped to the [[integers|Integer]] or to a range of \nintegers.",127)),shared()];},d:['ceylon.language','Enumerable']};};
exports.Enumerable=Enumerable;
function $init$Enumerable(){
    if(Enumerable.$$===undefined){
        initTypeProtoI(Enumerable,'ceylon.language::Enumerable',$init$Ordinal());
        (function($$enumerable){
            $$enumerable.$prop$getIntegerValue={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Enumerable,$an:function(){return[doc(String$("The corresponding integer. The implementation must\nsatisfy these constraints:\n\n    (x.successor).integerValue = x.integerValue+1\n    (x.predecessor).integerValue = x.integerValue-1\n\nfor every instance `x` of the enumerable type.",228)),shared(),formal()];},d:['ceylon.language','Enumerable','$at','integerValue']};}};
        })(Enumerable.$$.prototype);
    }
    return Enumerable;
}
exports.$init$Enumerable=$init$Enumerable;
$init$Enumerable();
function Numeric($$targs$$,$$numeric){
    Invertable({Other$Invertable:$$targs$$.Other$Numeric},$$numeric);
    set_type_args($$numeric,$$targs$$);
}
Numeric.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Numeric:{'satisfies':[{t:Numeric,a:{Other$Numeric:'Other$Numeric'}}]}},satisfies:[{t:Invertable,a:{Other$Invertable:'Other$Numeric'}}],of:['Other$Numeric'],$an:function(){return[doc(String$("Abstraction of numeric types with the usual binary \noperations:\n\n- addition, `x + y`, \n- subtraction, `x - y`, \n- multiplication, `x * y`, and \n- division, `x / y`, along with \n- additive inverse `-x`.\n\nA concrete class which implements this interface should be\na mathematical _ring_. That is:\n\n- both addition, `+`, and multiplication, `*`, should be\n  associative and commutative,\n- there should be additive and multiplicative identities,\n  denoted `0` and `1` respectively, satisfying `x+0 == x`\n  and `x*1 == x`,\n- every instance `x` should have an additive inverse `-x`, \n  satisfying `x + -x == 0`, and\n- multiplication should distribute over addition, \n  satisfying `x*(y+z) == x*y + x*z`.\n\nIt is preferred, but not required, that the class be a\nmathematical _field_. That is, in addition to the above:\n\n- every instance `x` such that `x!=0` should have a \n  multiplicative inverse `1/x`, satisfying `x * 1/x == 1`. \n\nFor numeric types which are not fields, for example, \n[[Integer]], there is still a division operation, which is\nunderstood to produce a [[remainder|Integral.remainder]].\nThe division operation should satisfy:\n\n- `x*y / y == x`\n\nfor any instance `y` other than `0`.\n\nFor numeric types which _are_ fields, division never\nproduces a remainder, and division should additionally \nsatisfy:\n\n- `x/y * y == x`\n\nfor any instance `y` other than `0`.\n\nSome numeric types, for example complex numbers, do not \nhave a [[total order|Comparable]]. Numeric types with a \ntotal order also satisfy [[Scalar]].",1517)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Scalar)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Numeric']};};
exports.Numeric=Numeric;
function $init$Numeric(){
    if(Numeric.$$===undefined){
        initTypeProtoI(Numeric,'ceylon.language::Numeric',$init$Invertable());
        (function($$numeric){
            $$numeric.times={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Numeric',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Numeric',$an:function(){return[];}}],$cont:Numeric,$an:function(){return[doc("The product of this number and the given number."),shared(),formal()];},d:['ceylon.language','Numeric','$m','times']};}};$$numeric.divided={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Numeric',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Numeric',$an:function(){return[];}}],$cont:Numeric,$an:function(){return[doc("The quotient obtained by dividing this number by the \ngiven number. For integral numeric types, this \noperation results in a \n[[remainder|Integral.remainder]].\n\nWhen the given number is `0`, the additive identity,\nthe behavior depends on the numeric type:\n\n- For some numeric types, including [[Integer]], \n  division by `0` results in an exception.\n- For others, including [[Float]], it results in a \n  special value of the type, for example, [[infinity]]."),see("Integral"),shared(),formal()];},d:['ceylon.language','Numeric','$m','divided']};}};
        })(Numeric.$$.prototype);
    }
    return Numeric;
}
exports.$init$Numeric=$init$Numeric;
$init$Numeric();
function Scalar($$targs$$,$$scalar){
    Numeric({Other$Numeric:$$targs$$.Other$Scalar},$$scalar);
    Comparable({Other$Comparable:$$targs$$.Other$Scalar},$$scalar);
    Number($$scalar);
    set_type_args($$scalar,$$targs$$);
}
Scalar.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Scalar:{'satisfies':[{t:Scalar,a:{Other$Scalar:'Other$Scalar'}}]}},satisfies:[{t:Numeric,a:{Other$Numeric:'Other$Scalar'}},{t:Comparable,a:{Other$Comparable:'Other$Scalar'}},{t:Number$}],of:['Other$Scalar'],$an:function(){return[doc(String$("Abstraction of [[numeric|Numeric]] types representing \nscalar values with a natural [[total order|Comparable]], \nincluding the built-in numeric types [[Integer]] and \n[[Float]].\n\n`Scalar`s have a well-defined [[magnitude]], which should\nsatisfy:\n\n- `x.magnitude >= 0`\n- `x.magnitude == 0` iff `x==0`\n\nwhere `0` is the additive identity of the numeric type.",356)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Integer),$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Float)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ClassDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Scalar']};};
exports.Scalar=Scalar;
function $init$Scalar(){
    if(Scalar.$$===undefined){
        initTypeProtoI(Scalar,'ceylon.language::Scalar',$init$Numeric(),$init$Comparable(),$init$Number$());
        (function($$scalar){
            $$scalar.$prop$getMagnitude={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Scalar',$cont:Scalar,$an:function(){return[doc(String$("The magnitude of this number. Must satisfy: \n\n- `magnitude>=0` \n- `magnitude==0` iff `this==0`\n\nwhere `0` is the additive identity.",131)),shared(),actual(),formal()];},d:['ceylon.language','Scalar','$at','magnitude']};}};
            $$scalar.$prop$getPositive={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Scalar,$an:function(){return[doc(String$("Determine if the number is strictly positive, that is, \nif `this>0`, where `0` is the additive identity.",104)),shared(),actual(),formal()];},d:['ceylon.language','Scalar','$at','positive']};}};
            $$scalar.$prop$getNegative={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Scalar,$an:function(){return[doc(String$("Determine if the number is strictly negative, that is, \nif `this<0`, where `0` is the additive identity.",104)),shared(),actual(),formal()];},d:['ceylon.language','Scalar','$at','negative']};}};
            $$scalar.$prop$getFractionalPart={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Scalar',$cont:Scalar,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language','Scalar','$at','fractionalPart']};}};
            $$scalar.$prop$getWholePart={$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Scalar',$cont:Scalar,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language','Scalar','$at','wholePart']};}};
            $$scalar.timesInteger={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Scalar',$ps:[{$nm:'integer',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Scalar,$an:function(){return[doc("The result of multiplying this number by the given \n[[Integer]]."),shared(),formal()];},d:['ceylon.language','Scalar','$m','timesInteger']};}};$$scalar.plusInteger={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Scalar',$ps:[{$nm:'integer',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Scalar,$an:function(){return[doc("The result of adding this number to the given \n[[Integer]]."),shared(),formal()];},d:['ceylon.language','Scalar','$m','plusInteger']};}};
        })(Scalar.$$.prototype);
    }
    return Scalar;
}
exports.$init$Scalar=$init$Scalar;
$init$Scalar();
function Exponentiable($$targs$$,$$exponentiable){
    Numeric({Other$Numeric:$$targs$$.This$Exponentiable},$$exponentiable);
    set_type_args($$exponentiable,$$targs$$);
}
Exponentiable.$crtmm$=function(){return{mod:$CCMM$,$tp:{This$Exponentiable:{'satisfies':[{t:Exponentiable,a:{Other$Exponentiable:'Other$Exponentiable',This$Exponentiable:'This$Exponentiable'}}]},Other$Exponentiable:{'satisfies':[{t:Numeric,a:{Other$Numeric:'Other$Exponentiable'}}]}},satisfies:[{t:Numeric,a:{Other$Numeric:'This$Exponentiable'}}],of:['This$Exponentiable'],$an:function(){return[doc(String$("Abstraction of [[numeric types|Numeric]] that may be raised \nto a power using the _exponentiation_ operator ^.\n\n    function exp(Float x) => e^x;\n\nThe exponentiation operation should obey the usual index\nlaws, including:\n\n- `x^0 = 1`,\n- `x^1 = x`,\n- `x^(-1) = 1/x` \n- `x^(m+n) = x^m * x^n`\n- `x^(m-n) = x^m / x^n`\n- `x^(m*n) = (x^m)^n`\n- `(x*y)^n = x^n * y^n`\n\nwhere `0` is the additive identity, and `1` is the \nmultiplicative identity.\n\nNote that in general, the type of the exponent may be \ndifferent to the numeric type which is exponentiated. For\nexample, a `Rational` number class might be a subtype of\n`Exponentiable<Rational,Integer>`, thus accepting only\nwhole-number exponents.",687)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Integer),$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Float)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ClassDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','Exponentiable']};};
exports.Exponentiable=Exponentiable;
function $init$Exponentiable(){
    if(Exponentiable.$$===undefined){
        initTypeProtoI(Exponentiable,'ceylon.language::Exponentiable',$init$Numeric());
        (function($$exponentiable){
            $$exponentiable.power={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'This$Exponentiable',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Exponentiable',$an:function(){return[];}}],$cont:Exponentiable,$an:function(){return[doc("The result of raising this number to the given power."),shared(),formal()];},d:['ceylon.language','Exponentiable','$m','power']};}};
        })(Exponentiable.$$.prototype);
    }
    return Exponentiable;
}
exports.$init$Exponentiable=$init$Exponentiable;
$init$Exponentiable();
function Integral($$targs$$,$$integral){
    Scalar({Other$Scalar:$$targs$$.Other$Integral},$$integral);
    Enumerable({Other$Enumerable:$$targs$$.Other$Integral},$$integral);
    set_type_args($$integral,$$targs$$);
}
Integral.$crtmm$=function(){return{mod:$CCMM$,$tp:{Other$Integral:{'satisfies':[{t:Integral,a:{Other$Integral:'Other$Integral'}}]}},satisfies:[{t:Scalar,a:{Other$Scalar:'Other$Integral'}},{t:Enumerable,a:{Other$Enumerable:'Other$Integral'}}],of:['Other$Integral'],$an:function(){return[doc(String$("Abstraction of integral numeric types. That is, types \nwith no fractional part, including [[Integer]].\n\nThe division operation for integral numeric types results \nin a remainder. Therefore, integral numeric types have \n[[an operation|remainder]], denoted by the _remainder_\noperator `%`, to determine the remainder of any division \noperation.\n\n    if (n%2==0) {\n        print(\"Even!\");\n    }\n\nDivision and the remainder operation should satisfy: \n\n- `x == (x/y)*y + x%y`\n\nfor any instance `y` other than `0`.\n\n`Integral` numeric types are also [[Ordinal]], so ranges \nof integral values may be produced using the \n[[segment and span operators|Ordinal]].\n    \n    // Iterate from 0 to 100 inclusive\n    for (i in 0..100) {\n        print(\"The square of ``i`` is ``i^2``\");\n    }\n    \n    // Iterate all indices of the array, \n    // from 0 to array.size-1\n    for (i in 0:array.size) {\n        print(array[i]);\n    }",914)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Integer)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ClassDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Integral']};};
exports.Integral=Integral;
function $init$Integral(){
    if(Integral.$$===undefined){
        initTypeProtoI(Integral,'ceylon.language::Integral',$init$Scalar(),$init$Enumerable());
        (function($$integral){
            $$integral.remainder={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Other$Integral',$ps:[{$nm:'other',$mt:'prm',$t:'Other$Integral',$an:function(){return[];}}],$cont:Integral,$an:function(){return[doc("The remainder, after dividing this number by the given \nnumber."),see("Numeric.divided"),shared(),formal()];},d:['ceylon.language','Integral','$m','remainder']};}};$$integral.$prop$getZero={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Integral,$an:function(){return[doc(String$("Determine if the number is zero.",32)),shared(),formal()];},d:['ceylon.language','Integral','$at','zero']};}};
            $$integral.$prop$getUnit={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Integral,$an:function(){return[doc(String$("Determine if the number is one.",31)),shared(),formal()];},d:['ceylon.language','Integral','$at','unit']};}};
            $$integral.divides=function (other$471){
                var $$integral=this;
                return other$471.remainder($$integral).zero;
            };
            $$integral.divides.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'other',$mt:'prm',$t:'Other$Integral',$an:function(){return[];}}],$cont:Integral,$an:function(){return[doc(String$("Determine if this number is a factor of the given \nnumber.",58)),shared()];},d:['ceylon.language','Integral','$m','divides']};};
        })(Integral.$$.prototype);
    }
    return Integral;
}
exports.$init$Integral=$init$Integral;
$init$Integral();
function Scalable($$targs$$,$$scalable){
    set_type_args($$scalable,$$targs$$);
}
Scalable.$crtmm$=function(){return{mod:$CCMM$,$tp:{Scale$Scalable:{'var':'in','satisfies':[{t:Numeric,a:{Other$Numeric:'Scale$Scalable'}}]},Value$Scalable:{'var':'out','satisfies':[{t:Scalable,a:{Value$Scalable:'Value$Scalable',Scale$Scalable:'Scale$Scalable'}}]}},of:['Value$Scalable'],$an:function(){return[doc(String$("Abstract supertype of types that support scaling by a \nnumeric factor. Examples of such types include vectors and \nmatrices. The _scale_ operator `**` accepts a scale factor\nas its first operand, and an instance of `Scalable` as its\nsecond operand.\n\n    Vector scaled = 2.0 ** Vector(x,y,z);\n\nConcrete classes which implement this interface should\nsatisfy:\n\n- `x == 1**x`\n- `a ** (b ** x) == a*b ** x`\n\nwhere `1` denotes the multiplicative identity of the \nnumeric scaling type.\n\nConcrete classes which implement this interface are\nencouraged to also satisfy [[Invertable]], in which case, \nthe following identity should be satisfied:\n\n- `-x == -1**x`\n\nConcrete classes which implement this interface and which\nalso satisfy [[Summable]] should satisfy:\n\n- `x+x == 2**x`\n- `a ** (x+y) == a**x + a**y`\n\nThe [[scaling type|Scale]] must be a [[numeric|Numeric]]\ntype, but is not required to be [[Scalar]], since a complex\nnumber scaling type should be allowed.",956)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Scalable']};};
exports.Scalable=Scalable;
function $init$Scalable(){
    if(Scalable.$$===undefined){
        initTypeProtoI(Scalable,'ceylon.language::Scalable');
        (function($$scalable){
            $$scalable.scale={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Value$Scalable',$ps:[{$nm:'scalar',$mt:'prm',$t:'Scale$Scalable',$an:function(){return[];}}],$cont:Scalable,$an:function(){return[doc("Scale this value by the given scale factor."),shared(),formal()];},d:['ceylon.language','Scalable','$m','scale']};}};
        })(Scalable.$$.prototype);
    }
    return Scalable;
}
exports.$init$Scalable=$init$Scalable;
$init$Scalable();
function OverflowException($$overflowException){
    $init$OverflowException();
    if($$overflowException===undefined)$$overflowException=new OverflowException.$$;
    Exception(String$("Numeric overflow",16),null,$$overflowException);
    return $$overflowException;
}
OverflowException.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Exception},$ps:[],$an:function(){return[doc(String$("Thrown when a mathematical operation caused a number to \noverflow from its bounds, or when a numeric narrowing\nconversion fails because the number cannot be represented\nwithin the bounds of the narrower type.\n\nNote that:\n\n- arithmetic operations on [[Integer]]s result in _silent_ \n  overflow or loss of precision, and thus never \n  produce an `OverflowException`, and, \n- likewise, arithmetic operations on [[Float]] produce the \n  value [[infinity]] instead of overflowing.",475)),shared()];},d:['ceylon.language','OverflowException']};};
exports.OverflowException=OverflowException;
function $init$OverflowException(){
    if(OverflowException.$$===undefined){
        initTypeProto(OverflowException,'ceylon.language::OverflowException',$init$Exception());
    }
    return OverflowException;
}
exports.$init$OverflowException=$init$OverflowException;
$init$OverflowException();
function InitializationError(description$472,$$initializationError){
    $init$InitializationError();
    if($$initializationError===undefined)$$initializationError=new InitializationError.$$;
    $$initializationError.description$472_=description$472;
    AssertionError($$initializationError.description$472,$$initializationError);
    return $$initializationError;
}
InitializationError.$crtmm$=function(){return{mod:$CCMM$,'super':{t:AssertionError},$ps:[{$nm:'description',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$an:function(){return[doc(String$("[[Assertion failure|AssertionError]] that occurs when a \nvalue reference could not be initialized, including when:\n\n- a toplevel value could not be initialized due to \n  recursive dependencies upon other toplevel values, \n- an uninitialized [[late]] value is evaluated, \n- an initialized `late` but non-`variable` value is\n  reassigned.",336)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),late)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','InitializationError']};};
exports.InitializationError=InitializationError;
function $init$InitializationError(){
    if(InitializationError.$$===undefined){
        initTypeProto(InitializationError,'ceylon.language::InitializationError',$init$AssertionError());
        (function($$initializationError){
            defineAttr($$initializationError,'description$472',function(){return this.description$472_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:InitializationError,d:['ceylon.language','InitializationError','$at','description']};});
        })(InitializationError.$$.prototype);
    }
    return InitializationError;
}
exports.$init$InitializationError=$init$InitializationError;
$init$InitializationError();
function Resource($$resource){
    $$resource.textContent$defs$encoding=function(encoding$473){return String$("UTF-8",5);};
    $$resource.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Resource,$an:function(){return[shared(),actual()];},d:['ceylon.language','Resource','$at','string']};}};
    $$resource.$prop$getString.get=function(){return string};
}
Resource.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("An abstraction for resources inside a module.\nA resource is a file contained within a module,\nwhich is accessible at runtime.",125)),by([String$("Enrique Zamudio",15)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','Resource']};};
exports.Resource=Resource;
function $init$Resource(){
    if(Resource.$$===undefined){
        initTypeProtoI(Resource,'ceylon.language::Resource');
        (function($$resource){
            defineAttr($$resource,'name',function(){
                var $$resource=this;
                var pos$474=$$resource.uri.lastOccurrence(Character(47,true));
                $prop$getPos$474={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},d:['ceylon.language','Resource','$at','name','$at','pos']};}};
                $prop$getPos$474.get=function(){return pos$474};
                var pos$475;
                if((pos$475=pos$474)!==null){
                    return $$resource.uri.spanFrom(pos$475.plus((1)));
                }
                return $$resource.uri;
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Resource,$an:function(){return[doc(String$("The name of the resource; usually the filename.",47)),shared(),$default()];},d:['ceylon.language','Resource','$at','name']};});$$resource.$prop$getSize={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Resource,$an:function(){return[doc(String$("The size of the resource, in bytes.",35)),shared(),formal()];},d:['ceylon.language','Resource','$at','size']};}};
            $$resource.$prop$getUri={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Resource,$an:function(){return[doc(String$("The full path to the resource.",30)),shared(),formal()];},d:['ceylon.language','Resource','$at','uri']};}};
            $$resource.textContent={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$ps:[{$nm:'encoding',$mt:'prm',$def:1,$t:{t:String$},$an:function(){return[];}}],$cont:Resource,$an:function(){return[doc("Retrieves the contents of the resource as a String,\nusing the specified encoding."),shared(),formal()];},d:['ceylon.language','Resource','$m','textContent']};}};defineAttr($$resource,'string',function(){
                var $$resource=this;
                return StringBuilder([String$("Resource[",9),$$resource.uri.string,String$("]",1)]).string;
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Resource,$an:function(){return[shared(),actual()];},d:['ceylon.language','Resource','$at','string']};});
        })(Resource.$$.prototype);
    }
    return Resource;
}
exports.$init$Resource=$init$Resource;
$init$Resource();
function Set($$targs$$,$$set){
    Collection({Element$Collection:$$targs$$.Element$Set},$$set);
    set_type_args($$set,$$targs$$);
}
Set.$crtmm$=function(){return{mod:$CCMM$,$tp:{Element$Set:{'var':'out','satisfies':[{t:$Object}]}},satisfies:[{t:Collection,a:{Element$Collection:'Element$Set'}}],$an:function(){return[doc(String$("A collection of unique elements.\n\nA `Set` is a [[Collection]] of its elements.\n\nSets may be the subject of the binary union, intersection, \nand complement operators `|`, `&`, and `~`.\n\n    value kids = girls|boys; \n\nElements are compared for equality using [[Object.equals]] \nor [[Comparable.compare]]. An element may occur at most \nonce in a set.",347)),shared()];},d:['ceylon.language','Set']};};
exports.Set=Set;
function $init$Set(){
    if(Set.$$===undefined){
        initTypeProtoI(Set,'ceylon.language::Set',$init$Collection());
        (function($$set){
            $$set.contains=function (element$476){
                var $$set=this;
                return $$set.getT$all()['ceylon.language::Collection'].$$.prototype.contains.call(this,element$476);
            };
            $$set.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Set,$an:function(){return[doc(String$("The fundamental operation for `Set`s. Determines if the\ngiven value belongs to this set.",88)),shared(),actual(),$default()];},d:['ceylon.language','Set','$m','contains']};};
            $$set.superset=function superset(set$477){
                var $$set=this;
                var it$478 = set$477.iterator();
                var element$479;while((element$479=it$478.next())!==getFinished()){
                    if((!$$set.contains(element$479))){
                        return false;
                    }
                }
                if(getFinished() === element$479){
                    return true;
                }
            };$$set.superset.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:{t:$Object}}},$an:function(){return[];}}],$cont:Set,$an:function(){return[doc(String$("Determines if this set is a superset of the given \n`Set`, that is, if this set contains all of the \nelements in the given set.",126)),shared(),$default()];},d:['ceylon.language','Set','$m','superset']};};
            $$set.subset=function subset(set$480){
                var $$set=this;
                var it$481 = $$set.iterator();
                var element$482;while((element$482=it$481.next())!==getFinished()){
                    if((!set$480.contains(element$482))){
                        return false;
                    }
                }
                if(getFinished() === element$482){
                    return true;
                }
            };$$set.subset.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:{t:$Object}}},$an:function(){return[];}}],$cont:Set,$an:function(){return[doc(String$("Determines if this set is a subset of the given `Set`, \nthat is, if the given set contains all of the elements \nin this set.",124)),shared(),$default()];},d:['ceylon.language','Set','$m','subset']};};
            $$set.equals=function equals(that$483){
                var $$set=this;
                var that$484;
                if(isOfType((that$484=that$483),{t:Set,a:{Element$Set:{t:$Object}}})&&(that$484.size==$$set.size)){
                    var it$485 = $$set.iterator();
                    var element$486;while((element$486=it$485.next())!==getFinished()){
                        if((!that$484.contains(element$486))){
                            return false;
                        }
                    }
                    if(getFinished() === element$486){
                        return true;
                    }
                }
                return false;
            };$$set.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'that',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Set,$an:function(){return[doc(String$("Two `Set`s are considered equal if they have the same \nsize and if every element of the first set is also an \nelement of the second set, as determined by \n[[contains]]. Equivalently, a set is equal to a second \nset if it is both a subset and a superset of the second\nset.",271)),shared(),actual(),$default()];},d:['ceylon.language','Set','$m','equals']};};
            defineAttr($$set,'hash',function(){
                var $$set=this;
                var hashCode$487=(0);
                function setHashCode$487(hashCode$488){return hashCode$487=hashCode$488;};
                $prop$getHashCode$487={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$an:function(){return[variable()];},d:['ceylon.language','Set','$at','hash','$at','hashCode']};}};
                $prop$getHashCode$487.get=function(){return hashCode$487};
                $prop$getHashCode$487.set=setHashCode$487;
                if(setHashCode$487.$crtmm$===undefined)setHashCode$487.$crtmm$=$prop$getHashCode$487.$crtmm$;
                var it$489 = $$set.iterator();
                var elem$490;while((elem$490=it$489.next())!==getFinished()){
                    (hashCode$487=hashCode$487.plus(elem$490.hash));
                }
                return hashCode$487;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Set,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Set','$at','hash']};});$$set.union={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:{t:'u', l:['Element$Set','Other$union']}}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$union'}},$an:function(){return[];}}],$cont:Set,$tp:{Other$union:{'satisfies':[{t:$Object}]}},$an:function(){return[doc("Returns a new `Set` containing all the elements of this \nset and all the elements of the given `Set`."),shared(),formal()];},d:['ceylon.language','Set','$m','union']};}};$$set.intersection={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:{t:'i', l:['Element$Set','Other$intersection']}}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$intersection'}},$an:function(){return[];}}],$cont:Set,$tp:{Other$intersection:{'satisfies':[{t:$Object}]}},$an:function(){return[doc("Returns a new `Set` containing only the elements that \nare present in both this set and the given `Set`."),shared(),formal()];},d:['ceylon.language','Set','$m','intersection']};}};$$set.exclusiveUnion={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:{t:'u', l:['Element$Set','Other$exclusiveUnion']}}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$exclusiveUnion'}},$an:function(){return[];}}],$cont:Set,$tp:{Other$exclusiveUnion:{'satisfies':[{t:$Object}]}},$an:function(){return[doc("Returns a new `Set` containing only the elements \ncontained in either this set or the given `Set`, but no \nelement contained in both sets."),shared(),formal()];},d:['ceylon.language','Set','$m','exclusiveUnion']};}};$$set.complement={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:'Element$Set'}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$complement'}},$an:function(){return[];}}],$cont:Set,$tp:{Other$complement:{'satisfies':[{t:$Object}]}},$an:function(){return[doc("Returns a new `Set` containing all the elements in this \nset that are not contained in the given `Set`."),shared(),formal()];},d:['ceylon.language','Set','$m','complement']};}};$$set.clone={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:'Element$Set'}},$ps:[],$cont:Set,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language','Set','$m','clone']};}};
        })(Set.$$.prototype);
    }
    return Set;
}
exports.$init$Set=$init$Set;
$init$Set();
function emptySet$491($$targs$$){
    var $$emptySet=new emptySet$491.$$;
    $$emptySet.$$targs$$=$$targs$$;
    $Object($$emptySet);
    Set({Element$Set:{t:Nothing}},$$emptySet);
    return $$emptySet;
};emptySet$491.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},satisfies:[{t:Set,a:{Element$Set:{t:Nothing}}}],$an:function(){return[doc("An immutable [[Set]] with no elements."),shared()];},d:['ceylon.language','emptySet']};};
function $init$emptySet$491(){
    if(emptySet$491.$$===undefined){
        initTypeProto(emptySet$491,'ceylon.language::emptySet',$init$$Object(),$init$Set());
        (function($$emptySet){
            $$emptySet.union=function (set$492,$$$mptypes){
                var $$emptySet=this;
                return set$492;
            };
            $$emptySet.union.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:'Other$union'}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$union'}},$an:function(){return[];}}],$cont:emptySet$491,$tp:{Other$union:{'satisfies':[{t:$Object}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','union']};};
            $$emptySet.intersection=function (set$493,$$$mptypes){
                var $$emptySet=this;
                return getEmptySet();
            };
            $$emptySet.intersection.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:{t:Nothing}}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$intersection'}},$an:function(){return[];}}],$cont:emptySet$491,$tp:{Other$intersection:{'satisfies':[{t:$Object}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','intersection']};};
            $$emptySet.exclusiveUnion=function (set$494,$$$mptypes){
                var $$emptySet=this;
                return set$494;
            };
            $$emptySet.exclusiveUnion.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:'Other$exclusiveUnion'}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$exclusiveUnion'}},$an:function(){return[];}}],$cont:emptySet$491,$tp:{Other$exclusiveUnion:{'satisfies':[{t:$Object}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','exclusiveUnion']};};
            $$emptySet.complement=function (set$495,$$$mptypes){
                var $$emptySet=this;
                return getEmptySet();
            };
            $$emptySet.complement.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:{t:Nothing}}},$ps:[{$nm:'set',$mt:'prm',$t:{t:Set,a:{Element$Set:'Other$complement'}},$an:function(){return[];}}],$cont:emptySet$491,$tp:{Other$complement:{'satisfies':[{t:$Object}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','complement']};};
            $$emptySet.subset=function (set$496){
                var $$emptySet=this;
                return true;
            };$$emptySet.superset=function (set$497){
                var $$emptySet=this;
                return set$497.empty;
            };$$emptySet.clone=function (){
                var $$emptySet=this;
                return getEmptySet();
            };$$emptySet.iterator=function (){
                var $$emptySet=this;
                return getEmptyIterator();
            };defineAttr($$emptySet,'size',function(){
                var $$emptySet=this;
                return (0);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$at','size']};});
            defineAttr($$emptySet,'empty',function(){
                var $$emptySet=this;
                return true;
            },undefined,function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$at','empty']};});
            $$emptySet.contains=function (element$498){
                var $$emptySet=this;
                return false;
            };$$emptySet.containsAny=function (elements$499){
                var $$emptySet=this;
                return false;
            };$$emptySet.containsEvery=function (elements$500){
                var $$emptySet=this;
                return false;
            };$$emptySet.count=function (selecting$501){
                var $$emptySet=this;
                return (0);
            };
            $$emptySet.count.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','count']};};
            $$emptySet.$map=function (collecting$502,$$$mptypes){
                var $$emptySet=this;
                return getEmptySet();
            };
            $$emptySet.$map.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:{t:Nothing}}},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$map',$an:function(){return[];}}],$cont:emptySet$491,$tp:{Result$map:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','map']};};
            $$emptySet.$filter=function (selecting$503){
                var $$emptySet=this;
                return getEmptySet();
            };
            $$emptySet.$filter.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Set,a:{Element$Set:{t:Nothing}}},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','filter']};};
            $$emptySet.fold=function (initial$504,accumulating$505,$$$mptypes){
                var $$emptySet=this;
                return initial$504;
            };
            $$emptySet.fold.$crtmm$=function(){return{mod:$CCMM$,$t:'Result$fold',$ps:[{$nm:'initial',$mt:'prm',$t:'Result$fold',$an:function(){return[];}},{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$fold',$an:function(){return[];}}],$cont:emptySet$491,$tp:{Result$fold:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','fold']};};
            $$emptySet.find=function (selecting$506){
                var $$emptySet=this;
                return null;
            };
            $$emptySet.find.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Null},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','find']};};
            $$emptySet.collect=function (collecting$507,$$$mptypes){
                var $$emptySet=this;
                return getEmpty();
            };
            $$emptySet.collect.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$collect',$an:function(){return[];}}],$cont:emptySet$491,$tp:{Result$collect:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','collect']};};
            $$emptySet.select=function (selecting$508){
                var $$emptySet=this;
                return getEmpty();
            };
            $$emptySet.select.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','select']};};
            $$emptySet.any=function (selecting$509){
                var $$emptySet=this;
                return false;
            };
            $$emptySet.any.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','any']};};
            $$emptySet.$every=function (selecting$510){
                var $$emptySet=this;
                return false;
            };
            $$emptySet.$every.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptySet$491,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptySet','$m','every']};};
            $$emptySet.skipping=function (skip$511){
                var $$emptySet=this;
                return getEmptySet();
            };$$emptySet.taking=function (take$512){
                var $$emptySet=this;
                return getEmptySet();
            };$$emptySet.by=function (step$513){
                var $$emptySet=this;
                return getEmptySet();
            };
        })(emptySet$491.$$.prototype);
    }
    return emptySet$491;
}
exports.$init$emptySet$491=$init$emptySet$491;
$init$emptySet$491();
var emptySet$514;
function getEmptySet(){
    if(emptySet$514===undefined){emptySet$514=$init$emptySet$491()({Element$Set:{t:Nothing}});emptySet$514.$crtmm$=getEmptySet.$crtmm$;}
    return emptySet$514;
}
exports.getEmptySet=getEmptySet;
getEmptySet.$crtmm$=function(){return{mod:$CCMM$,$t:{t:emptySet$491},$an:function(){return[doc(String$("An immutable [[Set]] with no elements.",38)),shared()];},d:['ceylon.language','emptySet']};};
$prop$getEmptySet={get:getEmptySet,$crtmm$:getEmptySet.$crtmm$};
exports.$prop$getEmptySet=$prop$getEmptySet;
function Range(first,last,$$targs$$,$$range){
    $init$Range();
    if($$range===undefined)$$range=new Range.$$;
    set_type_args($$range,$$targs$$);
    $$range.first_=first;
    $$range.last_=last;
    $Object($$range);
    Sequence({Element$Sequence:$$targs$$.Element$Range},$$range);
    $$range.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Range',$cont:Range,$an:function(){return[doc(String$("The start of the range.",23)),shared(),actual()];},d:['ceylon.language','Range','$at','first']};}};
    $$range.$prop$getFirst.get=function(){return first};
    $$range.$prop$getLast={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Range',$cont:Range,$an:function(){return[doc(String$("The end of the range.",21)),shared(),actual()];},d:['ceylon.language','Range','$at','last']};}};
    $$range.$prop$getLast.get=function(){return last};
    $$range.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$at','string']};}};
    $$range.$prop$getString.get=function(){return string};
    $$range.$prop$getDecreasing={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Range,$an:function(){return[doc(String$("Determines if the range is decreasing.",38)),shared()];},d:['ceylon.language','Range','$at','decreasing']};}};
    $$range.$prop$getDecreasing.get=function(){return decreasing};
    $$range.$prop$getLastIndex={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Range,$an:function(){return[doc(String$("The index of the end of the range.",34)),shared(),actual()];},d:['ceylon.language','Range','$at','lastIndex']};}};
    $$range.$prop$getLastIndex.get=function(){return lastIndex};
    $$range.$prop$getReversed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$cont:Range,$an:function(){return[doc(String$("Reverse this range, returning a new range.",42)),shared(),actual()];},d:['ceylon.language','Range','$at','reversed']};}};
    $$range.$prop$getReversed.get=function(){return reversed};
    $$range.$prop$getCoalesced={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$cont:Range,$an:function(){return[doc(String$("Returns the range itself, since a Range cannot\ncontain nulls.",61)),shared(),actual()];},d:['ceylon.language','Range','$at','coalesced']};}};
    $$range.$prop$getCoalesced.get=function(){return coalesced};
    $$range.$prop$getSequence={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$cont:Range,$an:function(){return[doc(String$("Returns this range.",19)),shared(),actual()];},d:['ceylon.language','Range','$at','sequence']};}};
    $$range.$prop$getSequence.get=function(){return sequence};
    return $$range;
}
Range.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},$ps:[{$nm:'first',$mt:'prm',$t:'Element$Range',$an:function(){return[doc("The start of the range."),shared(),actual()];}},{$nm:'last',$mt:'prm',$t:'Element$Range',$an:function(){return[doc("The end of the range."),shared(),actual()];}}],$tp:{Element$Range:{'satisfies':[{t:Ordinal,a:{Other$Ordinal:'Element$Range'}},{t:Comparable,a:{Other$Comparable:'Element$Range'}}]}},satisfies:[{t:Sequence,a:{Element$Sequence:'Element$Range'}}],$an:function(){return[doc(String$("A range of totally ordered, ordinal values generated by two \nendpoints which are both [[Ordinal]] and [[Comparable]]: \n[[first]] and [[last]].\n\n- If `first<last` the range is increasing,\n- if `first>last`, the range is decreasing, or\n- otherwise, if `first==last`, the range contains exactly\n  one value.\n\nA range is always nonempty, containing at least one value.\n\nA range is a [[Sequence]].\n\nThe _span_ operator `..` is an abbreviation for `Range`\ninstantiation.\n\n    for (i in min..max) { ... }\n    if (char in \'A\'..\'Z\') { ... }\n\nSee [[the documentation for `Ordinal`|Ordinal]] for more\ninformation about the span and segment operators.",639)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Ordinal)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared(),$final()];},d:['ceylon.language','Range']};};
exports.Range=Range;
function $init$Range(){
    if(Range.$$===undefined){
        initTypeProto(Range,'ceylon.language::Range',$init$$Object(),$init$Sequence());
        (function($$range){
            defineAttr($$range,'first',function(){return this.first_;},undefined,function(){return{mod:$CCMM$,$t:'Element$Range',$cont:Range,$an:function(){return[doc(String$("The start of the range.",23)),shared(),actual()];},d:['ceylon.language','Range','$at','first']};});
            defineAttr($$range,'last',function(){return this.last_;},undefined,function(){return{mod:$CCMM$,$t:'Element$Range',$cont:Range,$an:function(){return[doc(String$("The end of the range.",21)),shared(),actual()];},d:['ceylon.language','Range','$at','last']};});
            defineAttr($$range,'string',function(){
                var $$range=this;
                return $$range.first.string.plus(String$("..",2)).plus($$range.last.string);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$at','string']};});
            defineAttr($$range,'decreasing',function(){
                var $$range=this;
                return $$range.last.compare($$range.first).equals(getSmaller());
            },undefined,function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Range,$an:function(){return[doc(String$("Determines if the range is decreasing.",38)),shared()];},d:['ceylon.language','Range','$at','decreasing']};});
            $$range.next$515=function (x$516){
                var $$range=this;
                return (opt$517=($$range.decreasing?x$516.predecessor:null),opt$517!==null&&opt$517!==undefined?opt$517:x$516.successor);
            };
            $$range.next$515.$crtmm$=function(){return{mod:$CCMM$,$t:'Element$Range',$ps:[{$nm:'x',$mt:'prm',$t:'Element$Range',$an:function(){return[];}}],$cont:Range,d:['ceylon.language','Range','$m','next']};};
            defineAttr($$range,'size',function(){
                var $$range=this;
                var last$518;
                var first$519;
                if(isOfType((last$518=$$range.last),{t:Enumerable,a:{Other$Enumerable:{t:Anything}}})&&isOfType((first$519=$$range.first),{t:Enumerable,a:{Other$Enumerable:{t:Anything}}})){
                    return last$518.integerValue.minus(first$519.integerValue).magnitude.plus((1));
                }else {
                    var size$520=(1);
                    function setSize$520(size$521){return size$520=size$521;};
                    $prop$getSize$520={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$an:function(){return[variable()];},d:['ceylon.language','Range','$at','size','$at','size']};}};
                    $prop$getSize$520.get=function(){return size$520};
                    $prop$getSize$520.set=setSize$520;
                    if(setSize$520.$crtmm$===undefined)setSize$520.$crtmm$=$prop$getSize$520.$crtmm$;
                    var current$522=$$range.first;
                    function setCurrent$522(current$523){return current$522=current$523;};
                    $prop$getCurrent$522={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Range',$an:function(){return[variable()];},d:['ceylon.language','Range','$at','size','$at','current']};}};
                    $prop$getCurrent$522.get=function(){return current$522};
                    $prop$getCurrent$522.set=setCurrent$522;
                    if(setCurrent$522.$crtmm$===undefined)setCurrent$522.$crtmm$=$prop$getCurrent$522.$crtmm$;
                    while((!current$522.equals($$range.last))){
                        (oldsize$524=size$520,size$520=oldsize$524.successor,oldsize$524);
                        var oldsize$524;
                        current$522=$$range.next$515(current$522);
                    }
                    return size$520;
                }
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Range,$an:function(){return[doc(String$("The nonzero number of elements in the range.",44)),shared(),actual()];},d:['ceylon.language','Range','$at','size']};});defineAttr($$range,'lastIndex',function(){
                var $$range=this;
                return $$range.size.minus((1));
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Range,$an:function(){return[doc(String$("The index of the end of the range.",34)),shared(),actual()];},d:['ceylon.language','Range','$at','lastIndex']};});
            defineAttr($$range,'rest',function(){
                var $$range=this;
                if(($$range.size==(1))){
                    return getEmpty();
                }
                var n$525=$$range.next$515($$range.first);
                $prop$getN$525={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Range',d:['ceylon.language','Range','$at','rest','$at','n']};}};
                $prop$getN$525.get=function(){return n$525};
                return Range(n$525,$$range.last,{Element$Range:$$range.$$targs$$.Element$Range});
            },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$Range'}},$cont:Range,$an:function(){return[doc(String$("The rest of the range, without the start of the\nrange.",54)),shared(),actual()];},d:['ceylon.language','Range','$at','rest']};});$$range.$get=function $get(n$526){
                var $$range=this;
                var index$527=(0);
                function setIndex$527(index$528){return index$527=index$528;};
                var x$529=$$range.first;
                function setX$529(x$530){return x$529=x$530;};
                while((index$527<n$526)){
                    if(x$529.equals($$range.last)){
                        return null;
                    }else {
                        (index$527=index$527.successor);
                        x$529=$$range.next$515(x$529);
                    }
                }
                return x$529;
            };$$range.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Range']},$ps:[{$nm:'n',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[doc(String$("The element of the range that occurs `n` values after\nthe start of the range. Note that this operation \nis inefficient for large ranges.",136)),shared(),actual()];},d:['ceylon.language','Range','$m','get']};};
            $$range.iterator=function iterator(){
                var $$range=this;
                function iterator$531($$targs$$){
                    var $$iterator$531=new iterator$531.$$;
                    $$iterator$531.$$outer=$$range;
                    $$iterator$531.$$targs$$=$$targs$$;
                    Iterator({Element$Iterator:$$range.$$targs$$.Element$Range},$$iterator$531);
                    $$iterator$531.current$532_=$$range.first;
                    $$iterator$531.$prop$getCurrent$532={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Range',{t:Finished}]},$cont:iterator$531,$an:function(){return[variable()];},d:['ceylon.language','Range','$m','iterator','$o','iterator','$at','current']};}};
                    $$iterator$531.$prop$getCurrent$532.get=function(){return current$532};
                    return $$iterator$531;
                };iterator$531.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Range'}}],d:['ceylon.language','Range','$m','iterator','$o','iterator']};};
                function $init$iterator$531(){
                    if(iterator$531.$$===undefined){
                        initTypeProto(iterator$531,'ceylon.language::Range.iterator.iterator',Basic,$init$Iterator());
                        (function($$iterator$531){
                            defineAttr($$iterator$531,'current$532',function(){return this.current$532_;},function(current$533){return this.current$532_=current$533;},function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Range',{t:Finished}]},$cont:iterator$531,$an:function(){return[variable()];},d:['ceylon.language','Range','$m','iterator','$o','iterator','$at','current']};});
                            $$iterator$531.next=function next(){
                                var $$iterator$531=this;
                                var result$534=$$iterator$531.current$532;
                                var curr$535;
                                if(!isOfType((curr$535=$$iterator$531.current$532),{t:Finished})){
                                    if((opt$536=($$range.decreasing?(curr$535.compare($$range.last)!==getLarger()):null),opt$536!==null&&opt$536!==undefined?opt$536:(curr$535.compare($$range.last)!==getSmaller()))){
                                        $$iterator$531.current$532=getFinished();
                                    }else {
                                        $$iterator$531.current$532=$$range.next$515(curr$535);
                                    }
                                    var opt$536;
                                }
                                return result$534;
                            };$$iterator$531.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Range',{t:Finished}]},$ps:[],$cont:iterator$531,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','iterator','$o','iterator','$m','next']};};
                            defineAttr($$iterator$531,'string',function(){
                                var $$iterator$531=this;
                                return String$("RangeIterator",13);
                            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:iterator$531,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','iterator','$o','iterator','$at','string']};});
                        })(iterator$531.$$.prototype);
                    }
                    return iterator$531;
                }
                $init$iterator$531();
                var iterator$537;
                function getIterator$537(){
                    if(iterator$537===undefined){iterator$537=$init$iterator$531()({Element$Iterator:$$range.$$targs$$.Element$Range});iterator$537.$crtmm$=getIterator$537.$crtmm$;}
                    return iterator$537;
                }
                getIterator$537.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$531},d:['ceylon.language','Range','$m','iterator','$o','iterator']};};
                $prop$getIterator$537={get:getIterator$537,$crtmm$:getIterator$537.$crtmm$};
                return getIterator$537();
            };$$range.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Range'}},$ps:[],$cont:Range,$an:function(){return[doc(String$("An iterator for the elements of the range.",42)),shared(),actual()];},d:['ceylon.language','Range','$m','iterator']};};
            $$range.by=function by(step$538){
                var $$range=this;
                //assert at Range.ceylon (119:8-120:25)
                if(!((step$538>(0)))) {throw wrapexc(AssertionException("step size must be greater than zero: \'step > 0\' at Range.ceylon (120:15-120:24)"),'119:8-120:25','Range.ceylon'); }
                if((step$538==(1))){
                    return $$range;
                }else {
                    var first$539;
                    var last$540;
                    if(isOfType((first$539=$$range.first),{t:Integer})&&isOfType((last$540=$$range.last),{t:Integer})){
                        //assert at Range.ceylon (125:12-126:56)
                        var result$541;
                        if(!(isOfType((result$541=IntegerRangeBy(first$539,last$540,step$538)),{t:Iterable,a:{Element$Iterable:$$range.$$targs$$.Element$Range,Absent$Iterable:{t:Nothing}}}))) {throw wrapexc(AssertionException("Assertion failed: \'is {Element+} result \n                    = IntegerRangeBy(first, last, step)\' at Range.ceylon (125:19-126:55)"),'125:12-126:56','Range.ceylon'); }
                        return result$541;
                    }else {
                        return $$range.getT$all()['ceylon.language::Iterable'].$$.prototype.by.call(this,step$538);
                    }
                }
            };$$range.by.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$Range',Absent$Iterable:{t:Nothing}}},$ps:[{$nm:'step',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','by']};};
            $$range.shifted=function shifted(shift$542){
                var $$range=this;
                if((shift$542==(0))){
                    return $$range;
                }else {
                    var first$543;
                    var last$544;
                    if(isOfType((first$543=$$range.first),{t:Integer})&&isOfType((last$544=$$range.last),{t:Integer})){
                        //assert at Range.ceylon (147:12-148:46)
                        var shifted$545;
                        if(!(isOfType((shifted$545=Range(first$543.plus(shift$542),last$544.plus(shift$542),{Element$Range:{t:Integer}})),{t:Range,a:{Element$Range:$$range.$$targs$$.Element$Range}}))) {throw wrapexc(AssertionException("Assertion failed: \'is Range<Element> shifted \n                    = first+shift..last+shift\' at Range.ceylon (147:19-148:45)"),'147:12-148:46','Range.ceylon'); }
                        return shifted$545;
                    }else {
                        var shiftedFirst$546=$$range.first;
                        function setShiftedFirst$546(shiftedFirst$547){return shiftedFirst$546=shiftedFirst$547;};
                        var shiftedLast$548=$$range.last;
                        function setShiftedLast$548(shiftedLast$549){return shiftedLast$548=shiftedLast$549;};
                        var max$550=shift$542.magnitude;
                        var increasing$551=shift$542.positive;
                        var count$552=(0);
                        function setCount$552(count$553){return count$552=count$553;};
                        while(((oldcount$554=count$552,count$552=oldcount$554.successor,oldcount$554)<max$550)){
                            if(increasing$551){
                                (oldshiftedFirst$555=shiftedFirst$546,shiftedFirst$546=oldshiftedFirst$555.successor,oldshiftedFirst$555);
                                var oldshiftedFirst$555;
                                (oldshiftedLast$556=shiftedLast$548,shiftedLast$548=oldshiftedLast$556.successor,oldshiftedLast$556);
                                var oldshiftedLast$556;
                            }else {
                                (oldshiftedFirst$557=shiftedFirst$546,shiftedFirst$546=oldshiftedFirst$557.predecessor,oldshiftedFirst$557);
                                var oldshiftedFirst$557;
                                (oldshiftedLast$558=shiftedLast$548,shiftedLast$548=oldshiftedLast$558.predecessor,oldshiftedLast$558);
                                var oldshiftedLast$558;
                            }
                        }
                        var oldcount$554;
                        return Range(shiftedFirst$546,shiftedLast$548,{Element$Range:$$range.$$targs$$.Element$Range});
                    }
                }
            };$$range.shifted.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$ps:[{$nm:'shift',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[doc(String$("Returns a range of the same length and type as this\nrange, with its endpoints shifted by the given number \nof elements, where:\n\n- a negative [[shift]] measures \n  [[decrements|Ordinal.predecessor]], and \n- a positive `shift` measures \n  [[increments|Ordinal.successor]].",270)),shared()];},d:['ceylon.language','Range','$m','shifted']};};
            $$range.count=function count(selecting$559){
                var $$range=this;
                var e$560=$$range.first;
                function setE$560(e$561){return e$560=e$561;};
                var c$562=(0);
                function setC$562(c$563){return c$562=c$563;};
                while($$range.containsElement(e$560)){
                    if(selecting$559(e$560)){
                        (oldc$564=c$562,c$562=oldc$564.successor,oldc$564);
                        var oldc$564;
                    }
                    e$560=$$range.next$515(e$560);
                }
                return c$562;
            };$$range.count.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','count']};};
            $$range.contains=function contains(element$565){
                var $$range=this;
                var element$566;
                if(isOfType((element$566=element$565),$$range.$$targs$$.Element$Range)){
                    return $$range.containsElement(element$566);
                }else {
                    return false;
                }
            };$$range.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Range,$an:function(){return[doc(String$("Determines if this range includes the given object.",51)),shared(),actual()];},d:['ceylon.language','Range','$m','contains']};};
            $$range.occurs=function occurs(element$567){
                var $$range=this;
                var element$568;
                if(isOfType((element$568=element$567),$$range.$$targs$$.Element$Range)){
                    return $$range.containsElement(element$568);
                }else {
                    return false;
                }
            };$$range.occurs.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:Range,$an:function(){return[doc(String$("Determines if this range includes the given value.",50)),shared(),actual()];},d:['ceylon.language','Range','$m','occurs']};};
            $$range.containsElement=function (x$569){
                var $$range=this;
                return (opt$570=($$range.decreasing?((x$569.compare($$range.first)!==getLarger())&&(x$569.compare($$range.last)!==getSmaller())):null),opt$570!==null&&opt$570!==undefined?opt$570:((x$569.compare($$range.first)!==getSmaller())&&(x$569.compare($$range.last)!==getLarger())));
            };
            $$range.containsElement.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'x',$mt:'prm',$t:'Element$Range',$an:function(){return[];}}],$cont:Range,$an:function(){return[doc(String$("Determines if the range includes the given value.",49)),shared()];},d:['ceylon.language','Range','$m','containsElement']};};
            $$range.includes=function includes(sublist$571){
                var $$range=this;
                var sublist$572;
                if(isOfType((sublist$572=sublist$571),{t:Range,a:{Element$Range:$$range.$$targs$$.Element$Range}})){
                    return $$range.includesRange(sublist$572);
                }else {
                    return $$range.getT$all()['ceylon.language::List'].$$.prototype.includes.call(this,sublist$571);
                }
            };$$range.includes.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:List,a:{Element$List:{t:Anything}}},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','includes']};};
            $$range.includesRange=function includesRange(sublist$573){
                var $$range=this;
                return ((tmpvar$574=sublist$573.first,tmpvar$574.compare($$range.first)!==getSmaller()&&tmpvar$574.compare($$range.last)!==getLarger())&&(tmpvar$575=sublist$573.last,tmpvar$575.compare($$range.first)!==getSmaller()&&tmpvar$575.compare($$range.last)!==getLarger()));
            };$$range.includesRange.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'sublist',$mt:'prm',$t:{t:Range,a:{Element$Range:'Element$Range'}},$an:function(){return[];}}],$cont:Range,$an:function(){return[doc(String$("Determines if this range includes the given range.",50)),shared()];},d:['ceylon.language','Range','$m','includesRange']};};
            $$range.equals=function equals(that$576){
                var $$range=this;
                var that$577;
                if(isOfType((that$577=that$576),{t:Range,a:{Element$Range:{t:$Object}}})){
                    return (that$577.first.equals($$range.first)&&that$577.last.equals($$range.last));
                }else {
                    return $$range.getT$all()['ceylon.language::List'].$$.prototype.equals.call(this,that$576);
                }
            };$$range.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'that',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Range,$an:function(){return[doc(String$("Determines if two ranges are the same by comparing\ntheir endpoints.",67)),shared(),actual()];},d:['ceylon.language','Range','$m','equals']};};
            $$range.clone=function (){
                var $$range=this;
                return $$range;
            };
            $$range.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$ps:[],$cont:Range,$an:function(){return[doc(String$("Returns the range itself, since ranges are \nimmutable.",54)),shared(),actual()];},d:['ceylon.language','Range','$m','clone']};};
            $$range.segment=function segment(from$578,length$579){
                var $$range=this;
                if(((length$579<=(0))||(from$578>$$range.lastIndex))){
                    return getEmpty();
                }
                var x$580=$$range.first;
                function setX$580(x$581){return x$580=x$581;};
                var i$582=(0);
                function setI$582(i$583){return i$582=i$583;};
                while(((oldi$584=i$582,i$582=oldi$584.successor,oldi$584)<from$578)){
                    x$580=$$range.next$515(x$580);
                }
                var oldi$584;
                var y$585=x$580;
                function setY$585(y$586){return y$585=y$586;};
                var j$587=(1);
                function setJ$587(j$588){return j$587=j$588;};
                while((((oldj$589=j$587,j$587=oldj$589.successor,oldj$589)<length$579)&&y$585.compare($$range.last).equals(getSmaller()))){
                    y$585=$$range.next$515(y$585);
                }
                var oldj$589;
                return Range(x$580,y$585,{Element$Range:$$range.$$targs$$.Element$Range});
            };$$range.segment.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Range,a:{Element$Range:'Element$Range'}},{t:Empty}]},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','segment']};};
            $$range.span=function span(from$590,to$591){
                var $$range=this;
                var toIndex$592=to$591;
                function setToIndex$592(toIndex$593){return toIndex$592=toIndex$593;};
                var fromIndex$594=from$590;
                function setFromIndex$594(fromIndex$595){return fromIndex$594=fromIndex$595;};
                if((toIndex$592<(0))){
                    if((fromIndex$594<(0))){
                        return getEmpty();
                    }
                    toIndex$592=(0);
                }else {
                    if((toIndex$592>$$range.lastIndex)){
                        if((fromIndex$594>$$range.lastIndex)){
                            return getEmpty();
                        }
                        toIndex$592=$$range.lastIndex;
                    }
                }
                if((fromIndex$594<(0))){
                    fromIndex$594=(0);
                }else {
                    if((fromIndex$594>$$range.lastIndex)){
                        fromIndex$594=$$range.lastIndex;
                    }
                }
                var x$596=$$range.first;
                function setX$596(x$597){return x$596=x$597;};
                var i$598=(0);
                function setI$598(i$599){return i$598=i$599;};
                while(((oldi$600=i$598,i$598=oldi$600.successor,oldi$600)<fromIndex$594)){
                    x$596=$$range.next$515(x$596);
                }
                var oldi$600;
                var y$601=$$range.first;
                function setY$601(y$602){return y$601=y$602;};
                var j$603=(0);
                function setJ$603(j$604){return j$603=j$604;};
                while(((oldj$605=j$603,j$603=oldj$605.successor,oldj$605)<toIndex$592)){
                    y$601=$$range.next$515(y$601);
                }
                var oldj$605;
                return Range(x$596,y$601,{Element$Range:$$range.$$targs$$.Element$Range});
            };$$range.span.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Range,a:{Element$Range:'Element$Range'}},{t:Empty}]},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'to',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','span']};};
            $$range.spanTo=function spanTo(to$606){
                var $$range=this;
                return (opt$607=((to$606<(0))?getEmpty():null),opt$607!==null&&opt$607!==undefined?opt$607:$$range.span((0),to$606));
                var opt$607;
            };$$range.spanTo.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Range,a:{Element$Range:'Element$Range'}},{t:Empty}]},$ps:[{$nm:'to',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','spanTo']};};
            $$range.spanFrom=function spanFrom(from$608){
                var $$range=this;
                return $$range.span(from$608,$$range.size);
            };$$range.spanFrom.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Range,a:{Element$Range:'Element$Range'}},{t:Empty}]},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','spanFrom']};};
            defineAttr($$range,'reversed',function(){
                var $$range=this;
                return Range($$range.last,$$range.first,{Element$Range:$$range.$$targs$$.Element$Range});
            },undefined,function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$cont:Range,$an:function(){return[doc(String$("Reverse this range, returning a new range.",42)),shared(),actual()];},d:['ceylon.language','Range','$at','reversed']};});
            $$range.skipping=function skipping(skip$609){
                var $$range=this;
                var x$610=(0);
                function setX$610(x$611){return x$610=x$611;};
                var e$612=$$range.first;
                function setE$612(e$613){return e$612=e$613;};
                while(((oldx$614=x$610,x$610=oldx$614.successor,oldx$614)<skip$609)){
                    e$612=$$range.next$515(e$612);
                }
                var oldx$614;
                return (opt$615=($$range.containsElement(e$612)?Range(e$612,$$range.last,{Element$Range:$$range.$$targs$$.Element$Range}):null),opt$615!==null&&opt$615!==undefined?opt$615:getEmpty());
                var opt$615;
            };$$range.skipping.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Range,a:{Element$Range:'Element$Range'}},{t:Empty}]},$ps:[{$nm:'skip',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','skipping']};};
            $$range.taking=function taking(take$616){
                var $$range=this;
                if((take$616==(0))){
                    return getEmpty();
                }
                var x$617=(0);
                function setX$617(x$618){return x$617=x$618;};
                var e$619=$$range.first;
                function setE$619(e$620){return e$619=e$620;};
                while(((x$617=x$617.successor)<take$616)){
                    e$619=$$range.next$515(e$619);
                }
                return (opt$621=($$range.containsElement(e$619)?Range($$range.first,e$619,{Element$Range:$$range.$$targs$$.Element$Range}):null),opt$621!==null&&opt$621!==undefined?opt$621:$$range);
                var opt$621;
            };$$range.taking.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Range,a:{Element$Range:'Element$Range'}},{t:Empty}]},$ps:[{$nm:'take',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Range,$an:function(){return[shared(),actual()];},d:['ceylon.language','Range','$m','taking']};};
            defineAttr($$range,'coalesced',function(){
                var $$range=this;
                return $$range;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$cont:Range,$an:function(){return[doc(String$("Returns the range itself, since a Range cannot\ncontain nulls.",61)),shared(),actual()];},d:['ceylon.language','Range','$at','coalesced']};});
            defineAttr($$range,'sequence',function(){
                var $$range=this;
                return $$range;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Range,a:{Element$Range:'Element$Range'}},$cont:Range,$an:function(){return[doc(String$("Returns this range.",19)),shared(),actual()];},d:['ceylon.language','Range','$at','sequence']};});
        })(Range.$$.prototype);
    }
    return Range;
}
exports.$init$Range=$init$Range;
$init$Range();
var opt$517,opt$570;
function IntegerRangeBy(first$622,last$623,step$624,$$integerRangeBy){
    $init$IntegerRangeBy();
    if($$integerRangeBy===undefined)$$integerRangeBy=new IntegerRangeBy.$$;
    $$integerRangeBy.$$targs$$={Element$Iterable:{t:Integer},Absent$Iterable:{t:Nothing}};
    $$integerRangeBy.first$622_=first$622;
    $$integerRangeBy.last$623_=last$623;
    $$integerRangeBy.step$624_=step$624;
    Iterable({Element$Iterable:{t:Integer},Absent$Iterable:{t:Nothing}},$$integerRangeBy);
    add_type_arg($$integerRangeBy,'Element$Iterable',{t:Integer});
    return $$integerRangeBy;
}
IntegerRangeBy.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'first',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'last',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'step',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],satisfies:[{t:Iterable,a:{Element$Iterable:{t:Integer},Absent$Iterable:{t:Nothing}}}],d:['ceylon.language','IntegerRangeBy']};};
function $init$IntegerRangeBy(){
    if(IntegerRangeBy.$$===undefined){
        initTypeProto(IntegerRangeBy,'ceylon.language::IntegerRangeBy',Basic,$init$Iterable());
        (function($$integerRangeBy){
            $$integerRangeBy.iterator=function iterator(){
                var $$integerRangeBy=this;
                function iterator$625($$targs$$){
                    var $$iterator$625=new iterator$625.$$;
                    $$iterator$625.$$outer=$$integerRangeBy;
                    $$iterator$625.$$targs$$=$$targs$$;
                    Iterator({Element$Iterator:{t:Integer}},$$iterator$625);
                    add_type_arg($$iterator$625,'Element$Iterator',{t:Integer});
                    $$iterator$625.current$626_=$$integerRangeBy.first$622;
                    $$iterator$625.$prop$getCurrent$626={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$625,$an:function(){return[variable()];},d:['ceylon.language','IntegerRangeBy','$m','iterator','$o','iterator','$at','current']};}};
                    $$iterator$625.$prop$getCurrent$626.get=function(){return current$626};
                    return $$iterator$625;
                };iterator$625.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:{t:Integer}}}],d:['ceylon.language','IntegerRangeBy','$m','iterator','$o','iterator']};};
                function $init$iterator$625(){
                    if(iterator$625.$$===undefined){
                        initTypeProto(iterator$625,'ceylon.language::IntegerRangeBy.iterator.iterator',Basic,$init$Iterator());
                        (function($$iterator$625){
                            defineAttr($$iterator$625,'current$626',function(){return this.current$626_;},function(current$627){return this.current$626_=current$627;},function(){return{mod:$CCMM$,$t:{t:Integer},$cont:iterator$625,$an:function(){return[variable()];},d:['ceylon.language','IntegerRangeBy','$m','iterator','$o','iterator','$at','current']};});
                            $$iterator$625.next=function next(){
                                var $$iterator$625=this;
                                if(($$integerRangeBy.last$623<$$integerRangeBy.first$622)){
                                    if(($$iterator$625.current$626<$$integerRangeBy.last$623)){
                                        return getFinished();
                                    }
                                    var result$628=$$iterator$625.current$626;
                                    ($$iterator$625.current$626=$$iterator$625.current$626.minus($$integerRangeBy.step$624));
                                    return result$628;
                                }else {
                                    if(($$iterator$625.current$626>$$integerRangeBy.last$623)){
                                        return getFinished();
                                    }
                                    var result$629=$$iterator$625.current$626;
                                    ($$iterator$625.current$626=$$iterator$625.current$626.plus($$integerRangeBy.step$624));
                                    return result$629;
                                }
                            };$$iterator$625.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Integer},{t:Finished}]},$ps:[],$cont:iterator$625,$an:function(){return[shared(),actual()];},d:['ceylon.language','IntegerRangeBy','$m','iterator','$o','iterator','$m','next']};};
                            defineAttr($$iterator$625,'string',function(){
                                var $$iterator$625=this;
                                return String$("IntegerRangeByIterator",22);
                            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:iterator$625,$an:function(){return[shared(),actual()];},d:['ceylon.language','IntegerRangeBy','$m','iterator','$o','iterator','$at','string']};});
                        })(iterator$625.$$.prototype);
                    }
                    return iterator$625;
                }
                $init$iterator$625();
                var iterator$630;
                function getIterator$630(){
                    if(iterator$630===undefined){iterator$630=$init$iterator$625()({Element$Iterator:{t:Integer}});iterator$630.$crtmm$=getIterator$630.$crtmm$;}
                    return iterator$630;
                }
                getIterator$630.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$625},d:['ceylon.language','IntegerRangeBy','$m','iterator','$o','iterator']};};
                $prop$getIterator$630={get:getIterator$630,$crtmm$:getIterator$630.$crtmm$};
                return getIterator$630();
            };$$integerRangeBy.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:Integer}}},$ps:[],$cont:IntegerRangeBy,$an:function(){return[shared(),actual()];},d:['ceylon.language','IntegerRangeBy','$m','iterator']};};
            defineAttr($$integerRangeBy,'first$622',function(){return this.first$622_;},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:IntegerRangeBy,d:['ceylon.language','IntegerRangeBy','$at','first']};});
            defineAttr($$integerRangeBy,'last$623',function(){return this.last$623_;},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:IntegerRangeBy,d:['ceylon.language','IntegerRangeBy','$at','last']};});
            defineAttr($$integerRangeBy,'step$624',function(){return this.step$624_;},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:IntegerRangeBy,d:['ceylon.language','IntegerRangeBy','$at','step']};});
        })(IntegerRangeBy.$$.prototype);
    }
    return IntegerRangeBy;
}
exports.$init$IntegerRangeBy=$init$IntegerRangeBy;
$init$IntegerRangeBy();
function Singleton(element$631,$$targs$$,$$singleton){
    $init$Singleton();
    if($$singleton===undefined)$$singleton=new Singleton.$$;
    set_type_args($$singleton,$$targs$$);
    $$singleton.element$631_=element$631;
    $Object($$singleton);
    Sequence({Element$Sequence:$$targs$$.Element$Singleton},$$singleton);
    $$singleton.$prop$getLastIndex={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Singleton,$an:function(){return[doc(String$("Returns `0`.",12)),shared(),actual()];},d:['ceylon.language','Singleton','$at','lastIndex']};}};
    $$singleton.$prop$getLastIndex.get=function(){return lastIndex};
    $$singleton.$prop$getSize={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Singleton,$an:function(){return[doc(String$("Returns `1`.",12)),shared(),actual()];},d:['ceylon.language','Singleton','$at','size']};}};
    $$singleton.$prop$getSize.get=function(){return size};
    $$singleton.$prop$getFirst={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Singleton',$cont:Singleton,$an:function(){return[doc(String$("Returns the element contained in this `Singleton`.",50)),shared(),actual()];},d:['ceylon.language','Singleton','$at','first']};}};
    $$singleton.$prop$getFirst.get=function(){return first};
    $$singleton.$prop$getLast={$crtmm$:function(){return{mod:$CCMM$,$t:'Element$Singleton',$cont:Singleton,$an:function(){return[doc(String$("Returns the element contained in this `Singleton`.",50)),shared(),actual()];},d:['ceylon.language','Singleton','$at','last']};}};
    $$singleton.$prop$getLast.get=function(){return last};
    $$singleton.$prop$getRest={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Singleton,$an:function(){return[doc(String$("Returns `Empty`.",16)),shared(),actual()];},d:['ceylon.language','Singleton','$at','rest']};}};
    $$singleton.$prop$getRest.get=function(){return rest};
    $$singleton.$prop$getString={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$at','string']};}};
    $$singleton.$prop$getString.get=function(){return string};
    $$singleton.$prop$getReversed={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},$cont:Singleton,$an:function(){return[doc(String$("Return this singleton.",22)),shared(),actual()];},d:['ceylon.language','Singleton','$at','reversed']};}};
    $$singleton.$prop$getReversed.get=function(){return reversed};
    $$singleton.$prop$getHash={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$at','hash']};}};
    $$singleton.$prop$getHash.get=function(){return hash};
    return $$singleton;
}
Singleton.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},$ps:[{$nm:'element',$mt:'prm',$t:'Element$Singleton',$an:function(){return[];}}],$tp:{Element$Singleton:{'var':'out'}},satisfies:[{t:Sequence,a:{Element$Sequence:'Element$Singleton'}}],$an:function(){return[doc(String$("A sequence with exactly one element, which may be null.",55)),shared()];},d:['ceylon.language','Singleton']};};
exports.Singleton=Singleton;
function $init$Singleton(){
    if(Singleton.$$===undefined){
        initTypeProto(Singleton,'ceylon.language::Singleton',$init$$Object(),$init$Sequence());
        (function($$singleton){
            defineAttr($$singleton,'lastIndex',function(){
                var $$singleton=this;
                return (0);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Singleton,$an:function(){return[doc(String$("Returns `0`.",12)),shared(),actual()];},d:['ceylon.language','Singleton','$at','lastIndex']};});
            defineAttr($$singleton,'size',function(){
                var $$singleton=this;
                return (1);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Singleton,$an:function(){return[doc(String$("Returns `1`.",12)),shared(),actual()];},d:['ceylon.language','Singleton','$at','size']};});
            defineAttr($$singleton,'first',function(){
                var $$singleton=this;
                return $$singleton.element$631;
            },undefined,function(){return{mod:$CCMM$,$t:'Element$Singleton',$cont:Singleton,$an:function(){return[doc(String$("Returns the element contained in this `Singleton`.",50)),shared(),actual()];},d:['ceylon.language','Singleton','$at','first']};});
            defineAttr($$singleton,'last',function(){
                var $$singleton=this;
                return $$singleton.element$631;
            },undefined,function(){return{mod:$CCMM$,$t:'Element$Singleton',$cont:Singleton,$an:function(){return[doc(String$("Returns the element contained in this `Singleton`.",50)),shared(),actual()];},d:['ceylon.language','Singleton','$at','last']};});
            defineAttr($$singleton,'rest',function(){
                var $$singleton=this;
                return getEmpty();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Empty},$cont:Singleton,$an:function(){return[doc(String$("Returns `Empty`.",16)),shared(),actual()];},d:['ceylon.language','Singleton','$at','rest']};});
            $$singleton.$get=function $get(index$632){
                var $$singleton=this;
                if((index$632==(0))){
                    return $$singleton.element$631;
                }else {
                    return null;
                }
            };$$singleton.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Singleton']},$ps:[{$nm:'index',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[doc(String$("Returns the contained element, if the specified \nindex is `0`.",62)),shared(),actual()];},d:['ceylon.language','Singleton','$m','get']};};
            $$singleton.clone=function (){
                var $$singleton=this;
                return $$singleton;
            };
            $$singleton.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},$ps:[],$cont:Singleton,$an:function(){return[doc(String$("Returns a `Singleton` with the same element.",44)),shared(),actual()];},d:['ceylon.language','Singleton','$m','clone']};};
            $$singleton.iterator=function iterator(){
                var $$singleton=this;
                function SingletonIterator$633($$singletonIterator$633){
                    $init$SingletonIterator$633();
                    if($$singletonIterator$633===undefined)$$singletonIterator$633=new SingletonIterator$633.$$;
                    $$singletonIterator$633.$$outer=$$singleton;
                    $$singletonIterator$633.$$targs$$={Element$Iterator:$$singletonIterator$633.$$outer.$$targs$$.Element$Singleton};
                    Iterator({Element$Iterator:$$singletonIterator$633.$$outer.$$targs$$.Element$Singleton},$$singletonIterator$633);
                    $$singletonIterator$633.done$634_=false;
                    $$singletonIterator$633.$prop$getDone$634={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:SingletonIterator$633,$an:function(){return[variable()];},d:['ceylon.language','Singleton','$m','iterator','$c','SingletonIterator','$at','done']};}};
                    $$singletonIterator$633.$prop$getDone$634.get=function(){return done$634};
                    return $$singletonIterator$633;
                }
                SingletonIterator$633.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:Iterator,a:{Element$Iterator:'Element$Singleton'}}],d:['ceylon.language','Singleton','$m','iterator','$c','SingletonIterator']};};
                function $init$SingletonIterator$633(){
                    if(SingletonIterator$633.$$===undefined){
                        initTypeProto(SingletonIterator$633,'ceylon.language::Singleton.iterator.SingletonIterator',Basic,$init$Iterator());
                        (function($$singletonIterator$633){
                            defineAttr($$singletonIterator$633,'done$634',function(){return this.done$634_;},function(done$635){return this.done$634_=done$635;},function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:SingletonIterator$633,$an:function(){return[variable()];},d:['ceylon.language','Singleton','$m','iterator','$c','SingletonIterator','$at','done']};});
                            $$singletonIterator$633.next=function next(){
                                var $$singletonIterator$633=this;
                                if($$singletonIterator$633.done$634){
                                    return getFinished();
                                }else {
                                    $$singletonIterator$633.done$634=true;
                                    return $$singleton.element$631;
                                }
                            };$$singletonIterator$633.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Element$Singleton',{t:Finished}]},$ps:[],$cont:SingletonIterator$633,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','iterator','$c','SingletonIterator','$m','next']};};
                            defineAttr($$singletonIterator$633,'string',function(){
                                var $$singletonIterator$633=this;
                                return String$("SingletonIterator",17);
                            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:SingletonIterator$633,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','iterator','$c','SingletonIterator','$at','string']};});
                        })(SingletonIterator$633.$$.prototype);
                    }
                    return SingletonIterator$633;
                }
                $init$SingletonIterator$633();
                return SingletonIterator$633();
            };$$singleton.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Element$Singleton'}},$ps:[],$cont:Singleton,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Singleton','$m','iterator']};};
            defineAttr($$singleton,'string',function(){
                var $$singleton=this;
                return StringBuilder([String$("[",1),(opt$636=(opt$637=$$singleton.element$631,opt$637!==null&&opt$637!==undefined?opt$637.string:null),opt$636!==null&&opt$636!==undefined?opt$636:String$("null",4)).string,String$("]",1)]).string;
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$at','string']};});
            $$singleton.segment=function (from$638,length$639){
                var $$singleton=this;
                return (opt$640=(((from$638<=(0))&&(from$638.plus(length$639)>(0)))?$$singleton:null),opt$640!==null&&opt$640!==undefined?opt$640:getEmpty());
            };
            $$singleton.segment.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Empty},{t:Singleton,a:{Element$Singleton:'Element$Singleton'}}]},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'length',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[doc(String$("Returns a `Singleton` if the given starting index \nis `0` and the given `length` is greater than `0`.\nOtherwise, returns an instance of `Empty`.",144)),shared(),actual()];},d:['ceylon.language','Singleton','$m','segment']};};
            $$singleton.span=function (from$641,to$642){
                var $$singleton=this;
                return (opt$643=((((from$641<=(0))&&(to$642>=(0)))||((from$641>=(0))&&(to$642<=(0))))?$$singleton:null),opt$643!==null&&opt$643!==undefined?opt$643:getEmpty());
            };
            $$singleton.span.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Empty},{t:Singleton,a:{Element$Singleton:'Element$Singleton'}}]},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'to',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[doc(String$("Returns a `Singleton` if the given starting index \nis `0`. Otherwise, returns an instance of `Empty`.",101)),shared(),actual()];},d:['ceylon.language','Singleton','$m','span']};};
            $$singleton.spanTo=function (to$644){
                var $$singleton=this;
                return (opt$645=((to$644<(0))?getEmpty():null),opt$645!==null&&opt$645!==undefined?opt$645:$$singleton);
            };
            $$singleton.spanTo.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Empty},{t:Singleton,a:{Element$Singleton:'Element$Singleton'}}]},$ps:[{$nm:'to',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','spanTo']};};
            $$singleton.spanFrom=function (from$646){
                var $$singleton=this;
                return (opt$647=((from$646>(0))?getEmpty():null),opt$647!==null&&opt$647!==undefined?opt$647:$$singleton);
            };
            $$singleton.spanFrom.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Empty},{t:Singleton,a:{Element$Singleton:'Element$Singleton'}}]},$ps:[{$nm:'from',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','spanFrom']};};
            defineAttr($$singleton,'reversed',function(){
                var $$singleton=this;
                return $$singleton;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},$cont:Singleton,$an:function(){return[doc(String$("Return this singleton.",22)),shared(),actual()];},d:['ceylon.language','Singleton','$at','reversed']};});
            $$singleton.equals=function equals(that$648){
                var $$singleton=this;
                var element$649;
                if((element$649=$$singleton.element$631)!==null){
                    var that$650;
                    if(isOfType((that$650=that$648),{t:List,a:{Element$List:{t:Anything}}})){
                        if((that$650.size==(1))){
                            var elem$651;
                            if((elem$651=that$650.first)!==null){
                                return elem$651.equals(element$649);
                            }
                        }
                    }
                    return false;
                }
                return false;
            };$$singleton.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'that',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[doc(String$("A `Singleton` can be equal to another `List` if \nthat `List` has only one element which is equal to \nthis `Singleton`\'s element.",128)),shared(),actual()];},d:['ceylon.language','Singleton','$m','equals']};};
            defineAttr($$singleton,'hash',function(){
                var $$singleton=this;
                return (31).plus((opt$652=(opt$653=$$singleton.element$631,opt$653!==null&&opt$653!==undefined?opt$653.hash:null),opt$652!==null&&opt$652!==undefined?opt$652:(0)));
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$at','hash']};});
            $$singleton.contains=function contains(element$654){
                var $$singleton=this;
                var e$655;
                if((e$655=$$singleton.element$631)!==null){
                    return e$655.equals(element$654);
                }
                return false;
            };$$singleton.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'element',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[doc(String$("Returns `true` if the specified element is this \n`Singleton`\'s element.",71)),shared(),actual()];},d:['ceylon.language','Singleton','$m','contains']};};
            $$singleton.count=function (selecting$656){
                var $$singleton=this;
                return (opt$657=(selecting$656($$singleton.element$631)?(1):null),opt$657!==null&&opt$657!==undefined?opt$657:(0));
            };
            $$singleton.count.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[doc(String$("Returns `1` if this `Singleton`\'s element\nsatisfies the predicate, or `0` otherwise.",84)),shared(),actual()];},d:['ceylon.language','Singleton','$m','count']};};
            $$singleton.$map=function (collecting$658,$$$mptypes){
                var $$singleton=this;
                return Singleton(collecting$658($$singleton.element$631),{Element$Singleton:$$$mptypes.Result$map});
            };
            $$singleton.$map.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Singleton,a:{Element$Singleton:'Result$map'}},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$map',$an:function(){return[];}}],$cont:Singleton,$tp:{Result$map:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','map']};};
            $$singleton.$filter=function (selecting$659){
                var $$singleton=this;
                return (opt$660=(selecting$659($$singleton.element$631)?$$singleton:null),opt$660!==null&&opt$660!==undefined?opt$660:getEmpty());
            };
            $$singleton.$filter.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},{t:Empty}]},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','filter']};};
            $$singleton.fold=function (initial$661,accumulating$662,$$$mptypes){
                var $$singleton=this;
                return accumulating$662(initial$661,$$singleton.element$631);
            };
            $$singleton.fold.$crtmm$=function(){return{mod:$CCMM$,$t:'Result$fold',$ps:[{$nm:'initial',$mt:'prm',$t:'Result$fold',$an:function(){return[];}},{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$fold',$an:function(){return[];}}],$cont:Singleton,$tp:{Result$fold:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','fold']};};
            $$singleton.$reduce=function (accumulating$663,$$$mptypes){
                var $$singleton=this;
                return $$singleton.element$631;
            };
            $$singleton.$reduce.$crtmm$=function(){return{mod:$CCMM$,$t:'Element$Singleton',$ps:[{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$reduce',$an:function(){return[];}}],$cont:Singleton,$tp:{Result$reduce:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','reduce']};};
            $$singleton.collect=function (collecting$664,$$$mptypes){
                var $$singleton=this;
                return Singleton(collecting$664($$singleton.element$631),{Element$Singleton:$$$mptypes.Result$collect});
            };
            $$singleton.collect.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Singleton,a:{Element$Singleton:'Result$collect'}},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$collect',$an:function(){return[];}}],$cont:Singleton,$tp:{Result$collect:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','collect']};};
            $$singleton.select=function (selecting$665){
                var $$singleton=this;
                return (opt$666=(selecting$665($$singleton.element$631)?$$singleton:null),opt$666!==null&&opt$666!==undefined?opt$666:getEmpty());
            };
            $$singleton.select.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},{t:Empty}]},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','select']};};
            $$singleton.find=function find(selecting$667){
                var $$singleton=this;
                if(selecting$667($$singleton.element$631)){
                    return $$singleton.element$631;
                }
                return null;
            };$$singleton.find.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Singleton']},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','find']};};
            $$singleton.findLast=function (selecting$668){
                var $$singleton=this;
                return $$singleton.find($JsCallable(selecting$668,[{$nm:'elem',$mt:'prm',$t:'Element$Singleton',$an:function(){return[];}}],{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T', l:[$$singleton.$$targs$$.Element$Singleton]}}));
            };
            $$singleton.findLast.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Element$Singleton']},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Singleton','$m','findLast']};};
            $$singleton.$sort=function (comparing$669){
                var $$singleton=this;
                return $$singleton;
            };
            $$singleton.$sort.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},$ps:[{$nm:'comparing',$mt:'prm',$pt:'f',$t:{t:Comparison},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','sort']};};
            $$singleton.any=function (selecting$670){
                var $$singleton=this;
                return selecting$670($$singleton.element$631);
            };
            $$singleton.any.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','any']};};
            $$singleton.$every=function (selecting$671){
                var $$singleton=this;
                return selecting$671($$singleton.element$631);
            };
            $$singleton.$every.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','every']};};
            $$singleton.skipping=function (skip$672){
                var $$singleton=this;
                return (opt$673=((skip$672<(1))?$$singleton:null),opt$673!==null&&opt$673!==undefined?opt$673:getEmpty());
            };
            $$singleton.skipping.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},{t:Empty}]},$ps:[{$nm:'skip',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','skipping']};};
            $$singleton.taking=function (take$674){
                var $$singleton=this;
                return (opt$675=((take$674>(0))?$$singleton:null),opt$675!==null&&opt$675!==undefined?opt$675:getEmpty());
            };
            $$singleton.taking.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Singleton,a:{Element$Singleton:'Element$Singleton'}},{t:Empty}]},$ps:[{$nm:'take',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','taking']};};
            defineAttr($$singleton,'coalesced',function(){
                var $$singleton=this;
                var element$676;
                if((element$676=$$singleton.element$631)!==null){
                    return Singleton(element$676,{Element$Singleton:{t:'i', l:[$$singleton.$$targs$$.Element$Singleton,{t:$Object}]}});
                }else {
                    return getEmpty();
                }
            },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Singleton,a:{Element$Singleton:{t:'i', l:['Element$Singleton',{t:$Object}]}}},{t:Empty}]},$cont:Singleton,$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$at','coalesced']};});$$singleton.chain=function (other$677,$$$mptypes){
                var $$singleton=this;
                return other$677.following($$singleton.element$631,{Other$following:$$singleton.$$targs$$.Element$Singleton});
            };
            $$singleton.chain.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'u', l:['Element$Singleton','Other$chain']},Absent$Iterable:{t:Nothing}}},$ps:[{$nm:'other',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Other$chain',Absent$Iterable:'OtherAbsent$chain'}},$an:function(){return[];}}],$cont:Singleton,$tp:{Other$chain:{},OtherAbsent$chain:{'satisfies':[{t:Null}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language','Singleton','$m','chain']};};
            defineAttr($$singleton,'element$631',function(){return this.element$631_;},undefined,function(){return{mod:$CCMM$,$t:'Element$Singleton',$cont:Singleton,d:['ceylon.language','Singleton','$at','element']};});
        })(Singleton.$$.prototype);
    }
    return Singleton;
}
exports.$init$Singleton=$init$Singleton;
$init$Singleton();
var opt$636,opt$637,opt$640,opt$643,opt$645,opt$647,opt$652,opt$653,opt$657,opt$660,opt$666,opt$673,opt$675;
function AssertionError(message$678,$$assertionError){
    $init$AssertionError();
    if($$assertionError===undefined)$$assertionError=new AssertionError.$$;
    $$assertionError.message$678_=message$678;
    $Error($$assertionError.message$678,undefined,$$assertionError);
    return $$assertionError;
}
AssertionError.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Error},$ps:[{$nm:'message',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$an:function(){return[doc(String$("An error that occurs due to an incorrectly writen program. \nAn instance is thrown when an assertion fails, that\nis, when a condition in an `assert` statement evaluates\nto false at runtime.",188)),shared()];},d:['ceylon.language','AssertionError']};};
exports.AssertionError=AssertionError;
function $init$AssertionError(){
    if(AssertionError.$$===undefined){
        initTypeProto(AssertionError,'ceylon.language::AssertionError',$init$$Error());
        (function($$assertionError){
            defineAttr($$assertionError,'message$678',function(){return this.message$678_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:AssertionError,d:['ceylon.language','AssertionError','$at','message']};});
        })(AssertionError.$$.prototype);
    }
    return AssertionError;
}
exports.$init$AssertionError=$init$AssertionError;
$init$AssertionError();
function Map($$targs$$,$$map){
    Collection({Element$Collection:{t:Entry,a:{Item$Entry:$$targs$$.Item$Map,Key$Entry:$$targs$$.Key$Map}}},$$map);
    add_type_arg($$map,'Element$Collection',{t:Entry,a:{Item$Entry:$$map.$$targs$$.Item$Map,Key$Entry:$$map.$$targs$$.Key$Map}});
    Correspondence({Item$Correspondence:$$targs$$.Item$Map,Key$Correspondence:{t:$Object}},$$map);
    add_type_arg($$map,'Key$Correspondence',{t:$Object});
    set_type_args($$map,$$targs$$);
}
Map.$crtmm$=function(){return{mod:$CCMM$,$tp:{Key$Map:{'var':'out','satisfies':[{t:$Object}]},Item$Map:{'var':'out','satisfies':[{t:$Object}]}},satisfies:[{t:Collection,a:{Element$Collection:{t:Entry,a:{Item$Entry:'Item$Map',Key$Entry:'Key$Map'}}}},{t:Correspondence,a:{Item$Correspondence:'Item$Map',Key$Correspondence:{t:$Object}}}],$an:function(){return[doc(String$("Represents a collection which maps _keys_ to _items_,\nwhere a key can map to at most one item. Each such \nmapping may be represented by an [[Entry]].\n\nA `Map` is a [[Collection]] of its `Entry`s, and a \n[[Correspondence]] from keys to items.\n\nThe presence of an entry in a map may be tested using the \n`in` operator:\n\n    if (\"lang\"->\"en_AU\" in settings) { ... }\n\nThe entries of the map may be iterated using `for`:\n\n    for (key->item in settings) { ... }\n\nThe item for a key may be obtained using the item\noperator:\n\n    String lang = settings[\"lang\"] else \"en_US\";\n\nKeys are compared for equality using [[Object.equals]] or\n[[Comparable.compare]]. There may be at most one entry \nper key.",691)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Entry),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),forKey),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),forItem),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byItem),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byKey)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','Map']};};
exports.Map=Map;
function $init$Map(){
    if(Map.$$===undefined){
        initTypeProtoI(Map,'ceylon.language::Map',$init$Collection(),$init$Correspondence());
        (function($$map){
            $$map.contains=function contains(entry$679){
                var $$map=this;
                var entry$680;
                var item$681;
                if(isOfType((entry$680=entry$679),{t:Entry,a:{Item$Entry:{t:$Object},Key$Entry:$$map.$$targs$$.Key$Map}})&&(item$681=$$map.$get(entry$680.key))!==null){
                    return item$681.equals(entry$680.item);
                }else {
                    return false;
                }
            };$$map.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'entry',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Map,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Map','$m','contains']};};
            $$map.clone={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Map,a:{Item$Map:'Item$Map',Key$Map:'Key$Map'}},$ps:[],$cont:Map,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language','Map','$m','clone']};}};$$map.equals=function equals(that$682){
                var $$map=this;
                var that$683;
                if(isOfType((that$683=that$682),{t:Map,a:{Item$Map:{t:$Object},Key$Map:{t:$Object}}})&&(that$683.size==$$map.size)){
                    var it$684 = $$map.iterator();
                    var entry$685;while((entry$685=it$684.next())!==getFinished()){
                        var item$686;
                        if((item$686=that$683.$get(entry$685.key))!==null&&item$686.equals(entry$685.item)){
                            continue;
                        }else {
                            return false;
                        }
                    }
                    if(getFinished() === entry$685){
                        return true;
                    }
                }else {
                    return false;
                }
            };$$map.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'that',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Map,$an:function(){return[doc(String$("Two `Map`s are considered equal iff they have the same \n_entry sets_. The entry set of a `Map` is the set of \n`Entry`s belonging to the map. Therefore, the maps are \nequal iff they have same set of `keys`, and for every \nkey in the key set, the maps have equal items.",267)),shared(),actual(),$default()];},d:['ceylon.language','Map','$m','equals']};};
            defineAttr($$map,'hash',function(){
                var $$map=this;
                var hashCode$687=(0);
                function setHashCode$687(hashCode$688){return hashCode$687=hashCode$688;};
                $prop$getHashCode$687={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$an:function(){return[variable()];},d:['ceylon.language','Map','$at','hash','$at','hashCode']};}};
                $prop$getHashCode$687.get=function(){return hashCode$687};
                $prop$getHashCode$687.set=setHashCode$687;
                if(setHashCode$687.$crtmm$===undefined)setHashCode$687.$crtmm$=$prop$getHashCode$687.$crtmm$;
                var it$689 = $$map.iterator();
                var elem$690;while((elem$690=it$689.next())!==getFinished()){
                    (hashCode$687=hashCode$687.plus(elem$690.hash));
                }
                return hashCode$687;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Map,$an:function(){return[shared(),actual(),$default()];},d:['ceylon.language','Map','$at','hash']};});defineAttr($$map,'keys',function(){
                var $$map=this;
                function keys$691($$targs$$){
                    var $$keys$691=new keys$691.$$;
                    $$keys$691.$$outer=$$map;
                    $$keys$691.$$targs$$=$$targs$$;
                    Collection({Element$Collection:$$map.$$targs$$.Key$Map},$$keys$691);
                    return $$keys$691;
                };keys$691.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Collection,a:{Element$Collection:'Key$Map'}}],d:['ceylon.language','Map','$at','keys','$o','keys']};};
                function $init$keys$691(){
                    if(keys$691.$$===undefined){
                        initTypeProto(keys$691,'ceylon.language::Map.keys.keys',Basic,$init$Collection());
                        (function($$keys$691){
                            $$keys$691.contains=function (key$692){
                                var $$keys$691=this;
                                return $$map.defines(key$692);
                            };$$keys$691.iterator=function (){
                                var $$keys$691=this;
                                return Comprehension(function(){
                                    var it$693=$$map.iterator();
                                    var k$694,v$695;
                                    var next$v$695=function(){
                                        var entry$696;
                                        if((entry$696=it$693.next())!==getFinished()){
                                            k$694=entry$696.key;
                                            v$695=entry$696.item;
                                            return entry$696;
                                        }
                                        v$695=undefined;
                                        return getFinished();
                                    }
                                    next$v$695();
                                    return function(){
                                        if(v$695!==undefined){
                                            var k$694$697=k$694;
                                            var v$695$698=v$695;
                                            var tmpvar$699=k$694$697;
                                            next$v$695();
                                            return tmpvar$699;
                                        }
                                        return getFinished();
                                    }
                                },{Absent$Iterable:{t:Null},Element$Iterable:$$map.$$targs$$.Key$Map}).iterator();
                            };$$keys$691.clone=function (){
                                var $$keys$691=this;
                                return $$map.clone().keys;
                            };defineAttr($$keys$691,'size',function(){
                                var $$keys$691=this;
                                return $$map.size;
                            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:keys$691,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$at','keys','$o','keys','$at','size']};});
                        })(keys$691.$$.prototype);
                    }
                    return keys$691;
                }
                $init$keys$691();
                var keys$700;
                function getKeys$700(){
                    if(keys$700===undefined){keys$700=$init$keys$691()({Element$Collection:$$map.$$targs$$.Key$Map});keys$700.$crtmm$=getKeys$700.$crtmm$;}
                    return keys$700;
                }
                getKeys$700.$crtmm$=function(){return{mod:$CCMM$,$t:{t:keys$691},d:['ceylon.language','Map','$at','keys','$o','keys']};};
                $prop$getKeys$700={get:getKeys$700,$crtmm$:getKeys$700.$crtmm$};
                return getKeys$700();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Collection,a:{Element$Collection:'Key$Map'}},$cont:Map,$an:function(){return[doc(String$("A [[Collection]] containing the keys of this map.",49)),actual(),shared(),$default()];},d:['ceylon.language','Map','$at','keys']};});defineAttr($$map,'values',function(){
                var $$map=this;
                function values$701($$targs$$){
                    var $$values$701=new values$701.$$;
                    $$values$701.$$outer=$$map;
                    $$values$701.$$targs$$=$$targs$$;
                    Collection({Element$Collection:$$map.$$targs$$.Item$Map},$$values$701);
                    return $$values$701;
                };values$701.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Collection,a:{Element$Collection:'Item$Map'}}],d:['ceylon.language','Map','$at','values','$o','values']};};
                function $init$values$701(){
                    if(values$701.$$===undefined){
                        initTypeProto(values$701,'ceylon.language::Map.values.values',Basic,$init$Collection());
                        (function($$values$701){
                            $$values$701.contains=function contains(item$702){
                                var $$values$701=this;
                                var it$703 = $$map.iterator();
                                var item$704;while((item$704=it$703.next())!==getFinished()){
                                    var k$705=item$704.key;
                                    var v$706=item$704.item;
                                    if(v$706.equals(item$702)){
                                        return true;
                                    }
                                }
                                return false;
                            };$$values$701.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'item',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:values$701,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$at','values','$o','values','$m','contains']};};
                            $$values$701.iterator=function (){
                                var $$values$701=this;
                                return Comprehension(function(){
                                    var it$707=$$map.iterator();
                                    var k$708,v$709;
                                    var next$v$709=function(){
                                        var entry$710;
                                        if((entry$710=it$707.next())!==getFinished()){
                                            k$708=entry$710.key;
                                            v$709=entry$710.item;
                                            return entry$710;
                                        }
                                        v$709=undefined;
                                        return getFinished();
                                    }
                                    next$v$709();
                                    return function(){
                                        if(v$709!==undefined){
                                            var k$708$711=k$708;
                                            var v$709$712=v$709;
                                            var tmpvar$713=v$709$712;
                                            next$v$709();
                                            return tmpvar$713;
                                        }
                                        return getFinished();
                                    }
                                },{Absent$Iterable:{t:Null},Element$Iterable:$$map.$$targs$$.Item$Map}).iterator();
                            };$$values$701.clone=function (){
                                var $$values$701=this;
                                return $$map.clone().values;
                            };defineAttr($$values$701,'size',function(){
                                var $$values$701=this;
                                return $$map.size;
                            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:values$701,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$at','values','$o','values','$at','size']};});
                        })(values$701.$$.prototype);
                    }
                    return values$701;
                }
                $init$values$701();
                var values$714;
                function getValues$714(){
                    if(values$714===undefined){values$714=$init$values$701()({Element$Collection:$$map.$$targs$$.Item$Map});values$714.$crtmm$=getValues$714.$crtmm$;}
                    return values$714;
                }
                getValues$714.$crtmm$=function(){return{mod:$CCMM$,$t:{t:values$701},d:['ceylon.language','Map','$at','values','$o','values']};};
                $prop$getValues$714={get:getValues$714,$crtmm$:getValues$714.$crtmm$};
                return getValues$714();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Collection,a:{Element$Collection:'Item$Map'}},$cont:Map,$an:function(){return[doc(String$("A [[Collection]] containing the items stored in this \nmap. An element can be stored under more than one key \nin the map, and so it can occur more than once in the \nresulting collection.",185)),shared(),$default()];},d:['ceylon.language','Map','$at','values']};});$$map.mapItems=function mapItems(mapping$715,$$$mptypes){
                var $$map=this;
                function map$716($$targs$$){
                    var $$map$716=new map$716.$$;
                    $$map$716.$$outer=$$map;
                    $$map$716.$$targs$$=$$targs$$;
                    Map({Item$Map:$$$mptypes.Result$mapItems,Key$Map:$$map.$$targs$$.Key$Map},$$map$716);
                    return $$map$716;
                };map$716.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Map,a:{Item$Map:'Result$mapItems',Key$Map:'Key$Map'}}],d:['ceylon.language','Map','$m','mapItems','$o','map']};};
                function $init$map$716(){
                    if(map$716.$$===undefined){
                        initTypeProto(map$716,'ceylon.language::Map.mapItems.map',Basic,$init$Map());
                        (function($$map$716){
                            $$map$716.$get=function $get(key$717){
                                var $$map$716=this;
                                var key$718;
                                var item$719;
                                if(isOfType((key$718=key$717),$$map.$$targs$$.Key$Map)&&(item$719=$$map.$get(key$718))!==null){
                                    return mapping$715(key$718,item$719);
                                }else {
                                    return null;
                                }
                            };$$map$716.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Result$mapItems']},$ps:[{$nm:'key',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:map$716,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$m','mapItems','$o','map','$m','get']};};
                            $$map$716.defines=function (key$720){
                                var $$map$716=this;
                                return $$map.defines(key$720);
                            };$$map$716.iterator=function (){
                                var $$map$716=this;
                                return $$map.$map($JsCallable((function (entry$721){
                                    return Entry(entry$721.key,mapping$715(entry$721.key,entry$721.item),{Item$Entry:$$$mptypes.Result$mapItems,Key$Entry:$$map.$$targs$$.Key$Map});
                                }),[{$nm:'entry',$mt:'prm',$t:{t:Entry,a:{Item$Entry:'Item$Map',Key$Entry:'Key$Map'}},$an:function(){return[];}}],{Return$Callable:{t:Entry,a:{Item$Entry:$$$mptypes.Result$mapItems,Key$Entry:$$map.$$targs$$.Key$Map}},Arguments$Callable:{t:'T', l:[{t:Entry,a:{Item$Entry:$$map.$$targs$$.Item$Map,Key$Entry:$$map.$$targs$$.Key$Map}}]}}),{Result$map:{t:Entry,a:{Item$Entry:$$$mptypes.Result$mapItems,Key$Entry:$$map.$$targs$$.Key$Map}}}).iterator();
                            };defineAttr($$map$716,'size',function(){
                                var $$map$716=this;
                                return $$map.size;
                            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:map$716,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$m','mapItems','$o','map','$at','size']};});
                            $$map$716.equals=function (that$722){
                                var $$map$716=this;
                                return $$map$716.getT$all()['ceylon.language::Map'].$$.prototype.equals.call(this,that$722);
                            };defineAttr($$map$716,'hash',function(){
                                var $$map$716=this;
                                return attrGetter($$map$716.getT$all()['ceylon.language::Map'],'hash').call(this);
                            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:map$716,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$m','mapItems','$o','map','$at','hash']};});
                            $$map$716.clone=function (){
                                var $$map$716=this;
                                return $$map$716;
                            };
                            $$map$716.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Map,a:{Item$Map:'Result$mapItems',Key$Map:'Key$Map'}},$ps:[],$cont:map$716,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$m','mapItems','$o','map','$m','clone']};};
                        })(map$716.$$.prototype);
                    }
                    return map$716;
                }
                $init$map$716();
                var map$723;
                function getMap$723(){
                    if(map$723===undefined){map$723=$init$map$716()({Key$Map:$$map.$$targs$$.Key$Map,Item$Map:$$$mptypes.Result$mapItems});map$723.$crtmm$=getMap$723.$crtmm$;}
                    return map$723;
                }
                getMap$723.$crtmm$=function(){return{mod:$CCMM$,$t:{t:map$716},d:['ceylon.language','Map','$m','mapItems','$o','map']};};
                $prop$getMap$723={get:getMap$723,$crtmm$:getMap$723.$crtmm$};
                return getMap$723();
            };$$map.mapItems.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Map,a:{Item$Map:'Result$mapItems',Key$Map:'Key$Map'}},$ps:[{$nm:'mapping',$mt:'prm',$pt:'f',$t:'Result$mapItems',$an:function(){return[doc("The function that transforms a key/item pair, \nproducing the item of the resulting map.")];}}],$cont:Map,$tp:{Result$mapItems:{'satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("Returns a `Map` with the same keys as this map. For\nevery key, the item is the result of applying the given \ntransformation function. This is a lazy operation.",159)),shared(),$default()];},d:['ceylon.language','Map','$m','mapItems']};};
        })(Map.$$.prototype);
    }
    return Map;
}
exports.$init$Map=$init$Map;
$init$Map();
function emptyMap$724($$targs$$){
    var $$emptyMap=new emptyMap$724.$$;
    $$emptyMap.$$targs$$=$$targs$$;
    $Object($$emptyMap);
    Map({Item$Map:{t:Nothing},Key$Map:{t:Nothing}},$$emptyMap);
    $$emptyMap.$prop$getKeys={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Collection,a:{Element$Collection:{t:Nothing}}},$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$at','keys']};}};
    $$emptyMap.$prop$getKeys.get=function(){return keys};
    $$emptyMap.$prop$getValues={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Collection,a:{Element$Collection:{t:Nothing}}},$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$at','values']};}};
    $$emptyMap.$prop$getValues.get=function(){return values};
    return $$emptyMap;
};emptyMap$724.$crtmm$=function(){return{mod:$CCMM$,'super':{t:$Object},satisfies:[{t:Map,a:{Item$Map:{t:Nothing},Key$Map:{t:Nothing}}}],$an:function(){return[doc("An immutable [[Map]] with no entries."),shared()];},d:['ceylon.language','emptyMap']};};
function $init$emptyMap$724(){
    if(emptyMap$724.$$===undefined){
        initTypeProto(emptyMap$724,'ceylon.language::emptyMap',$init$$Object(),$init$Map());
        (function($$emptyMap){
            $$emptyMap.$get=function (key$725){
                var $$emptyMap=this;
                return null;
            };
            $$emptyMap.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Null},$ps:[{$nm:'key',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','get']};};
            defineAttr($$emptyMap,'keys',function(){
                var $$emptyMap=this;
                return getEmptySet();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Collection,a:{Element$Collection:{t:Nothing}}},$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$at','keys']};});
            defineAttr($$emptyMap,'values',function(){
                var $$emptyMap=this;
                return getEmpty();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Collection,a:{Element$Collection:{t:Nothing}}},$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$at','values']};});
            $$emptyMap.clone=function (){
                var $$emptyMap=this;
                return getEmptyMap();
            };$$emptyMap.iterator=function (){
                var $$emptyMap=this;
                return getEmptyIterator();
            };defineAttr($$emptyMap,'size',function(){
                var $$emptyMap=this;
                return (0);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$at','size']};});
            defineAttr($$emptyMap,'empty',function(){
                var $$emptyMap=this;
                return true;
            },undefined,function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$at','empty']};});
            $$emptyMap.defines=function (index$726){
                var $$emptyMap=this;
                return false;
            };$$emptyMap.contains=function (element$727){
                var $$emptyMap=this;
                return false;
            };$$emptyMap.containsAny=function (elements$728){
                var $$emptyMap=this;
                return false;
            };$$emptyMap.containsEvery=function (elements$729){
                var $$emptyMap=this;
                return false;
            };$$emptyMap.mapItems=function (mapping$730,$$$mptypes){
                var $$emptyMap=this;
                return getEmptyMap();
            };
            $$emptyMap.mapItems.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Map,a:{Item$Map:{t:Nothing},Key$Map:{t:Nothing}}},$ps:[{$nm:'mapping',$mt:'prm',$pt:'f',$t:'Result$mapItems',$an:function(){return[];}}],$cont:emptyMap$724,$tp:{Result$mapItems:{'satisfies':[{t:$Object}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','mapItems']};};
            $$emptyMap.count=function (selecting$731){
                var $$emptyMap=this;
                return (0);
            };
            $$emptyMap.count.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','count']};};
            $$emptyMap.$map=function (collecting$732,$$$mptypes){
                var $$emptyMap=this;
                return getEmpty();
            };
            $$emptyMap.$map.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$map',$an:function(){return[];}}],$cont:emptyMap$724,$tp:{Result$map:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','map']};};
            $$emptyMap.$filter=function (selecting$733){
                var $$emptyMap=this;
                return getEmptyMap();
            };
            $$emptyMap.$filter.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Map,a:{Item$Map:{t:Nothing},Key$Map:{t:Nothing}}},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','filter']};};
            $$emptyMap.fold=function (initial$734,accumulating$735,$$$mptypes){
                var $$emptyMap=this;
                return initial$734;
            };
            $$emptyMap.fold.$crtmm$=function(){return{mod:$CCMM$,$t:'Result$fold',$ps:[{$nm:'initial',$mt:'prm',$t:'Result$fold',$an:function(){return[];}},{$nm:'accumulating',$mt:'prm',$pt:'f',$t:'Result$fold',$an:function(){return[];}}],$cont:emptyMap$724,$tp:{Result$fold:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','fold']};};
            $$emptyMap.find=function (selecting$736){
                var $$emptyMap=this;
                return null;
            };
            $$emptyMap.find.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Null},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','find']};};
            $$emptyMap.collect=function (collecting$737,$$$mptypes){
                var $$emptyMap=this;
                return getEmpty();
            };
            $$emptyMap.collect.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$collect',$an:function(){return[];}}],$cont:emptyMap$724,$tp:{Result$collect:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','collect']};};
            $$emptyMap.select=function (selecting$738){
                var $$emptyMap=this;
                return getEmpty();
            };
            $$emptyMap.select.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Empty},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','select']};};
            $$emptyMap.any=function (selecting$739){
                var $$emptyMap=this;
                return false;
            };
            $$emptyMap.any.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','any']};};
            $$emptyMap.$every=function (selecting$740){
                var $$emptyMap=this;
                return true;
            };
            $$emptyMap.$every.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'selecting',$mt:'prm',$pt:'f',$t:{t:$Boolean},$an:function(){return[];}}],$cont:emptyMap$724,$an:function(){return[shared(),actual()];},d:['ceylon.language','emptyMap','$m','every']};};
            $$emptyMap.skipping=function (skip$741){
                var $$emptyMap=this;
                return getEmptyMap();
            };$$emptyMap.taking=function (take$742){
                var $$emptyMap=this;
                return getEmptyMap();
            };$$emptyMap.by=function (step$743){
                var $$emptyMap=this;
                return getEmptyMap();
            };
        })(emptyMap$724.$$.prototype);
    }
    return emptyMap$724;
}
exports.$init$emptyMap$724=$init$emptyMap$724;
$init$emptyMap$724();
var emptyMap$744;
function getEmptyMap(){
    if(emptyMap$744===undefined){emptyMap$744=$init$emptyMap$724()({Key$Map:{t:Nothing},Item$Map:{t:Nothing}});emptyMap$744.$crtmm$=getEmptyMap.$crtmm$;}
    return emptyMap$744;
}
exports.getEmptyMap=getEmptyMap;
getEmptyMap.$crtmm$=function(){return{mod:$CCMM$,$t:{t:emptyMap$724},$an:function(){return[doc(String$("An immutable [[Map]] with no entries.",37)),shared()];},d:['ceylon.language','emptyMap']};};
$prop$getEmptyMap={get:getEmptyMap,$crtmm$:getEmptyMap.$crtmm$};
exports.$prop$getEmptyMap=$prop$getEmptyMap;
function any(values$745){
    var it$746 = values$745.iterator();
    var val$747;while((val$747=it$746.next())!==getFinished()){
        if(val$747){
            return true;
        }
    }
    return false;
}
exports.any=any;
any.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:$Boolean},Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$an:function(){return[doc(String$("Determines if any one of the given boolean values \n(usually a comprehension) is `true`.",87)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),every)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','any']};};
var byDecreasing=function (comparable$748,$$$mptypes){
    return function(x$749,y$750){{
        return comparable$748(y$750).compare(comparable$748(x$749));
    }
}
}
;
byDecreasing.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Comparison},$ps:[{$nm:'comparable',$mt:'prm',$pt:'f',$t:'Value$byDecreasing',$an:function(){return[];}}],$tp:{Element$byDecreasing:{},Value$byDecreasing:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Value$byDecreasing'}}]}},$an:function(){return[doc(String$("A comparator which orders elements in decreasing order \naccording to the `Comparable` returned by the given \n`comparable()` function.",133)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byIncreasing)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','byDecreasing']};};
exports.byDecreasing=byDecreasing;
var byIncreasing=function (comparable$751,$$$mptypes){
    return function(x$752,y$753){{
        return comparable$751(x$752).compare(comparable$751(y$753));
    }
}
}
;
byIncreasing.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Comparison},$ps:[{$nm:'comparable',$mt:'prm',$pt:'f',$t:'Value$byIncreasing',$an:function(){return[];}}],$tp:{Element$byIncreasing:{},Value$byIncreasing:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Value$byIncreasing'}}]}},$an:function(){return[doc(String$("A comparator which orders elements in increasing order \naccording to the `Comparable` returned by the given \n`comparable()` function.",133)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byDecreasing)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','byIncreasing']};};
exports.byIncreasing=byIncreasing;
var byItem=function (comparing$754,$$$mptypes){
    return function(x$755,y$756){{
        return comparing$754(x$755.item,y$756.item);
    }
}
}
;
byItem.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Comparison},$ps:[{$nm:'comparing',$mt:'prm',$pt:'f',$t:{t:Comparison},$an:function(){return[];}}],$tp:{Item$byItem:{'satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("A comparator for `Entry`s which compares their items \naccording to the given `comparing()` function.",100)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byKey)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','byItem']};};
exports.byItem=byItem;
var byKey=function (comparing$757,$$$mptypes){
    return function(x$758,y$759){{
        return comparing$757(x$758.key,y$759.key);
    }
}
}
;
byKey.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Comparison},$ps:[{$nm:'comparing',$mt:'prm',$pt:'f',$t:{t:Comparison},$an:function(){return[];}}],$tp:{Key$byKey:{'satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("A comparator for `Entry`s which compares their keys \naccording to the given `comparing()` function.",99)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),byItem)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','byKey']};};
exports.byKey=byKey;
var coalesce=function (values$760,$$$mptypes){
    return values$760.coalesced;
};
coalesce.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'i', l:['Element$coalesce',{t:$Object}]},Absent$Iterable:{t:Null}}},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Element$coalesce',Absent$Iterable:{t:Null}}},$an:function(){return[doc("The values, some of which may be null.")];}}],$tp:{Element$coalesce:{}},$an:function(){return[doc(String$("Return a sequence containing the given values which are not\nnull. If there are no values which are not null, return an \nempty sequence.",135)),shared()];},d:['ceylon.language','coalesce']};};
exports.coalesce=coalesce;
function count(values$761){
    var count$762=(0);
    function setCount$762(count$763){return count$762=count$763;};
    var it$764 = values$761.iterator();
    var val$765;while((val$765=it$764.next())!==getFinished()){
        if(val$765){
            (oldcount$766=count$762,count$762=oldcount$766.successor,oldcount$766);
            var oldcount$766;
        }
    }
    return count$762;
}
exports.count=count;
count.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Integer},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:$Boolean},Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$an:function(){return[doc(String$("A count of the number of `true` items in the given values.",58)),shared()];},d:['ceylon.language','count']};};
function emptyOrSingleton(element$767,$$$mptypes){
    var element$768;
    if((element$768=element$767)!==null){
        return Tuple(element$768,getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:$$$mptypes.Element$emptyOrSingleton,Element$Tuple:$$$mptypes.Element$emptyOrSingleton});
    }else {
        return getEmpty();
    }
}
exports.emptyOrSingleton=emptyOrSingleton;
emptyOrSingleton.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:'Element$emptyOrSingleton',$def:1}]},$ps:[{$nm:'element',$mt:'prm',$t:{t:'u', l:[{t:Null},'Element$emptyOrSingleton']},$an:function(){return[];}}],$tp:{Element$emptyOrSingleton:{'satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("A singleton `Tuple` with the given element if the \ngiven element is non-null, or `Empty` otherwise .",100)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Tuple),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Empty)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:InterfaceDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','emptyOrSingleton']};};
var curry=function (f$769,$$$mptypes){
    return function(first$770){{
        return flatten($JsCallable((function (args$771){
            return unflatten($JsCallable(f$769,[],{Return$Callable:$$$mptypes.Return$curry,Arguments$Callable:{t:'T', l:[$$$mptypes.First$curry]}}),{Args$unflatten:{t:'T', l:[$$$mptypes.First$curry]},Return$unflatten:$$$mptypes.Return$curry})(Tuple(first$770,args$771,{Rest$Tuple:$$$mptypes.Rest$curry,First$Tuple:$$$mptypes.First$curry,Element$Tuple:$$$mptypes.Argument$curry}));
        }),[{$nm:'args',$mt:'prm',$t:'Rest$curry',$an:function(){return[];}}],{Return$Callable:$$$mptypes.Return$curry,Arguments$Callable:{t:'T', l:[$$$mptypes.Rest$curry]}}),{Args$flatten:$$$mptypes.Rest$curry,Return$flatten:$$$mptypes.Return$curry});
    }
}
}
;
curry.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Callable,a:{Return$Callable:'Return$curry',Arguments$Callable:'Rest$curry'}},$ps:[{$nm:'f',$mt:'prm',$t:{t:Callable,a:{Return$Callable:'Return$curry',Arguments$Callable:{t:'T',l:[{$t:'First$curry'}]}}},$an:function(){return[];}}],$tp:{Return$curry:{},Argument$curry:{},First$curry:{'satisfies':['Argument$curry']},Rest$curry:{'satisfies':[{t:Sequential,a:{Element$Sequential:'Argument$curry'}}]}},$an:function(){return[doc(String$("Curries a function, returning a function with two \nparameter lists, given a function with at least\none parameter. The first parameter list of the \nreturned function has just the first parameter\nof the original function, and the second parameter\nlist has the remaining parameters.\n\nThat is, if `fun` has type `W(X,Y,Z)` then \n`curry(fun)` has type `W(Y,Z)(X)`.",359)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),uncurry),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),compose)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','curry']};};
exports.curry=curry;
var uncurry=function (f$772,$$$mptypes){
return flatten($JsCallable((function (args$773){
    return unflatten($JsCallable(f$772(args$773.first),[],{Return$Callable:$$$mptypes.Return$uncurry,Arguments$Callable:$$$mptypes.Rest$uncurry}),{Args$unflatten:$$$mptypes.Rest$uncurry,Return$unflatten:$$$mptypes.Return$uncurry})(args$773.rest);
}),[{$nm:'args',$mt:'prm',$t:{t:'T',l:[{$t:'First$uncurry'}]},$an:function(){return[];}}],{Return$Callable:$$$mptypes.Return$uncurry,Arguments$Callable:{t:'T', l:[{t:'T', l:[$$$mptypes.First$uncurry]}]}}),{Args$flatten:{t:'T', l:[$$$mptypes.First$uncurry]},Return$flatten:$$$mptypes.Return$uncurry});
};
uncurry.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Callable,a:{Return$Callable:'Return$uncurry',Arguments$Callable:{t:'T',l:[{$t:'First$uncurry'}]}}},$ps:[{$nm:'f',$mt:'prm',$pt:'f',$t:{t:Callable,a:{Return$Callable:'Return$uncurry',Arguments$Callable:'Rest$uncurry'}},$an:function(){return[];}}],$tp:{Return$uncurry:{},Argument$uncurry:{},First$uncurry:{'satisfies':['Argument$uncurry']},Rest$uncurry:{'satisfies':[{t:Sequential,a:{Element$Sequential:'Argument$uncurry'}}]}},$an:function(){return[doc(String$("Uncurries a function, returning a function with \none parameter list, given a function with two\nparameter lists, where the first parameter list\nhas exactly one parameter. The parameter list\nof the returned function has the parameter of\nthe first parameter list of the original\nfunction, followed by all parameters of the\nsecond parameter list.\n\nThat is, if `fun` has type `W(Y,Z)(X)` then \n`uncurry(fun)` has type `W(X,Y,Z)`.",424)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),curry),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),compose)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','uncurry']};};
exports.uncurry=uncurry;
var entries=function (elements$774,$$$mptypes){
    return elements$774.indexed;
};
entries.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:Entry,a:{Item$Entry:{t:'i', l:['Element$entries',{t:$Object}]},Key$Entry:{t:Integer}}},Absent$Iterable:{t:Null}}},$ps:[{$nm:'elements',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Element$entries',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Element$entries:{}},$an:function(){return[doc(String$("Given a stream of items, produce a stream of entries. \nFor each non-null item produced by the given stream \nof items, the resulting stream contains an `Entry` \nof form `key->item` where `key` is the index at which\nthe item occurs in the stream of items.",253)),see([$init$OpenValue()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),$init$Iterable().$$.prototype.$prop$getIndexed)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ValueDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','entries']};};
exports.entries=entries;
var equalTo=function (val$775,$$$mptypes){
    return function(element$776){{
        return element$776.equals(val$775);
    }
}
}
;
equalTo.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'val',$mt:'prm',$t:'Element$equalTo',$an:function(){return[];}}],$tp:{Element$equalTo:{'satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("Returns a partial function that will compare an element\nto any other element and returns true if they\'re equal.\nThis is useful in conjunction with methods that receive\na predicate function.",189)),shared()];},d:['ceylon.language','equalTo']};};
exports.equalTo=equalTo;
var $apply=function (f$777,args$778,$$$mptypes){
    return unflatten($JsCallable(f$777,[],{Return$Callable:$$$mptypes.Return$apply,Arguments$Callable:$$$mptypes.Args$apply}),{Args$unflatten:$$$mptypes.Args$apply,Return$unflatten:$$$mptypes.Return$apply})(args$778);
};
$apply.$crtmm$=function(){return{mod:$CCMM$,$t:'Return$apply',$ps:[{$nm:'f',$mt:'prm',$t:{t:Callable,a:{Return$Callable:'Return$apply',Arguments$Callable:'Args$apply'}},$an:function(){return[];}},{$nm:'args',$mt:'prm',$t:'Args$apply',$an:function(){return[];}}],$tp:{Return$apply:{},Args$apply:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}]}},$an:function(){return[doc(String$("Applies an arbitrary `Callable` to the specified arguments. The arguments\nare taken packaged in a tuple whose type is compatible with the `Callable`\narguments tuple.\n\nIn practice, this behaves as if the `Callable` were called with the elements\nof the tuple used as its arguments.",279)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),unflatten)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','apply']};};
exports.$apply=$apply;
function every(values$779){
    var it$780 = values$779.iterator();
    var val$781;while((val$781=it$780.next())!==getFinished()){
        if((!val$781)){
            return false;
        }
    }
    return true;
}
exports.every=every;
every.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:$Boolean},Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$an:function(){return[doc(String$("Determines if every one of the given boolean values \n(usually a comprehension) is `true`.",89)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),any)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','every']};};
function first(values$782,$$$mptypes){
    var first$783;
    var next$784;
    if(!isOfType((next$784=values$782.iterator().next()),{t:Finished})){
        first$783=next$784;
    }else {
        first$783=null;
    }
    //assert at first.ceylon (12:4-12:34)
    var first$785;
    if(!(isOfType((first$785=first$783),{t:'u', l:[$$$mptypes.Absent$first,$$$mptypes.Value$first]}))) {throw wrapexc(AssertionException("Assertion failed: \'is Absent|Value first\' at first.ceylon (12:11-12:33)"),'12:4-12:34','first.ceylon'); }
    return first$785;
}
exports.first=first;
first.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Absent$first','Value$first']},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Value$first',Absent$Iterable:'Absent$first'}},$an:function(){return[];}}],$tp:{Value$first:{},Absent$first:{'satisfies':[{t:Null}]}},$an:function(){return[doc(String$("The first of the given values (usually a comprehension),\nif any.",64)),shared()];},d:['ceylon.language','first']};};
var forItem=function (resulting$786,$$$mptypes){
    return function(entry$787){{
        return resulting$786(entry$787.item);
    }
}
}
;
forItem.$crtmm$=function(){return{mod:$CCMM$,$t:'Result$forItem',$ps:[{$nm:'resulting',$mt:'prm',$pt:'f',$t:'Result$forItem',$an:function(){return[];}}],$tp:{Item$forItem:{'satisfies':[{t:$Object}]},Result$forItem:{}},$an:function(){return[doc(String$("A function that returns the result of the given `resulting()` function \non the item of a given `Entry`.",103)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),forKey)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','forItem']};};
exports.forItem=forItem;
var forKey=function (resulting$788,$$$mptypes){
    return function(entry$789){{
        return resulting$788(entry$789.key);
    }
}
}
;
forKey.$crtmm$=function(){return{mod:$CCMM$,$t:'Result$forKey',$ps:[{$nm:'resulting',$mt:'prm',$pt:'f',$t:'Result$forKey',$an:function(){return[];}}],$tp:{Key$forKey:{'satisfies':[{t:$Object}]},Result$forKey:{}},$an:function(){return[doc(String$("A function that returns the result of the given `resulting()` function \non the key of a given `Entry`.",102)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),forItem)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','forKey']};};
exports.forKey=forKey;
var greaterThan=function (val$790,$$$mptypes){
    return function(element$791){{
        return element$791.compare(val$790).equals(getLarger());
    }
}
}
;
greaterThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'val',$mt:'prm',$t:'Element$greaterThan',$an:function(){return[];}}],$tp:{Element$greaterThan:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Element$greaterThan'}}]}},$an:function(){return[doc(String$("Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement is greater than its element.\nThis is useful in conjunction with methods that receive\na predicate function.",224)),deprecated(String$("use [[Comparable.smallerThan]]",30)),shared()];},d:['ceylon.language','greaterThan']};};
exports.greaterThan=greaterThan;
var concatenate=function (iterables$792,$$$mptypes){
    if(iterables$792===undefined){iterables$792=getEmpty();}
    return Comprehension(function(){
        var it$793=iterables$792.iterator();
        var it$794=getFinished();
        var next$it$794=function(){
            if((it$794=it$793.next())!==getFinished()){
                it$795=it$794.iterator();
                next$val$796();
                return it$794;
            }
            return getFinished();
        }
        var it$795;
        var val$796=getFinished();
        var next$val$796=function(){return val$796=it$795.next();}
        next$it$794();
        return function(){
            do{
                if(val$796!==getFinished()){
                    var val$796$797=val$796;
                    var tmpvar$798=val$796$797;
                    next$val$796();
                    return tmpvar$798;
                }
            }while(next$it$794()!==getFinished());
            return getFinished();
        }
    },{Absent$Iterable:{t:Null},Element$Iterable:$$$mptypes.Element$concatenate}).sequence;
};
concatenate.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$concatenate'}},$ps:[{$nm:'iterables',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Iterable,a:{Element$Iterable:'Element$concatenate',Absent$Iterable:{t:Null}}}}},$an:function(){return[doc("The iterable objects to concatenate.")];}}],$tp:{Element$concatenate:{}},$an:function(){return[doc(String$("Given a list of iterable objects, return a new sequence \nof all elements of the all given objects. If there are\nno arguments, or if none of the arguments contains any\nelements, return the empty sequence.",203)),see([$init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),SequenceBuilder),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),expand)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','concatenate']};};
exports.concatenate=concatenate;
var expand=function (iterables$799,$$$mptypes){
    return Comprehension(function(){
        var it$800=iterables$799.iterator();
        var it$801=getFinished();
        var next$it$801=function(){
            if((it$801=it$800.next())!==getFinished()){
                it$802=it$801.iterator();
                next$val$803();
                return it$801;
            }
            return getFinished();
        }
        var it$802;
        var val$803=getFinished();
        var next$val$803=function(){return val$803=it$802.next();}
        next$it$801();
        return function(){
            do{
                if(val$803!==getFinished()){
                    var val$803$804=val$803;
                    var tmpvar$805=val$803$804;
                    next$val$803();
                    return tmpvar$805;
                }
            }while(next$it$801()!==getFinished());
            return getFinished();
        }
    },{Absent$Iterable:{t:Null},Element$Iterable:$$$mptypes.Element$expand});
};
expand.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Element$expand',Absent$Iterable:{t:'u', l:['OuterAbsent$expand','InnerAbsent$expand']}}},$ps:[{$nm:'iterables',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:Iterable,a:{Element$Iterable:'Element$expand',Absent$Iterable:'InnerAbsent$expand'}},Absent$Iterable:'OuterAbsent$expand'}},$an:function(){return[];}}],$tp:{Element$expand:{},OuterAbsent$expand:{'satisfies':[{t:Null}]},InnerAbsent$expand:{'satisfies':[{t:Null}]}},$an:function(){return[doc(String$("Given an iterable object whose elements are also iterable,\nreturn a new stream with all the elements of the nested\niterables. If there are no arguments, or if none of the \narguments contains any elements, return an empty iterable.",230)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),concatenate)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','expand']};};
exports.expand=expand;
var largest=function (x$806,y$807,$$$mptypes){
    return (opt$808=(x$806.compare(y$807).equals(getLarger())?x$806:null),opt$808!==null&&opt$808!==undefined?opt$808:y$807);
};
largest.$crtmm$=function(){return{mod:$CCMM$,$t:'Element$largest',$ps:[{$nm:'x',$mt:'prm',$t:'Element$largest',$an:function(){return[];}},{$nm:'y',$mt:'prm',$t:'Element$largest',$an:function(){return[];}}],$tp:{Element$largest:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Element$largest'}}]}},$an:function(){return[doc(String$("Given two `Comparable` values, return largest of the\ntwo.",57)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Comparable),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),smallest),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),max)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:InterfaceDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','largest']};};
exports.largest=largest;
var opt$808;
var lessThan=function (val$809,$$$mptypes){
    return function(element$810){{
        return element$810.compare(val$809).equals(getSmaller());
    }
}
}
;
lessThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'val',$mt:'prm',$t:'Element$lessThan',$an:function(){return[];}}],$tp:{Element$lessThan:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Element$lessThan'}}]}},$an:function(){return[doc(String$("Returns a partial function that will compare an element\nto any other element and returns true if the compared\nelement is less than its element.\nThis is useful in conjunction with methods that receive\na predicate function.",221)),deprecated(String$("use [[Comparable.largerThan]]",29)),shared()];},d:['ceylon.language','lessThan']};};
exports.lessThan=lessThan;
function max(values$811,$$$mptypes){
    var it$812=values$811.iterator();
    var first$813;
    if(isOfType((first$813=it$812.next()),$$$mptypes.Value$max)){
        var max$814=first$813;
        function setMax$814(max$815){return max$814=max$815;};
        var val$816;
        while(isOfType((val$816=it$812.next()),$$$mptypes.Value$max)){
            if(val$816.compare(max$814).equals(getLarger())){
                max$814=val$816;
            }
        }
        return max$814;
    }else {
        //assert at max.ceylon (20:8-21:31)
        var null$817;
        if(!(isOfType((null$817=null),$$$mptypes.Absent$max))) {throw wrapexc(AssertionException("iterable must be empty: \'is Absent null\' at max.ceylon (21:15-21:30)"),'20:8-21:31','max.ceylon'); }
        return null;
    }
}
exports.max=max;
max.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Absent$max','Value$max']},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Value$max',Absent$Iterable:'Absent$max'}},$an:function(){return[];}}],$tp:{Value$max:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Value$max'}}]},Absent$max:{'satisfies':[{t:Null}]}},$an:function(){return[doc(String$("Given a nonempty stream of `Comparable` values, \nreturn the largest value in the stream.",88)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Comparable),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),min),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),largest)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:InterfaceDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','max']};};
function min(values$818,$$$mptypes){
    var it$819=values$818.iterator();
    var first$820;
    if(isOfType((first$820=it$819.next()),$$$mptypes.Value$min)){
        var min$821=first$820;
        function setMin$821(min$822){return min$821=min$822;};
        var val$823;
        while(isOfType((val$823=it$819.next()),$$$mptypes.Value$min)){
            if(val$823.compare(min$821).equals(getSmaller())){
                min$821=val$823;
            }
        }
        return min$821;
    }else {
        //assert at min.ceylon (20:8-21:31)
        var null$824;
        if(!(isOfType((null$824=null),$$$mptypes.Absent$min))) {throw wrapexc(AssertionException("iterable must be empty: \'is Absent null\' at min.ceylon (21:15-21:30)"),'20:8-21:31','min.ceylon'); }
        return null;
    }
}
exports.min=min;
min.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Absent$min','Value$min']},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Value$min',Absent$Iterable:'Absent$min'}},$an:function(){return[];}}],$tp:{Value$min:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Value$min'}}]},Absent$min:{'satisfies':[{t:Null}]}},$an:function(){return[doc(String$("Given a nonempty stream of `Comparable` values, \nreturn the smallest value in the stream.",89)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Comparable),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),max),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),smallest)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:InterfaceDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','min']};};
var smallest=function (x$825,y$826,$$$mptypes){
    return (opt$827=(x$825.compare(y$826).equals(getSmaller())?x$825:null),opt$827!==null&&opt$827!==undefined?opt$827:y$826);
};
smallest.$crtmm$=function(){return{mod:$CCMM$,$t:'Element$smallest',$ps:[{$nm:'x',$mt:'prm',$t:'Element$smallest',$an:function(){return[];}},{$nm:'y',$mt:'prm',$t:'Element$smallest',$an:function(){return[];}}],$tp:{Element$smallest:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Element$smallest'}}]}},$an:function(){return[doc(String$("Given two `Comparable` values, return smallest of the\ntwo.",58)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Comparable),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),largest),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),min)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:InterfaceDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','smallest']};};
exports.smallest=smallest;
var opt$827;
function sum(values$828,$$$mptypes){
    var it$829=values$828.iterator();
    //assert at sum.ceylon (7:4-7:39)
    var first$830;
    if(!(isOfType((first$830=it$829.next()),$$$mptypes.Value$sum))) {throw wrapexc(AssertionException("Assertion failed: \'is Value first = it.next()\' at sum.ceylon (7:11-7:38)"),'7:4-7:39','sum.ceylon'); }
    var sum$831=first$830;
    function setSum$831(sum$832){return sum$831=sum$832;};
    var val$833;
    while(isOfType((val$833=it$829.next()),$$$mptypes.Value$sum)){
        (sum$831=sum$831.plus(val$833));
    }
    return sum$831;
}
exports.sum=sum;
sum.$crtmm$=function(){return{mod:$CCMM$,$t:'Value$sum',$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Value$sum',Absent$Iterable:{t:Nothing}}},$an:function(){return[];}}],$tp:{Value$sum:{'satisfies':[{t:Summable,a:{Other$Summable:'Value$sum'}}]}},$an:function(){return[doc(String$("Given a nonempty stream of [[Summable]] values, return the \nsum of the values.",78)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),product)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','sum']};};
function product(values$834,$$$mptypes){
    var product$835=values$834.first;
    function setProduct$835(product$836){return product$835=product$836;};
    var it$837 = values$834.rest.iterator();
    var val$838;while((val$838=it$837.next())!==getFinished()){
        (product$835=product$835.times(val$838));
    }
    return product$835;
}
exports.product=product;
product.$crtmm$=function(){return{mod:$CCMM$,$t:'Value$product',$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Value$product',Absent$Iterable:{t:Nothing}}},$an:function(){return[];}}],$tp:{Value$product:{'satisfies':[{t:Numeric,a:{Other$Numeric:'Value$product'}}]}},$an:function(){return[doc(String$("Given a nonempty stream of [[Numeric]] values, return the \nproduct of the values.",81)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),sum)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','product']};};
var zipEntries=function (keys$839,items$840,$$$mptypes){
    return mapPairs($JsCallable(Entry,[],{Return$Callable:{t:Entry,a:{Item$Entry:$$$mptypes.Item$zipEntries,Key$Entry:$$$mptypes.Key$zipEntries}},Arguments$Callable:{t:'T', l:[$$$mptypes.Key$zipEntries,$$$mptypes.Item$zipEntries]}}),keys$839,items$840,{Result$mapPairs:{t:Entry,a:{Item$Entry:$$$mptypes.Item$zipEntries,Key$Entry:$$$mptypes.Key$zipEntries}},FirstArgument$mapPairs:$$$mptypes.Key$zipEntries,SecondArgument$mapPairs:$$$mptypes.Item$zipEntries});
};
zipEntries.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:Entry,a:{Item$Entry:'Item$zipEntries',Key$Entry:'Key$zipEntries'}},Absent$Iterable:{t:Null}}},$ps:[{$nm:'keys',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Key$zipEntries',Absent$Iterable:{t:Null}}},$an:function(){return[];}},{$nm:'items',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Item$zipEntries',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Key$zipEntries:{'satisfies':[{t:$Object}]},Item$zipEntries:{'satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("Given two streams, form a new stream consisting of\nall entries where, for any given index in the resulting\nstream, the key of the entry is the element occurring \nat the same index in the first stream, and the item is \nthe element occurring at the same index in the second \nstream. The length of the resulting stream is the \nlength of the shorter of the two given streams.\n\nThus:\n\n    zipEntries(keys,items)[i]==keys[i]->items[i]\n\nfor every `0<=i<min({keys.size,items.size})`.",475)),shared()];},d:['ceylon.language','zipEntries']};};
exports.zipEntries=zipEntries;
var zipPairs=function (firstElements$841,secondElements$842,$$$mptypes){
    return mapPairs($JsCallable((function (first$843,second$844){
        return Tuple(first$843,Tuple(second$844,getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:$$$mptypes.Second$zipPairs,Element$Tuple:$$$mptypes.Second$zipPairs}),{Rest$Tuple:{t:'T', l:[$$$mptypes.Second$zipPairs]},First$Tuple:$$$mptypes.First$zipPairs,Element$Tuple:{t:'u', l:[$$$mptypes.First$zipPairs,$$$mptypes.Second$zipPairs]}});
    }),[{$nm:'first',$mt:'prm',$t:'First$zipPairs',$an:function(){return[];}},{$nm:'second',$mt:'prm',$t:'Second$zipPairs',$an:function(){return[];}}],{Return$Callable:{t:'T', l:[$$$mptypes.First$zipPairs,$$$mptypes.Second$zipPairs]},Arguments$Callable:{t:'T', l:[$$$mptypes.First$zipPairs,$$$mptypes.Second$zipPairs]}}),firstElements$841,secondElements$842,{Result$mapPairs:{t:'T', l:[$$$mptypes.First$zipPairs,$$$mptypes.Second$zipPairs]},FirstArgument$mapPairs:$$$mptypes.First$zipPairs,SecondArgument$mapPairs:$$$mptypes.Second$zipPairs});
};
zipPairs.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'T',l:[{$t:'First$zipPairs'},{$t:'Second$zipPairs'}]},Absent$Iterable:{t:Null}}},$ps:[{$nm:'firstElements',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'First$zipPairs',Absent$Iterable:{t:Null}}},$an:function(){return[];}},{$nm:'secondElements',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Second$zipPairs',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{First$zipPairs:{},Second$zipPairs:{}},$an:function(){return[doc(String$("Given two streams, form a new stream consisting of\nall pairs where, for any given index in the resulting\nstream, the first element of the pair is the element \noccurring at the same index in the first stream, and \nthe second element of the pair is the element occurring \nat the same index in the second stream. The length of \nthe resulting stream is the length of the shorter of the \ntwo given streams.\n\nThus:\n\n    zipPairs(xs,ys)[i]==[xs[i],ys[i]]\n\nfor every `0<=i<min({xs.size,ys.size})`.",489)),shared()];},d:['ceylon.language','zipPairs']};};
exports.zipPairs=zipPairs;
var zip=function (heads$845,tails$846,$$$mptypes){
    return mapPairs($JsCallable(Tuple,[],{Return$Callable:{t:'T', l:[$$$mptypes.Head$zip]},Arguments$Callable:{t:'T', l:[$$$mptypes.Head$zip,$$$mptypes.Tail$zip]}}),heads$845,tails$846,{Result$mapPairs:{t:'T', l:[$$$mptypes.Head$zip]},FirstArgument$mapPairs:$$$mptypes.Head$zip,SecondArgument$mapPairs:$$$mptypes.Tail$zip});
};
zip.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:{t:'T',l:[{$t:'Head$zip'}]},Absent$Iterable:{t:Null}}},$ps:[{$nm:'heads',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Head$zip',Absent$Iterable:{t:Null}}},$an:function(){return[];}},{$nm:'tails',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Tail$zip',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Element$zip:{},Head$zip:{},Tail$zip:{'satisfies':[{t:Sequential,a:{Element$Sequential:'Element$zip'}}]}},$an:function(){return[doc(String$("Given a stream of values, and a stream of tuples, produce\na new stream of tuples formed by prepending the values in\nthe first stream to the tuples in the second stream. The \nlength of the resulting stream is the length of the shorter \nof the two given streams.\n\nThus:\n\n    zip(heads, tails)[i]==[heads[i],*tails[i]]\n\nfor every `0<=i<min({heads.size,tails.size})`.",363)),shared()];},d:['ceylon.language','zip']};};
exports.zip=zip;
var unzip=function (tuples$847,$$$mptypes){
    return Tuple(tuples$847.$map($JsCallable((function (tuple$848){
        return tuple$848.first;
    }),[{$nm:'tuple',$mt:'prm',$t:{t:'T',l:[{$t:'Head$unzip'}]},$an:function(){return[];}}],{Return$Callable:$$$mptypes.Head$unzip,Arguments$Callable:{t:'T', l:[{t:'T', l:[$$$mptypes.Head$unzip]}]}}),{Result$map:$$$mptypes.Head$unzip}),Tuple(tuples$847.$map($JsCallable((function (tuple$849){
        return tuple$849.rest;
    }),[{$nm:'tuple',$mt:'prm',$t:{t:'T',l:[{$t:'Head$unzip'}]},$an:function(){return[];}}],{Return$Callable:$$$mptypes.Tail$unzip,Arguments$Callable:{t:'T', l:[{t:'T', l:[$$$mptypes.Head$unzip]}]}}),{Result$map:$$$mptypes.Tail$unzip}),getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Tail$unzip,Absent$Iterable:{t:Null}}},Element$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Tail$unzip,Absent$Iterable:{t:Null}}}}),{Rest$Tuple:{t:'T', l:[{t:Iterable,a:{Element$Iterable:$$$mptypes.Tail$unzip,Absent$Iterable:{t:Null}}}]},First$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Head$unzip,Absent$Iterable:{t:Null}}},Element$Tuple:{t:'u', l:[{t:Iterable,a:{Element$Iterable:$$$mptypes.Head$unzip,Absent$Iterable:{t:Null}}},{t:Iterable,a:{Element$Iterable:$$$mptypes.Tail$unzip,Absent$Iterable:{t:Null}}}]}});
};
unzip.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:{t:Iterable,a:{Element$Iterable:'Head$unzip',Absent$Iterable:{t:Null}}}},{$t:{t:Iterable,a:{Element$Iterable:'Tail$unzip',Absent$Iterable:{t:Null}}}}]},$ps:[{$nm:'tuples',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:'T',l:[{$t:'Head$unzip'}]},Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Element$unzip:{},Head$unzip:{},Tail$unzip:{'satisfies':[{t:Sequential,a:{Element$Sequential:'Element$unzip'}}]}},$an:function(){return[doc(String$("Given a stream of tuples, return two streams. The\nfirst stream produces the first elements of the\ngiven tuples, and the second stream produces the\nremaining elements of the given tuples.\n\nThus:\n\n    tuples[i]==[unzip(tuples)[0][i],*unzip(tuples)[1][i]]",252)),shared()];},d:['ceylon.language','unzip']};};
exports.unzip=unzip;
var unzipPairs=function (pairs$850,$$$mptypes){
    return Tuple(pairs$850.$map($JsCallable((function (pair$851){
        return pair$851.$get((0));
    }),[{$nm:'pair',$mt:'prm',$t:{t:'T',l:[{$t:'First$unzipPairs'},{$t:'Second$unzipPairs'}]},$an:function(){return[];}}],{Return$Callable:$$$mptypes.First$unzipPairs,Arguments$Callable:{t:'T', l:[{t:'T', l:[$$$mptypes.First$unzipPairs,$$$mptypes.Second$unzipPairs]}]}}),{Result$map:$$$mptypes.First$unzipPairs}),Tuple(pairs$850.$map($JsCallable((function (pair$852){
        return pair$852.$get((1));
    }),[{$nm:'pair',$mt:'prm',$t:{t:'T',l:[{$t:'First$unzipPairs'},{$t:'Second$unzipPairs'}]},$an:function(){return[];}}],{Return$Callable:$$$mptypes.Second$unzipPairs,Arguments$Callable:{t:'T', l:[{t:'T', l:[$$$mptypes.First$unzipPairs,$$$mptypes.Second$unzipPairs]}]}}),{Result$map:$$$mptypes.Second$unzipPairs}),getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Second$unzipPairs,Absent$Iterable:{t:Null}}},Element$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Second$unzipPairs,Absent$Iterable:{t:Null}}}}),{Rest$Tuple:{t:'T', l:[{t:Iterable,a:{Element$Iterable:$$$mptypes.Second$unzipPairs,Absent$Iterable:{t:Null}}}]},First$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.First$unzipPairs,Absent$Iterable:{t:Null}}},Element$Tuple:{t:'u', l:[{t:Iterable,a:{Element$Iterable:$$$mptypes.First$unzipPairs,Absent$Iterable:{t:Null}}},{t:Iterable,a:{Element$Iterable:$$$mptypes.Second$unzipPairs,Absent$Iterable:{t:Null}}}]}});
};
unzipPairs.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:{t:Iterable,a:{Element$Iterable:'First$unzipPairs',Absent$Iterable:{t:Null}}}},{$t:{t:Iterable,a:{Element$Iterable:'Second$unzipPairs',Absent$Iterable:{t:Null}}}}]},$ps:[{$nm:'pairs',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:'T',l:[{$t:'First$unzipPairs'},{$t:'Second$unzipPairs'}]},Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{First$unzipPairs:{},Second$unzipPairs:{}},$an:function(){return[doc(String$("Given a stream of pairs, return two streams. The\nfirst stream produces the first elements of the\ngiven pairs, and the second stream produces the\nsecond elements of the given pairs.\n\nThus:\n\n    pairs[i]==[unzipPairs(pairs)[0][i],unzipPairs(pairs)[1][i]]",252)),shared()];},d:['ceylon.language','unzipPairs']};};
exports.unzipPairs=unzipPairs;
var unzipEntries=function (entries$853,$$$mptypes){
    return Tuple(entries$853.$map($JsCallable(function($O$) {return $O$.key;},[],{Return$Callable:$$$mptypes.Key$unzipEntries,Arguments$Callable:{t:'T', l:[{t:Entry,a:{Item$Entry:$$$mptypes.Item$unzipEntries,Key$Entry:$$$mptypes.Key$unzipEntries}}]}}),{Result$map:$$$mptypes.Key$unzipEntries}),Tuple(entries$853.$map($JsCallable(function($O$) {return $O$.item;},[],{Return$Callable:$$$mptypes.Item$unzipEntries,Arguments$Callable:{t:'T', l:[{t:Entry,a:{Item$Entry:$$$mptypes.Item$unzipEntries,Key$Entry:$$$mptypes.Key$unzipEntries}}]}}),{Result$map:$$$mptypes.Item$unzipEntries}),getEmpty(),{Rest$Tuple:{t:Empty},First$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Item$unzipEntries,Absent$Iterable:{t:Null}}},Element$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Item$unzipEntries,Absent$Iterable:{t:Null}}}}),{Rest$Tuple:{t:'T', l:[{t:Iterable,a:{Element$Iterable:$$$mptypes.Item$unzipEntries,Absent$Iterable:{t:Null}}}]},First$Tuple:{t:Iterable,a:{Element$Iterable:$$$mptypes.Key$unzipEntries,Absent$Iterable:{t:Null}}},Element$Tuple:{t:'u', l:[{t:Iterable,a:{Element$Iterable:$$$mptypes.Key$unzipEntries,Absent$Iterable:{t:Null}}},{t:Iterable,a:{Element$Iterable:$$$mptypes.Item$unzipEntries,Absent$Iterable:{t:Null}}}]}});
};
unzipEntries.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'T',l:[{$t:{t:Iterable,a:{Element$Iterable:'Key$unzipEntries',Absent$Iterable:{t:Null}}}},{$t:{t:Iterable,a:{Element$Iterable:'Item$unzipEntries',Absent$Iterable:{t:Null}}}}]},$ps:[{$nm:'entries',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:Entry,a:{Item$Entry:'Item$unzipEntries',Key$Entry:'Key$unzipEntries'}},Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Key$unzipEntries:{'satisfies':[{t:$Object}]},Item$unzipEntries:{'satisfies':[{t:$Object}]}},$an:function(){return[doc(String$("Given a stream of entries, return two streams. The\nfirst stream produces the keys of the given entries, \nand the second stream produces the items of the given \nentries.\n\nThus:\n\n    entries[i]==unzipEntries(entries)[0][i]->unzipEntries(entries)[1][i]",249)),shared()];},d:['ceylon.language','unzipEntries']};};
exports.unzipEntries=unzipEntries;
function mapPairs(collecting$854,firstArguments$855,secondArguments$856,$$$mptypes){
    function iterable$857($$targs$$){
        var $$iterable$857=new iterable$857.$$;
        $$iterable$857.$$targs$$=$$targs$$;
        Iterable({Element$Iterable:$$$mptypes.Result$mapPairs,Absent$Iterable:{t:Null}},$$iterable$857);
        add_type_arg($$iterable$857,'Absent$Iterable',{t:Null});
        return $$iterable$857;
    };iterable$857.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterable,a:{Element$Iterable:'Result$mapPairs',Absent$Iterable:{t:Null}}}],d:['ceylon.language','mapPairs','$o','iterable']};};
    function $init$iterable$857(){
        if(iterable$857.$$===undefined){
            initTypeProto(iterable$857,'ceylon.language::mapPairs.iterable',Basic,$init$Iterable());
            (function($$iterable$857){
                $$iterable$857.iterator=function iterator(){
                    var $$iterable$857=this;
                    var first$858=firstArguments$855.iterator();
                    var second$859=secondArguments$856.iterator();
                    function iterator$860($$targs$$){
                        var $$iterator$860=new iterator$860.$$;
                        $$iterator$860.$$outer=$$iterable$857;
                        $$iterator$860.$$targs$$=$$targs$$;
                        Iterator({Element$Iterator:$$$mptypes.Result$mapPairs},$$iterator$860);
                        return $$iterator$860;
                    };iterator$860.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:'Result$mapPairs'}}],d:['ceylon.language','mapPairs','$o','iterable','$m','iterator','$o','iterator']};};
                    function $init$iterator$860(){
                        if(iterator$860.$$===undefined){
                            initTypeProto(iterator$860,'ceylon.language::mapPairs.iterable.iterator.iterator',Basic,$init$Iterator());
                            (function($$iterator$860){
                                $$iterator$860.next=function next(){
                                    var $$iterator$860=this;
                                    var firstArg$861;
                                    var secondArg$862;
                                    if(!isOfType((firstArg$861=first$858.next()),{t:Finished})&&!isOfType((secondArg$862=second$859.next()),{t:Finished})){
                                        return collecting$854(firstArg$861,secondArg$862);
                                    }else {
                                        return getFinished();
                                    }
                                };$$iterator$860.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:['Result$mapPairs',{t:Finished}]},$ps:[],$cont:iterator$860,$an:function(){return[shared(),actual()];},d:['ceylon.language','mapPairs','$o','iterable','$m','iterator','$o','iterator','$m','next']};};
                            })(iterator$860.$$.prototype);
                        }
                        return iterator$860;
                    }
                    $init$iterator$860();
                    var iterator$863;
                    function getIterator$863(){
                        if(iterator$863===undefined){iterator$863=$init$iterator$860()({Element$Iterator:$$$mptypes.Result$mapPairs});iterator$863.$crtmm$=getIterator$863.$crtmm$;}
                        return iterator$863;
                    }
                    getIterator$863.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterator$860},d:['ceylon.language','mapPairs','$o','iterable','$m','iterator','$o','iterator']};};
                    $prop$getIterator$863={get:getIterator$863,$crtmm$:getIterator$863.$crtmm$};
                    return getIterator$863();
                };$$iterable$857.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:'Result$mapPairs'}},$ps:[],$cont:iterable$857,$an:function(){return[shared(),actual()];},d:['ceylon.language','mapPairs','$o','iterable','$m','iterator']};};
            })(iterable$857.$$.prototype);
        }
        return iterable$857;
    }
    $init$iterable$857();
    var iterable$864;
    function getIterable$864(){
        if(iterable$864===undefined){iterable$864=$init$iterable$857()({Absent$Iterable:{t:Null},Element$Iterable:$$$mptypes.Result$mapPairs});iterable$864.$crtmm$=getIterable$864.$crtmm$;}
        return iterable$864;
    }
    getIterable$864.$crtmm$=function(){return{mod:$CCMM$,$t:{t:iterable$857},d:['ceylon.language','mapPairs','$o','iterable']};};
    $prop$getIterable$864={get:getIterable$864,$crtmm$:getIterable$864.$crtmm$};
    return getIterable$864();
}
exports.mapPairs=mapPairs;
mapPairs.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Element$Iterable:'Result$mapPairs',Absent$Iterable:{t:Null}}},$ps:[{$nm:'collecting',$mt:'prm',$pt:'f',$t:'Result$mapPairs',$an:function(){return[];}},{$nm:'firstArguments',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'FirstArgument$mapPairs',Absent$Iterable:{t:Null}}},$an:function(){return[];}},{$nm:'secondArguments',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'SecondArgument$mapPairs',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Result$mapPairs:{},FirstArgument$mapPairs:{},SecondArgument$mapPairs:{}},$an:function(){return[doc(String$("Given two streams, form a new stream by applying a \nfunction to the arguments in the given streams. The \nlength of the resulting stream is the length of \nthe shorter of the two given streams.\n\nThus:\n\n    mapPairs(fun,xs,ys)[i]==fun(xs[i],ys[i])\n\nfor every `0<=i<min({xs.size,ys.size})`.",286)),shared()];},d:['ceylon.language','mapPairs']};};
var print=function (val$865){
    return getProcess().writeLine(stringify(val$865));
};
print.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'val',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$an:function(){return[doc(String$("Print a line to the standard output of the virtual machine \nprocess, printing the given value\'s `string`, or `<null>` \nif the value is `null`.\n\nThis method is a shortcut for:\n\n    process.writeLine(line?.string else \"<null>\")\n\nand is intended mainly for debugging purposes.",273)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),getProcess().writeLine)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];},d:['ceylon.language','print']};};
exports.print=print;
function printAll(values$866,separator$867){
    if(separator$867===undefined){separator$867=String$(", ",2);}
    var first$868;
    if((first$868=values$866.first)!==null){
        getProcess().write(stringify(first$868));
        var it$869 = values$866.rest.iterator();
        var val$870;while((val$870=it$869.next())!==getFinished()){
            getProcess().write(separator$867);
            getProcess().write(stringify(val$870));
        }
    }
    getProcess().write(getOperatingSystem().newline);
}
exports.printAll=printAll;
printAll.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'values',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:{t:Anything},Absent$Iterable:{t:Null}}},$an:function(){return[];}},{$nm:'separator',$mt:'prm',$def:1,$t:{t:String$},$an:function(){return[doc("A character sequence to use to separate the values")];}}],$an:function(){return[doc(String$("Print multiple values to the standard output of the virtual \nmachine process as a single line of text, separated by a\ngiven character sequence.",143)),by([String$("Gavin",5)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),getProcess().write)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','printAll']};};
var stringify=function (val$871){
    return (opt$872=(opt$873=val$871,opt$873!==null&&opt$873!==undefined?opt$873.string:null),opt$872!==null&&opt$872!==undefined?opt$872:String$("<null>",6));
};
stringify.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},$ps:[{$nm:'val',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],d:['ceylon.language','stringify']};};
var opt$872,opt$873;
function getNothing(){
    //assert at nothing.ceylon (10:4-11:18)
    if(!(false)) {throw wrapexc(AssertionException("nothing may not be evaluated: \'false\' at nothing.ceylon (11:11-11:17)"),'10:4-11:18','nothing.ceylon'); }
}
exports.getNothing=getNothing;
var $prop$getNothing={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Nothing},$an:function(){return[doc(String$("A value getter of type `Nothing`. The expression `nothing`\nis formally assignable to any type, but produces an \nexception when evaluated.\n\n(This is most useful for tool-generated implementations of\n`formal` members.)",216)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),AssertionError),String$("when evaluated",14)),shared()];},d:['ceylon.language','nothing']};}};
exports.$prop$getNothing=$prop$getNothing;
$prop$getNothing.get=getNothing;
getNothing.$crtmm$=$prop$getNothing.$crtmm$;
var identical=function (x$874,y$875){
    return (x$874===y$875);
};
identical.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'x',$mt:'prm',$t:{t:Identifiable},$an:function(){return[doc("An object with well-defined identity.")];}},{$nm:'y',$mt:'prm',$t:{t:Identifiable},$an:function(){return[doc("A second object with well-defined identity.")];}}],$an:function(){return[doc(String$("Determine if the arguments are identical. Equivalent to\n`x===y`. Only instances of `Identifiable` have \nwell-defined identity.",126)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),identityHash)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','identical']};};
exports.identical=identical;
var compose=function (x$876,y$877,$$$mptypes){
    return flatten($JsCallable((function (args$878){
        return x$876(unflatten($JsCallable(y$877,[],{Return$Callable:$$$mptypes.Y$compose,Arguments$Callable:$$$mptypes.Args$compose}),{Args$unflatten:$$$mptypes.Args$compose,Return$unflatten:$$$mptypes.Y$compose})(args$878));
    }),[{$nm:'args',$mt:'prm',$t:'Args$compose',$an:function(){return[];}}],{Return$Callable:$$$mptypes.X$compose,Arguments$Callable:{t:'T', l:[$$$mptypes.Args$compose]}}),{Args$flatten:$$$mptypes.Args$compose,Return$flatten:$$$mptypes.X$compose});
};
compose.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Callable,a:{Return$Callable:'X$compose',Arguments$Callable:'Args$compose'}},$ps:[{$nm:'x',$mt:'prm',$t:{t:Callable,a:{Return$Callable:'X$compose',Arguments$Callable:{t:'T',l:[{$t:'Y$compose'}]}}},$an:function(){return[];}},{$nm:'y',$mt:'prm',$t:{t:Callable,a:{Return$Callable:'Y$compose',Arguments$Callable:'Args$compose'}},$an:function(){return[];}}],$tp:{X$compose:{},Y$compose:{},Args$compose:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}]}},$an:function(){return[doc(String$("Given a function with return type `Y`, and a second \nfunction with a single parameter also of type `Y`, \nreturn the composition of the two functions. The\nfirst function may have any number of parameters.\n\nFor any such functions `f()` and `g()`,\n\n    compose(g,f)(*args)==g(f(*args))\n\nfor every possible argument tuple `args` of `f()`.",334)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),curry),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),uncurry)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','compose']};};
exports.compose=compose;
var shuffle=function (f$879,$$$mptypes){
    return flatten($JsCallable((function (secondArgs$880){
        return flatten($JsCallable((function (firstArgs$881){
            return unflatten($JsCallable(unflatten($JsCallable(f$879,[],{Return$Callable:{t:Callable,a:{Return$Callable:$$$mptypes.Result$shuffle,Arguments$Callable:$$$mptypes.SecondArgs$shuffle}},Arguments$Callable:$$$mptypes.FirstArgs$shuffle}),{Args$unflatten:$$$mptypes.FirstArgs$shuffle,Return$unflatten:{t:Callable,a:{Return$Callable:$$$mptypes.Result$shuffle,Arguments$Callable:$$$mptypes.SecondArgs$shuffle}}})(firstArgs$881),[],{Return$Callable:$$$mptypes.Result$shuffle,Arguments$Callable:$$$mptypes.SecondArgs$shuffle}),{Args$unflatten:$$$mptypes.SecondArgs$shuffle,Return$unflatten:$$$mptypes.Result$shuffle})(secondArgs$880);
        }),[{$nm:'firstArgs',$mt:'prm',$t:'FirstArgs$shuffle',$an:function(){return[];}}],{Return$Callable:$$$mptypes.Result$shuffle,Arguments$Callable:{t:'T', l:[$$$mptypes.FirstArgs$shuffle]}}),{Args$flatten:$$$mptypes.FirstArgs$shuffle,Return$flatten:$$$mptypes.Result$shuffle});
    }),[{$nm:'secondArgs',$mt:'prm',$t:'SecondArgs$shuffle',$an:function(){return[];}}],{Return$Callable:{t:Callable,a:{Return$Callable:$$$mptypes.Result$shuffle,Arguments$Callable:$$$mptypes.FirstArgs$shuffle}},Arguments$Callable:{t:'T', l:[$$$mptypes.SecondArgs$shuffle]}}),{Args$flatten:$$$mptypes.SecondArgs$shuffle,Return$flatten:{t:Callable,a:{Return$Callable:$$$mptypes.Result$shuffle,Arguments$Callable:$$$mptypes.FirstArgs$shuffle}}});
};
shuffle.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Callable,a:{Return$Callable:{t:Callable,a:{Return$Callable:'Result$shuffle',Arguments$Callable:'FirstArgs$shuffle'}},Arguments$Callable:'SecondArgs$shuffle'}},$ps:[{$nm:'f',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:Callable,a:{Return$Callable:'Result$shuffle',Arguments$Callable:'SecondArgs$shuffle'}},Arguments$Callable:'FirstArgs$shuffle'}},$an:function(){return[];}}],$tp:{Result$shuffle:{},FirstArgs$shuffle:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}]},SecondArgs$shuffle:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}]}},$an:function(){return[doc(String$("Given a function with two parameter lists, return\na function with the order of the argument lists \nreversed. The parameter lists may have any number\nof parameters.\n\nThat is, if `fun` has type `W(A,B)(X,Y,Z)` then \n`shuffle(fun)` has type `W(X,Y,Z)(A,B)`.\n\nThis function is often used in conjunction with\n`curry()`.",314)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),curry)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','shuffle']};};
exports.shuffle=shuffle;
var plus=function (x$882,y$883,$$$mptypes){
    return x$882.plus(y$883);
};
plus.$crtmm$=function(){return{mod:$CCMM$,$t:'Value$plus',$ps:[{$nm:'x',$mt:'prm',$t:'Value$plus',$an:function(){return[];}},{$nm:'y',$mt:'prm',$t:'Value$plus',$an:function(){return[];}}],$tp:{Value$plus:{'satisfies':[{t:Summable,a:{Other$Summable:'Value$plus'}}]}},$an:function(){return[doc(String$("Add the given `Summable` values.",32)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),times),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),sum)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','plus']};};
exports.plus=plus;
var times=function (x$884,y$885,$$$mptypes){
    return x$884.times(y$885);
};
times.$crtmm$=function(){return{mod:$CCMM$,$t:'Value$times',$ps:[{$nm:'x',$mt:'prm',$t:'Value$times',$an:function(){return[];}},{$nm:'y',$mt:'prm',$t:'Value$times',$an:function(){return[];}}],$tp:{Value$times:{'satisfies':[{t:Numeric,a:{Other$Numeric:'Value$times'}}]}},$an:function(){return[doc(String$("Multiply the given `Numeric` values.",36)),see([$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),plus),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),product)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:FunctionDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','times']};};
exports.times=times;
var sort=function (elements$886,$$$mptypes){
    return internalSort($JsCallable(byIncreasing($JsCallable((function (e$887){
        return e$887;
    }),[{$nm:'e',$mt:'prm',$t:'Element$sort',$an:function(){return[];}}],{Return$Callable:$$$mptypes.Element$sort,Arguments$Callable:{t:'T', l:[$$$mptypes.Element$sort]}}),{Value$byIncreasing:$$$mptypes.Element$sort,Element$byIncreasing:$$$mptypes.Element$sort}),[{$nm:'p2',$mt:'prm',$t:'Element$sort'},{$nm:'p3',$mt:'prm',$t:'Element$sort'}],{Return$Callable:{t:Comparison},Arguments$Callable:{t:'T', l:[$$$mptypes.Element$sort,$$$mptypes.Element$sort]}}),elements$886,{Element$internalSort:$$$mptypes.Element$sort});
};
sort.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Element$sort'}},$ps:[{$nm:'elements',$mt:'prm',$t:{t:Iterable,a:{Element$Iterable:'Element$sort',Absent$Iterable:{t:Null}}},$an:function(){return[];}}],$tp:{Element$sort:{'satisfies':[{t:Comparable,a:{Other$Comparable:'Element$sort'}}]}},$an:function(){return[doc(String$("Sort the given elements, returning a new sequence.",50)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Comparable)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','sort']};};
exports.sort=sort;
function Array$(elems,$$targs$$) {
    var e=[];
    if (!(elems === null || elems === undefined)) {
        var iter=elems.iterator();
        var item;while((item=iter.next())!==getFinished()) {
            e.push(item);
        }
    }
    e.$$targs$$=$$targs$$;
    List({Element$List:$$targs$$.Element$Array}, e);
    return e;
}
Array$.$crtmm$={$ps:[{$nm:'elements',$mt:'prm',$t:{t:Iterable,a:{Absent$Iterable:{t:Null},Element$Iterable:'Element$Array'}}}],$an:function(){return[shared(),final(),native()];},mod:$CCMM$,d:['ceylon.language','Array'],
  'super':{t:Object$}, $tp:{Element$Array:{}}, satisfies:[{t:List,a:{Element$List:'Element$Array'}},
    {t:Ranged,a:{Index$Ranged:{t:Integer},Span$Ranged:{t:Array$,a:{Element$Array:'Element$Array'}}}}]};

initExistingType(Array$, Array, 'ceylon.language::Array', Object$,
        Ranged, $init$List());
var Array$proto = Array.prototype;
var origArrToString = Array$proto.toString;
inheritProto(Array$, Object$, Ranged, $init$List());
Array$proto.toString = origArrToString;
Array$proto.reifyCeylonType = function(typeParameters) {
    this.$$targs$$ = typeParameters;
    return this;
}
exports.$Array=Array$;

function ArraySequence(/* js array */value, $$targs$$) {
if (value.length===0)return getEmpty();
    value.$seq = true;
var t=$$targs$$.Element$Iterable;
if (t===undefined)t=$$targs$$.Element$ArraySequence;
if (t===undefined)t=$$targs$$.Element$Array;
if (t===undefined)t=$$targs$$.Element$Sequence;
if (t===undefined)t=$$targs$$.Element$Sequential;
if (t===undefined)t=$$targs$$.Element$List;
if (t===undefined)throw new Error("Invalid type arguments for ArraySequence: "+require('util').inspect($$targs$$));
    value.$$targs$$={Element$Iterable:t, Element$ArraySequence:t, Element$Sequence:t, Element$Sequential:t, Element$List:t, Element$Collection:t, Item$Correspondence:t, Key$Correspondence:{t:Integer},Absent$Iterable:{t:Nothing}, Element$Array:t};
    return value;
}
ArraySequence.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','ArraySequence'],$ps:[{$nm:'elements',$t:{t:Sequence,a:{Element$Sequence:'Element$ArraySequence'}}}],$tp:{Element$ArraySequence:{'var':'out'}},satisfies:[{t:Sequence,a:{Element$Sequence:'Element$ArraySequence'}}]};};
initTypeProto(ArraySequence, 'ceylon.language::ArraySequence', $init$Basic(), $init$Sequence());
Array$proto.getT$name = function() {
    return (this.$seq ? ArraySequence : Array$).$$.T$name;
}
Array$proto.getT$all = function() {
    return (this.$seq ? ArraySequence : Array$).$$.T$all;
}

defineAttr(Array$proto, 'size', function(){ return this.length; },undefined,function(){return{mod:$CCMM$,d:['ceylon.language','Iterable','$at','size'],$cont:Array$proto,$t:{t:Integer}};});
defineAttr(Array$proto,'string',function(){
    return (opt$181=(this.empty?String$("[]",2):null),opt$181!==null?opt$181:StringBuilder().appendAll([String$("[",1),commaList(this).string,String$("]",1)]).string);
},undefined,function(){return{mod:$CCMM$,d:['ceylon.language','Object','$at','string'],$t:{t:String},$cont:Array$proto};});
Array$proto.set = function(idx,elem) {
    if (idx >= 0 && idx < this.length) {
        this[idx] = elem;
    }
}
Array$proto.set.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','Array','$m','set'],$t:{t:Anything},$ps:[{$nm:'index',$t:{t:Integer},$mt:'prm'},{$nm:'element',$mt:'prm',$t:'Element$Array'}]};}
Array$proto.$get = function(idx) {
    var result = this[idx];
    return result!==undefined ? result:null;
}
Array$proto.$get.$crtmm$=function(){
  return{mod:$CCMM$,d:['ceylon.language','List','$m','get'],$t:{t:'u',l:[{t:Null},'Element$Array']},$ps:[{$nm:'index',$t:{t:Integer},$mt:'prm'}]};
}
defineAttr(Array$proto, 'lastIndex', function() {
    return this.length>0 ? (this.length-1) : null;
},undefined,function(){return{mod:$CCMM$,d:['ceylon.language','List','$at','lastIndex'],$t:{t:'u',l:[{t:Null},{t:Integer}]}};});
defineAttr(Array$proto, 'reversed', function() {
    if (this.length === 0) { return this; }
    var arr = this.slice(0);
    arr.reverse();
    return this.$seq ? ArraySequence(arr,this.$$targs$$||{Element$Iterable:{t:Anything}}) : arr.reifyCeylonType(this.$$targs$$);
},undefined,function(){return{mod:$CCMM$,d:['ceylon.language','List','$at','reversed'],$t:{t:List,a:{Element$List:'Element$Array'}}};});
Array$proto.chain = function(other, $$$mptypes) {
    if (this.length === 0) { return other; }
    return Iterable.$$.prototype.chain.call(this, other, $$$mptypes);
}
defineAttr(Array$proto, 'first', function(){ return this.length>0 ? this[0] : null; },
  undefined,function(){return{mod:$CCMM$,d:['ceylon.language','Iterable','$at','first'],$t:{t:'u',l:[{t:Null},'Element$Array']}};});
defineAttr(Array$proto, 'last', function() { return this.length>0 ? this[this.length-1] : null; },
  undefined,function(){return{mod:$CCMM$,d:['ceylon.language','List','$at','last'],$t:{t:'u',l:[{t:Null},'Element$Array']}};});
Array$proto.segment = function(from, len) {
    if (len <= 0) { return getEmpty(); }
    var stop = from + len;
    var seq = this.slice((from>=0)?from:0, (stop>=0)?stop:0);
    return (seq.length > 0) ? ArraySequence(seq,this.$$targs$$||{Element$Iterable:{t:Anything}}) : getEmpty();
}
Array$proto.span = function(from, to) {
    if (from > to) {
        var arr = this.segment(to, from-to+1);
        arr.reverse();
        return arr.reifyCeylonType(this.$$targs$$);
    }
    return this.segment(from, to-from+1);
}
Array$proto.spanTo = function(to) {
    return to < 0 ? getEmpty() : this.span(0, to);
}
Array$proto.spanFrom = function(from) {
    return this.span(from, 0x7fffffff);
}
defineAttr(Array$proto, 'rest', function() {
    return this.length<=1 ? getEmpty() : ArraySequence(this.slice(1),this.$$targs$$||{Element$Iterable:{t:Anything}});
});
Array$proto.items = function(keys) {
    if (keys === undefined) return getEmpty();
    var seq = [];
    for (var i = 0; i < keys.size; i++) {
        var key = keys.$get(i);
        seq.push(this.$get(key));
    }
    return ArraySequence(seq,this.$$targs$$||{Element$Iterable:{t:Anything}});
}
defineAttr(Array$proto, 'keys', function(){ return TypeCategory(this, {t:Integer}); });
Array$proto.contains = function(elem) {
    for (var i=0; i<this.length; i++) {
        if (elem.equals(this[i])) {
            return true;
        }
    }
    return false;
}
Array$proto.iterator = function() {
    var $$$index$$$ = 0;
    var $$$arr$$$ = this;
    return new ComprehensionIterator(function() {
        return ($$$index$$$ === $$$arr$$$.length) ? getFinished() : $$$arr$$$[$$$index$$$++];
    }, this.$$targs$$);
}
Array$proto.copyTo = function(other, srcpos, dstpos, length) {
    if (length === undefined) length = this.size;
    if (srcpos === undefined) srcpos = 0;
    if (dstpos === undefined) dstpos = 0;
    var endpos = srcpos+length;
    //TODO validate range?
    for (var i=srcpos; i<endpos; i++) {
        other[dstpos]=this[i];
        dstpos++;
    }
}
Array$proto.shorterThan = function(len) {
  return this.size < len;
}
Array$proto.shorterThan.$crtmm$={mod:$CCMM$,d:['ceylon.language','Iterable','$m','shorterThan']};
Array$proto.longerThan = function(len) {
  return this.size > len;
}
Array$proto.longerThan.$crtmm$={mod:$CCMM$,d:['ceylon.language','Iterable','$m','longerThan']};

exports.arrayOfSize=function(size, elem, $$$mptypes) {
    if (size > 0) {
        var elems = [];
        for (var i = 0; i < size; i++) {
            elems.push(elem);
        }
        elems.$$targs$$=$$$mptypes;
        return elems;
    } else return [];
}
exports.arrayOfSize.$crtmm$={$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','arrayOfSize']};

function TypeCategory(seq, type) {
    var that = new TypeCategory.$$;
    that.type = type;
    that.seq = seq;
    return that;
}
initTypeProto(TypeCategory, 'ceylon.language::TypeCategory', $init$Basic(), Category);
var TypeCategory$proto = TypeCategory.$$.prototype;
TypeCategory$proto.contains = function(k) {
    return isOfType(k, this.type) && this.seq.defines(k);
}

function SequenceBuilder($$targs$$,that) {
    if(that===undefined)that=new SequenceBuilder.$$;
    that.seq = [];
    that.$$targs$$=$$targs$$;
    return that;
}
SequenceBuilder.$crtmm$=function(){return{$ps:[],$an:function(){return[shared()];},
  $tp:{Element$SequenceBuilder:{}}, mod:$CCMM$,d:['ceylon.language','SequenceBuilder']};}

initTypeProto(SequenceBuilder, 'ceylon.language::SequenceBuilder', $init$Basic());
var SequenceBuilder$proto = SequenceBuilder.$$.prototype;
defineAttr(SequenceBuilder$proto, 'sequence', function() {
    return (this.seq.length > 0) ? ArraySequence(this.seq,{Element$Iterable:this.$$targs$$.Element$SequenceBuilder}) : getEmpty();
},undefined,function(){return{
  $t:{t:Sequential,a:{Element$Sequential:'Element$SequenceBuilder'}},mod:$CCMM$,d:['ceylon.language','SequenceBuilder','$at','sequence']};});
SequenceBuilder$proto.append=function(e){
  this.seq.push(e);
  return this;
}
SequenceBuilder$proto.appendAll = function(/*Iterable*/arr) {
    if (arr === undefined) return;
    var iter = arr.iterator();
    var e; while ((e = iter.next()) !== getFinished()) {
        this.seq.push(e);
    }
    return this;
}
defineAttr(SequenceBuilder$proto, 'size', function(){ return this.seq.length; },undefined,function(){return{
  $t:{t:Integer},mod:$CCMM$,d:['ceylon.language','SequenceBuilder','$at','size']
};});
defineAttr(SequenceBuilder$proto, 'empty', function() { return this.seq.length===0 },function(){return{
  $t:{t:Boolean$},mod:$CCMM$,d:['ceylon.language','SequenceBuilder','$at','empty']
};});

function SequenceAppender(other, $$targs$$,that) {
    if (that===undefined)that=new SequenceAppender.$$;
    SequenceBuilder({Element$SequenceBuilder:$$targs$$.Element$SequenceAppender},that);
    that.appendAll(other);
    return that;
}
SequenceAppender.$crtmm$=function(){return{$ps:[{$nm:'elements',$t:{t:Sequence,a:{Element$Sequence:'Element$SequenceAppender'}},$mt:'prm'}],$an:function(){return[shared()];},
  'super':{t:SequenceBuilder,a:{Element$SequenceBuilder:'Element$SequenceAppender'}},$tp:{Element$SequenceAppender:{}},mod:$CCMM$,d:['ceylon.language','SequenceAppender']};}

initTypeProto(SequenceAppender, 'ceylon.language::SequenceAppender', SequenceBuilder);

exports.Sequence=Sequence;
exports.SequenceBuilder=SequenceBuilder;
exports.SequenceAppender=SequenceAppender;
exports.ArraySequence=ArraySequence;
function String$(/*{Character*}*/value,size) {
    if (value && value.getT$name && value.getT$name() == 'ceylon.language::String') {
        //if it's already a String just return it
        return value;
    }
    else if (typeof(value) === 'string') {
        var that = new String(value);
        that.codePoints = size;
        return that;
    }
    var _sb = StringBuilder();
    var _iter = value.iterator();
    var _c; while ((_c = _iter.next()) !== getFinished()) {
        _sb.appendCharacter(_c);
    }
    var that = _sb.string;
    if (size !== undefined) that.codePoints=size;
    return that;
}
String$.$crtmm$=function(){return{'super':{t:Object$},
  $ps:[{$nm:'characters',$t:{t:Iterable,a:{Element$Iterable:{t:Character},Absent$Iterable:{t:Null}}},$mt:'prm'}],
  'satisfies':[{t:List,a:{Element$List:{t:Character}}}, {t:Comparable,a:{Other$Comparable:{t:String$}}},
    {t:Summable,a:{Other$Summable:{t:String$}}}, {t:Ranged,a:{Index$Ranged:{t:Integer},Span$Ranged:{t:String$}}}],
  $an:function(){return[shared(),native(),final()];},
  mod:$CCMM$,d:['ceylon.language','String']};};

initExistingType(String$, String, 'ceylon.language::String', Object$, Sequential, Comparable,
        Ranged, Summable);
var origStrToString = String.prototype.toString;
inheritProto(String$, Object$, Sequential, Comparable, Ranged, Summable);
var String$proto = String$.$$.prototype;
String$proto.$$targs$$={Element$Iterable:{t:Character}, Absent$Iterable:{t:Null}};
String$proto.getT$name = function() {
    return String$.$$.T$name;
}
String$proto.getT$all = function() {
    return String$.$$.T$all;
}
String$proto.toString = origStrToString;
defineAttr(String$proto, 'string', function(){ return this; },undefined,function(){return{mod:$CCMM$,
  $t:{t:String$},d:['ceylon.language','Object','$at','string']}});
String$proto.plus = function(other) {
    var size = this.codePoints + other.codePoints;
    return String$(this+other, isNaN(size)?undefined:size);
}
String$proto.plus.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','plus'],
  $ps:[{$nm:'other',$t:{t:String$},$mt:'prm'}]};}
String$proto.equals = function(other) {
    if (other.constructor===String) {
        return other.valueOf()===this.valueOf();
    } else if (isOfType(other, {t:Iterable, a:{Element$Iterable:{t:Character}}})) {
        if (other.size===this.size) {
            for (var i=0;i<this.size;i++) {
                if (!this.$get(i).equals(other.$get(i))) return false;
            }
            return true;
        }
    }
    return false;
}
String$proto.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','String','$m','equals'],
  $ps:[{$nm:'other',$t:{t:String$},$mt:'prm'}]};}
String$proto.compare = function(other) {
    var cmp = this.localeCompare(other);
    return cmp===0 ? equal : (cmp<0 ? smaller:larger);
}
String$proto.compare.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Comparison},d:['ceylon.language','String','$m','compare'],
  $ps:[{$nm:'other',$t:{t:String$}}]};}
defineAttr(String$proto, 'uppercased', function(){ return String$(this.toUpperCase()); },undefined,function(){return{
  mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$at','uppercased']}});
defineAttr(String$proto, 'lowercased', function(){ return String$(this.toLowerCase()); },undefined,function(){return{
  mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$at','lowercased']}});
defineAttr(String$proto, 'size', function() {
  if (this.codePoints===undefined) {
    this.codePoints = countCodepoints(this);
  }
  return this.codePoints;
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Iterable','$at','size']}});
defineAttr(String$proto, 'lastIndex', function(){ return this.size.equals(0) ? null : this.size.predecessor; },undefined,function(){return{
  mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','List','$at','lastIndex']}});
String$proto.span = function(from, to) {
    if (from > to) {
        return this.segment(to, from-to+1).reversed;
    }
    return this.segment(from, to-from+1);
}
String$proto.span.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','span'],
  $ps:[{$nm:'from',$t:{t:Integer}},{$nm:'to',$t:{t:Integer}}]};}
String$proto.spanFrom = function(from) {
    return this.span(from, 0x7fffffff);
}
String$proto.spanFrom.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','spanFrom'],
  $ps:[{$nm:'from',$t:{t:Integer}}]};}
String$proto.spanTo = function(to) {
    return to < 0 ? String$('', 0) : this.span(0, to);
}
String$proto.spanTo.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','spanTo'],
  $ps:[{$nm:'to',$t:{t:Integer}}]};}
String$proto.segment = function(from, len) {
    var fromIndex = from;
    var maxCount = len + fromIndex;
    if (fromIndex < 0) {fromIndex = 0;}
    var i1 = 0;
    var count = 0;
    for (; i1<this.length && count<fromIndex; ++i1, ++count) {
        if ((this.charCodeAt(i1)&0xfc00) === 0xd800) {++i1}
    }
    var i2 = i1;
    for (; i2<this.length && count<maxCount; ++i2, ++count) {
        if ((this.charCodeAt(i2)&0xfc00) === 0xd800) {++i2}
    }
    if (i2 >= this.length) {
        this.codePoints = count;
        if (fromIndex === 0) {return this;}
    }
    return String$(this.substring(i1, i2), count-fromIndex);
}
String$proto.segment.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','segment'],
  $ps:[{$nm:'from',$t:{t:Integer}},{$nm:'length',$t:{t:Integer}}]};}
defineAttr(String$proto, 'empty', function() {
    return this.length===0;
},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Sequential','$at','empty']}});
String$proto.longerThan = function(length) {
    if (this.codePoints!==undefined) {return this.codePoints>length}
    if (this.length <= length) {return false}
    if (this.length<<1 > length) {return true}
    this.codePoints = countCodepoints(this);
    return this.codePoints>length;
}
String$proto.longerThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','String','$m','longerThan'],
  $ps:[{$nm:'length',$t:{t:Integer}}]};}
String$proto.shorterThan = function(length) {
    if (this.codePoints!==undefined) {return this.codePoints<length}
    if (this.length < length) {return true}
    if (this.length<<1 >= length) {return false}
    this.codePoints = countCodepoints(this);
    return this.codePoints<length;
}
String$proto.shorterThan.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','String','$m','shorterThan'],
  $ps:[{$nm:'length',$t:{t:Integer}}]};}
String$proto.iterator= function() {
	return this.length === 0 ? getEmptyIterator() : StringIterator(this);
}
String$proto.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:Character}}},d:['ceylon.language','String','$m','iterator']};}
String$proto.$get=function(index){
  if (index<0 || index>=this.length) {return null;}
  if (this._bumps===undefined)this._bumps=[];
  var cnt=0;
  var mb=0;
  for (var i=0;i<this._bumps.length;i++) {
    mb=this._bumps[i];
    if (mb<index)cnt++;
  }
  if (index<=this._maxidx) {
    index+=cnt;
    return Character(codepointFromString(this, index));
  }
  if (this._maxidx>mb)mb=this._maxidx;
  for (cnt=mb; cnt<index; cnt++) {
    if ((this.charCodeAt(mb)&0xfc00) === 0xd800) {
      this._bumps.push(mb);
      ++mb;
    }
    if (++mb >= this.length) {return null;}
  }
  if (this._maxidx===undefined || mb>this._maxidx)this._maxidx=mb;
  return Character(codepointFromString(this, mb));
}
String$proto.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u',l:[{t:Null},{t:Character}]},d:['ceylon.language','String','$m','get'],
  $ps:[{$nm:'index',$t:{t:Integer}}]};}
defineAttr(String$proto, 'trimmed', function() {
    // make use of the fact that all WS characters are single UTF-16 code units
    var from = 0;
    while (from<this.length && (this.charCodeAt(from) in $WS)) {++from}
    var to = this.length;
    if (from < to) {
        do {--to} while (from<to && (this.charCodeAt(to) in $WS));
        ++to;
    }
    if (from===0 && to===this.length) {return this;}
    var result = String$(this.substring(from, to));
    if (this.codePoints !== undefined) {
        result.codePoints = this.codePoints - from - this.length + to;
    }
    return result;
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$at','trimmed']}});
String$proto.trim = function(/*Category*/chars) {
    var from = 0;
    while (from<this.length && chars(this.$get(from))) {++from}
    var to = this.length;
    if (from < to) {
        do {--to} while (from<to && chars(this.$get(to)));
        ++to;
    }
    if (from===0 && to===this.length) {return this;}
    var result = String$(this.substring(from, to));
    if (this.codePoints !== undefined) {
        result.codePoints = this.codePoints - from - this.length + to;
    }
    return result;
}
String$proto.trim.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','trim']};}
String$proto.trimLeading = function(/*Category*/chars) {
    var from = 0;
    while (from<this.length && chars(this.$get(from))) {++from}
    if (from===0) {return this;}
    var result = String$(this.substring(from, this.length));
    if (this.codePoints !== undefined) {
        result.codePoints = this.codePoints - from;
    }
    return result;
}
String$proto.trimLeading.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','trimLeading']};}
String$proto.trimTrailing = function(/*Category*/chars) {
    var to = this.length;
    if (to > 0) {
        do {--to} while (to>=0 && chars(this.$get(to)));
        ++to;
    }
    if (to===this.length) {return this;}
    else if (to===0) { return String$("",0); }
    var result = String$(this.substring(0, to));
    if (this.codePoints !== undefined) {
        result.codePoints = this.codePoints - this.length + to;
    }
    return result;
}
String$proto.trimTrailing.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','trimTrailing']};}

String$proto.initial = function(length) {
    if (length >= this.codePoints) {return this}
    var count = 0;
    var i = 0;
    for (; i<this.length && count<length; ++i, ++count) {
        if ((this.charCodeAt(i)&0xfc00) === 0xd800) {++i}
    }
    if (i >= this.length) {
        this.codePoints = count;
        return this;
    }
    return String$(this.substr(0, i), count);
}
String$proto.initial.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','initial'],
  $ps:[{$nm:'length',$t:{t:Integer}}]};}
String$proto.terminal = function(length) {
    if (length >= this.codePoints) {return this}
    var count = 0;
    var i = this.length;
    for (; i>0 && count<length; ++count) {
        if ((this.charCodeAt(--i)&0xfc00) === 0xdc00) {--i}
    }
    if (i <= 0) {
        this.codePoints = count;
        return this;
    }
    return String$(this.substr(i), count);
}
String$proto.terminal.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','terminal'],
  $ps:[{$nm:'length',$t:{t:Integer}}]};}
defineAttr(String$proto, 'hash', function() {
    if (this._hash === undefined) {
        for (var i = 0; i < this.length; i++) {
          var c = this.charCodeAt(i);
          this._hash += c + (this._hash << 10);
          this._hash ^= this._hash >> 6;
    }

    this._hash += this._hash << 3;
    this._hash ^= this._hash >> 11;
    this._hash += this._hash << 15;
    this._hash = this._hash & ((1 << 29) - 1);
  }
  return this._hash;
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Object','$at','hash']}});

function cmpSubString(str, subStr, offset) {
    for (var i=0; i<subStr.length; ++i) {
        if (str.charCodeAt(offset+i)!==subStr.charCodeAt(i)) {return false}
    }
    return true;
}
String$proto.startsWith = function(str) {
    if (str.length > this.length) {return false}
    return cmpSubString(this, str, 0);
}
String$proto.startsWith.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','String','$m','startsWith'],
  $ps:[{$nm:'string',$t:{t:String$}}]};}
String$proto.endsWith = function(str) {
    var start = this.length - str.length
    if (start < 0) {return false}
    return cmpSubString(this, str, start);
}
String$proto.endsWith.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','String','$m','endsWith'],
  $ps:[{$nm:'string',$t:{t:String$}}]};}
String$proto.contains = function(sub) {
    var str;
    if (sub.constructor === String) {str = sub}
    else if (sub.constructor !== Character.$$) {return false}
    else {str = codepointToString(sub.value)}
    return this.indexOf(str) >= 0;
}
String$proto.contains.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','String','$m','contains'],
  $ps:[{$nm:'substring',$t:{t:String$}}]};}
defineAttr(String$proto, 'normalized', function() {
    // make use of the fact that all WS characters are single UTF-16 code units
    var result = "";
    var len = 0;
    var first = true;
    var i1 = 0;
    while (i1 < this.length) {
        while (this.charCodeAt(i1) in $WS) {
            if (++i1 >= this.length) {return String$(result)}
        }
        var i2 = i1;
        var cc = this.charCodeAt(i2);
        do {
            ++i2;
            if ((cc&0xfc00) === 0xd800) {++i2}
            ++len;
            cc = this.charCodeAt(i2);
        } while (i2<this.length && !(cc in $WS));
        if (!first) {
            result += " ";
            ++len;
        }
        first = false;
        result += this.substring(i1, i2);
        i1 = i2+1;
    }
    return String$(result, len);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$at','normalized']}});
String$proto.firstOccurrence = function(subc) {
    for (var i=0, count=0; i<this.length; count++) {
        var cp = this.charCodeAt(i++);
        if (((cp&0xfc00) === 0xd800) && i<this.length) {
            cp = (cp<<10) + this.charCodeAt(i++) - 0x35fdc00;
        }
        if (cp === subc.value) {return count;}
    }
    this.codePoints = count;
    return null;
}
String$proto.firstOccurrence.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u',l:[{t:Null},{t:Integer}]},d:['ceylon.language','String','$m','firstOccurrence']};}
String$proto.lastOccurrence = function(subc) {
    for (var i=this.length-1, count=0; i>=0; count++) {
        var cp = this.charCodeAt(i--);
        if (((cp%0xfc00) === 0xdc00) && i>=0) {
           cp = (this.charCodeAt(i--)<<10) + cp - 0x35fdc00;
        }
        if (cp === subc.value) {
            if (this.codePoints === undefined) {this.codePoints = countCodepoints(this);}
            return this.codePoints - count - 1;
        }
    }
    this.codePoints = count;
    return null;
}
String$proto.lastOccurrence.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u',l:[{t:Null},{t:Integer}]},d:['ceylon.language','String','$m','lastOccurrence']};}
defineAttr(String$proto, 'characters', function() {
    return this.size>0 ? this:getEmpty();
},undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Character}}},d:['ceylon.language','String','$at','characters']}});
defineAttr(String$proto, 'first', function() { return this.$get(0); },undefined,function(){return{
  mod:$CCMM$,$t:{t:'u',l:[{t:Null},{t:Character}]},d:['ceylon.language','Iterable','$at','first']}});
defineAttr(String$proto, 'last', function(){ return this.size>0?this.$get(this.size.predecessor):null; },undefined,function(){return{
  mod:$CCMM$,$t:{t:'u',l:[{t:Null},{t:Character}]},d:['ceylon.language','Iterable','$at','last']}});
defineAttr(String$proto, 'keys', function() {
    //TODO implement!!!
    return this.size > 0 ? Range(0, this.size.predecessor, {Element$Range:{t:Integer}}) : getEmpty();
},undefined,function(){return{mod:$CCMM$,$t:{t:Category},d:['ceylon.language','Category','$at','keys']}});
String$proto.join = function(strings) {
    var it = strings.iterator();
    var str = it.next();
    if (str === getFinished()) {return String$("", 0);}
    if (this.codePoints === undefined) {this.codePoints = countCodepoints(this)}
    var result = str;
    var len = str.codePoints;
    while ((str = it.next()) !== getFinished()) {
        result += this;
        result += str;
        len += this.codePoints + str.codePoints;
    }
    return String$(result, isNaN(len)?undefined:len);
}
String$proto.join.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','join'],
  $ps:[{$nm:'strings',$t:{t:Iterable,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:String$}}}}]};}
function isWhitespace(c) { return c.value in $WS; }
String$proto.$split = function(sep, discard, group) {
    // shortcut for empty input
    if (this.length === 0) {return Singleton(this, {Element$Singleton:{t:String$}}); }

    if (sep === undefined) {sep = isWhitespace}
    if (discard === undefined) {discard = true}
    if (group === undefined) {group = true}

    //TODO: return an iterable which determines the next token on demand
    var tokens = [];
    var tokenBegin = 0;
    var tokenBeginCount = 0;
    var count = 0;
    var value = this;
    var separator = true;

    function pushToken(tokenEnd) {
        tokens.push(String$(value.substring(tokenBegin, tokenEnd), count-tokenBeginCount));
    }
    if (isOfType(sep, {t:Iterable})) {
        var sepChars = {}
        var it = sep.iterator();
        var c; while ((c=it.next()) !== getFinished()) {sepChars[c.value] = true}
        for (var i=0; i<this.length;) {
            var j = i;
            var cp = this.charCodeAt(i++);
            if ((cp&0xfc00)===0xd800 && i<this.length) {
                cp = (cp<<10) + this.charCodeAt(i++) - 0x35fdc00;
            }
            if (cp in sepChars) {
                if (!group) {
                    // ungrouped separator: store preceding token
                    pushToken(j);
                    if (!discard) {
                        // store separator as token
                        tokens.push(String$(this.substring(j, i), 1));
                    }
                    // next token begins after this character
                    tokenBegin = i;
                    tokenBeginCount = count + 1;
                } else if (!separator || (j == 0)) {
                    // begin of grouped separator: store preceding token
                    pushToken(j);
                    // separator token begins at this character
                    tokenBegin = j;
                    tokenBeginCount = count;
                }
                separator = true;

            } else if (separator) {
                // first non-separator after separators or at beginning
                if (!discard && (tokenBegin != j)) {
                    // store preceding grouped separator (if group=false then tokenBegin=j)
                    pushToken(j);
                }
                // non-separator token begins at this character
                tokenBegin = j;
                tokenBeginCount = count;
                separator = false;
            }
        }
        if (tokenBegin != i) {
            pushToken(i);
        }
    } else {
        for (var i=0; i<this.length; ++count) {
            var j = i;
            var cp = this.charCodeAt(i++);
            if ((cp&0xfc00)===0xd800 && i<this.length) {
                cp = (cp<<10) + this.charCodeAt(i++) - 0x35fdc00;
            }

            if (sep(Character(cp))) {
                if (!group) {
                    // ungrouped separator: store preceding token
                    pushToken(j);
                    if (!discard) {
                        // store separator as token
                        tokens.push(String$(this.substring(j, i), 1));
                    }
                    // next token begins after this character
                    tokenBegin = i;
                    tokenBeginCount = count + 1;
                } else if (!separator || (j == 0)) {
                    // begin of grouped separator: store preceding token
                    pushToken(j);
                    // separator token begins at this character
                    tokenBegin = j;
                    tokenBeginCount = count;
                }
                separator = true;

            } else if (separator) {
                // first non-separator after separators or at beginning
                if (!discard && (tokenBegin != j)) {
                    // store preceding grouped separator (if group=false then tokenBegin=j)
                    pushToken(j);
                }
                // non-separator token begins at this character
                tokenBegin = j;
                tokenBeginCount = count;
                separator = false;
            }
        }

        if ((tokenBegin != i) && !(separator && discard)) {
            // store preceding token (may be a grouped separator)
            pushToken(i);
        }
        if (separator) {
            // if last character was a separator then there's another empty token
            tokens.push(String$("", 0));
        }
    }

    this.codePoints = count;
    return tokens.reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}});
}
String$proto.$split.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:String$}}},d:['ceylon.language','String','$m','split']};}
defineAttr(String$proto, 'reversed', function() {
    var result = "";
    for (var i=this.length; i>0;) {
        var cc = this.charCodeAt(--i);
        if ((cc&0xfc00)!==0xdc00 || i===0) {
            result += this.charAt(i);
        } else {
            result += this.substr(--i, 2);
        }
    }
    return String$(result);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$at','reversed']}});
String$proto.$replace = function(sub, repl) {
    //TODO: escape regex metachars
    if (this.indexOf(sub) < 0) {
      return this;
    }
    var ns = this.replace(sub, repl);
    while (ns.indexOf(sub) >= 0) {
      ns = ns.replace(sub, repl);
    }
    return String$(ns);
}
String$proto.$replace.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','replace'],
  $ps:[{$nm:'substring',$t:{t:String$}},{$nm:'replacement',$t:{t:String$}}]};}
String$proto.replaceFirst = function(sub, repl) {
    //TODO: escape regex metachars
    return String$(this.replace(sub, repl));
}
String$proto.replaceFirst.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','replaceFirst'],
  $ps:[{$nm:'substring',$t:{t:String$}},{$nm:'replacement',$t:{t:String$}}]};}
String$proto.repeat = function(times) {
    var sb = StringBuilder();
    for (var i = 0; i < times; i++) {
        sb.append(this);
    }
    return sb.string;
}
String$proto.repeat.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','repeat'],
  $ps:[{$nm:'times',$t:{t:Integer}}]};}
function isNewline(c) { return c.value===10; }
defineAttr(String$proto, 'lines', function() {
    return this.$split(isNewline, true);
},undefined,function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:String$}}},d:['ceylon.language','String','$at','lines']}});
String$proto.occurrences = function(sub) {
    if (sub.length == 0) {return 0}
    var ocs = [];
    var bound = this.length - sub.length;
    for (var i=0, count=0; i<=bound; ++count) {
        if (cmpSubString(this, sub, i)) {
            ocs.push(count);
            i+=sub.length;
        } else if ((this.charCodeAt(i++)&0xfc00) === 0xd800) {++i;}
    }
    return ocs.length > 0 ? ocs : getEmpty();
}
String$proto.occurrences.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterable,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Integer}}},d:['ceylon.language','List','$m','occurrences']};}
String$proto.$filter = function(f) {
    var r = Iterable.$$.prototype.$filter.call(this, f);
    return String$(r);
}
String$proto.following=function(o,$mpt) {
  return Iterable.$$.prototype.following.call(this,o,$mpt);
}
String$proto.$filter.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','filter']};}
String$proto.skipping = function(skip) {
    if (skip==0) return this;
    return this.segment(skip, this.size);
}
String$proto.skipping.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','skipping'],
  $ps:[{$nm:'skip',$t:{t:Integer}}]};}
String$proto.taking = function(take) {
    if (take==0) return getEmpty();
    return this.segment(0, take);
}
String$proto.taking.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','taking'],
  $ps:[{$nm:'take',$t:{t:Integer}}]};}
String$proto.by = function(step) {
    var r = Iterable.$$.prototype.by.call(this, step);
    return String$(r);
}
String$proto.by.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','by'],
  $ps:[{$nm:'step',$t:{t:Integer}}]};}
String$proto.$sort = function(f) {
    var r = Iterable.$$.prototype.$sort.call(this, f);
    return String$(r);
}
String$proto.$sort.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$m','sort']};}
defineAttr(String$proto, 'coalesced', function(){ return this; },undefined,function(){return{
  mod:$CCMM$,$t:{t:String$},d:['ceylon.language','String','$at','coalesced']}});
String$proto.$slice=function(idx) {
  var s1 = idx>0 ? this.segment(0,idx) : String$('',0);
  if (idx<0)idx=0;
  var s2 = idx<this.size ? this.segment(idx,this.size) : String$('',0);
  return Tuple(s1, Tuple(s2, getEmpty(), {Element$Tuple:{t:String$},First$Tuple:{t:String$},Rest$Tuple:{t:Empty}}),
    {Element$Tuple:{t:String$}, First$Tuple:{t:String$}, Rest$Tuple:{t:Tuple,a:{Element$Tuple:{t:String$},First$Tuple:{t:String$},Rest$Tuple:{t:Empty}}}});
}
String$proto.$slice.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','String','$m','slice'],
  $t:{t:Tuple,a:{Element$Tuple:{t:String$}, First$Tuple:{t:String$}, Rest$Tuple:{t:Tuple,a:{Element$Tuple:{t:String$},First$Tuple:{t:String$},Rest$Tuple:{t:Empty}}}}}};}

function StringIterator(string) {
    var that = new StringIterator.$$;
    that.str = string;
    that.index = 0;
    return that;
}
StringIterator.$crtmm$=function(){return{$nm:'StringIterator',$mt:'cls',$ps:[{$nm:'string',$t:{t:String$}}],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','Iterator']}};

initTypeProto(StringIterator, 'ceylon.language::StringIterator', $init$Basic(), Iterator);
var StringIterator$proto = StringIterator.$$.prototype;
StringIterator$proto.$$targs$$={Element$Iterator:{t:Character}, Absent$Iterator:{t:Null}};
StringIterator$proto.next = function() {
    if (this.index >= this.str.length) { return getFinished(); }
    var first = this.str.charCodeAt(this.index++);
    if ((first&0xfc00) !== 0xd800 || this.index >= this.str.length) {
        return Character(first);
    }
    return Character((first<<10) + this.str.charCodeAt(this.index++) - 0x35fdc00);
}

function countCodepoints(str) {
    var count = 0;
    for (var i=0; i<str.length; ++i) {
        ++count;
        if ((str.charCodeAt(i)&0xfc00) === 0xd800) {++i}
    }
    return count;
}
function codepointToString(cp) {
    if (cp <= 0xffff) {
        return String.fromCharCode(cp);
    }
    return String.fromCharCode((cp>>10)+0xd7c0, (cp&0x3ff)+0xdc00);
}
function codepointFromString(str, index) {
    var first = str.charCodeAt(index);
    if ((first&0xfc00) !== 0xd800) {return first}
    var second = str.charCodeAt(index+1);
    return isNaN(second) ? first : ((first<<10) + second - 0x35fdc00);
}
exports.codepointFromString=codepointFromString;

var _cacheChr={};
function Character(value,cache) {
    if (cache) {
      var that = _cacheChr[value];
      if (that === undefined) {
        that = new Character.$$;
        that.value = value;
        _cacheChr[value] = that;
      }
      return that;
    }
    if (value && value.getT$name && value.getT$name() === 'ceylon.language::Character') {
        return value;
    }
    var that = new Character.$$;
    that.value = value;
    return that;
}
Character.$crtmm$=function(){return{'super':{t:Object$}, 'satisfies':[
    {t:Comparable,a:{Other:{t:Character}}}, {t:Enumerable,a:{Other:{t:Character}}}],
  $an:function(){return[shared(),native(),final()];},mod:$CCMM$,d:['ceylon.language','Character']};}

initTypeProto(Character, 'ceylon.language::Character', Object$, Comparable, $init$Enumerable());
var Character$proto = Character.$$.prototype;
defineAttr(Character$proto, 'string', function(){
  if (this._str===undefined) {
    this._str=String$(codepointToString(this.value));
  }
  return this._str;
},undefined,function(){return{
  mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Character','$at','string']}});
Character$proto.equals = function(other) {
    return other.constructor===Character.$$ && other.value===this.value;
}
defineAttr(Character$proto, 'hash', function(){ return this.value; },undefined,function(){return{
  mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Character','$at','hash']}});
Character$proto.compare = function(other) {
    return this.value===other.value ? equal
                                    : (this.value<other.value ? smaller:larger);
}
defineAttr(Character$proto, 'uppercased', function() {
    var ucstr = codepointToString(this.value).toUpperCase();
    return Character(codepointFromString(ucstr, 0));
},undefined,function(){return{mod:$CCMM$,$t:{t:Character},d:['ceylon.language','Character','$at','uppercased']}});
defineAttr(Character$proto, 'lowercased', function() {
    var lcstr = codepointToString(this.value).toLowerCase();
    return Character(codepointFromString(lcstr, 0));
},undefined,function(){return{mod:$CCMM$,$t:{t:Character},d:['ceylon.language','Character','$at','lowercased']}});
defineAttr(Character$proto, 'titlecased', function() {
    var tc = $toTitlecase[this.value];
    return tc===undefined ? this.uppercased : Character(tc);
},undefined,function(){return{mod:$CCMM$,$t:{t:Character},d:['ceylon.language','Character','$at','titlecased']}});
var $WS={0x9:true, 0xa:true, 0xb:true, 0xc:true, 0xd:true, 0x20:true, 0x85:true,
    0x1680:true, 0x180e:true, 0x2028:true, 0x2029:true, 0x205f:true, 0x3000:true,
    0x1c:true, 0x1d:true, 0x1e:true, 0x1f:true};
for (var i=0x2000; i<0x2007; i++) { $WS[i]=true; }
for (var i=0x2008; i<=0x200a; i++) { $WS[i]=true; }
var $digit={0x30:true, 0x660:true, 0x6f0:true, 0x7c0:true, 0x966:true, 0x9e6:true, 0xa66:true,
    0xae6:true, 0xb66:true, 0xbe6:true, 0xc66:true, 0xce6:true, 0xd66:true, 0xe50:true,
    0xed0:true, 0xf20:true, 0x1040:true, 0x1090:true, 0x17e0:true, 0x1810:true, 0x1946:true,
    0x19d0:true, 0x1a80:true, 0x1a90:true, 0x1b50:true, 0x1bb0:true, 0x1c40:true, 0x1c50:true,
    0xa620:true, 0xa8d0:true, 0xa900:true, 0xa9d0:true, 0xaa50:true, 0xabf0:true, 0xff10:true,
    0x104a0:true, 0x11066:true, 0x110f0:true, 0x11136:true, 0x111d0:true, 0x116c0:true}
var $titlecase={
    0x1c5: [0x1c4, 0x1c6], 0x1c8: [0x1c7, 0x1c9], 0x1cb: [0x1ca, 0x1cc], 0x1f2: [0x1f1, 0x1f3],
    0x1f88: [undefined, 0x1f80], 0x1f89: [undefined, 0x1f81], 0x1f8a: [undefined, 0x1f82],
    0x1f8b: [undefined, 0x1f83], 0x1f8c: [undefined, 0x1f84], 0x1f8d: [undefined, 0x1f85],
    0x1f8e: [undefined, 0x1f86], 0x1f8f: [undefined, 0x1f87], 0x1f98: [undefined, 0x1f90],
    0x1f99: [undefined, 0x1f91], 0x1f9a: [undefined, 0x1f92], 0x1f9b: [undefined, 0x1f93],
    0x1f9c: [undefined, 0x1f94], 0x1f9d: [undefined, 0x1f95], 0x1f9e: [undefined, 0x1f96],
    0x1f9f: [undefined, 0x1f97], 0x1fa8: [undefined, 0x1fa0], 0x1fa9: [undefined, 0x1fa1],
    0x1faa: [undefined, 0x1fa2], 0x1fab: [undefined, 0x1fa3], 0x1fac: [undefined, 0x1fa4],
    0x1fad: [undefined, 0x1fa5], 0x1fae: [undefined, 0x1fa6], 0x1faf: [undefined, 0x1fa7],
    0x1fbc: [undefined, 0x1fb3], 0x1fcc: [undefined, 0x1fc3], 0x1ffc: [undefined, 0x1ff3]
}
var $toTitlecase={
    0x1c6:0x1c5, 0x1c7:0x1c8, 0x1ca:0x1cb, 0x1f1:0x1f2,
    0x1c4:0x1c5, 0x1c9:0x1c8, 0x1cc:0x1cb, 0x1f3:0x1f2, 0x1f80:0x1f88, 0x1f81:0x1f89, 0x1f82:0x1f8a,
    0x1f83:0x1f8b, 0x1f84:0x1f8c, 0x1f85:0x1f8d, 0x1f86:0x1f8e, 0x1f87:0x1f8f, 0x1f90:0x1f98,
    0x1f91:0x1f99, 0x1f92:0x1f9a, 0x1f93:0x1f9b, 0x1f94:0x1f9c, 0x1f95:0x1f9d, 0x1f96:0x1f9e,
    0x1f97:0x1f9f, 0x1fa0:0x1fa8, 0x1fa1:0x1fa9, 0x1fa2:0x1faa, 0x1fa3:0x1fab, 0x1fa4:0x1fac,
    0x1fa5:0x1fad, 0x1fa6:0x1fae, 0x1fa7:0x1faf, 0x1fb3:0x1fbc, 0x1fc3:0x1fcc, 0x1ff3:0x1ffc
}
defineAttr(Character$proto, 'whitespace', function(){ return this.value in $WS; },undefined,function(){return{
  mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Character','$at','whitespace']}});
defineAttr(Character$proto, 'control', function(){ return this.value<32 || this.value===127; },undefined,function(){return{
  mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Character','$at','control']}});
defineAttr(Character$proto, 'digit', function() {
    var check = this.value & 0xfffffff0;
    if (check in $digit) {
        return (this.value&0xf) <= 9;
    }
    if ((check|6) in $digit) {
        return (this.value&0xf) >= 6;
    }
    return this.value>=0x1d7ce && this.value<=0x1d7ff;
},undefined,function(){return{
  mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Character','$at','digit']}});
defineAttr(Character$proto, 'integerValue', function(){ return this.value; },undefined,function(){return{
  mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Enumerable','$at','integerValue']}});
defineAttr(Character$proto, 'integer',function(){ return this.value; },undefined,function(){return{
  mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Character','$at','integer']}});
defineAttr(Character$proto, 'uppercase', function() {
    var str = codepointToString(this.value);
    return str.toLowerCase()!==str && !(this.value in $titlecase);
},undefined,function(){return{
  mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Character','$at','uppercase']}});
defineAttr(Character$proto, 'lowercase', function() {
    var str = codepointToString(this.value);
    return str.toUpperCase()!==str && !(this.value in $titlecase);
},undefined,function(){return{
  mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Character','$at','lowercase']}});
defineAttr(Character$proto, 'titlecase', function(){ return this.value in $titlecase; },undefined,function(){return{
  mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Character','$at','titlecase']}});
defineAttr(Character$proto, 'letter', function() {
    //TODO: this captures only letters that have case
    var str = codepointToString(this.value);
    return str.toUpperCase()!==str || str.toLowerCase()!==str || (this.value in $titlecase);
},undefined,function(){return{
  mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Character','$at','letter']}});
defineAttr(Character$proto, 'successor', function() {
    var succ = this.value+1;
    if ((succ&0xf800) === 0xd800) {return Character(0xe000)}
    return Character((succ<=0x10ffff) ? succ:0);
},undefined,function(){return{mod:$CCMM$,$t:{t:Character},d:['ceylon.language','Ordinal','$at','successor']}});
defineAttr(Character$proto, 'predecessor', function() {
    var succ = this.value-1;
    if ((succ&0xf800) === 0xd800) {return Character(0xd7ff)}
    return Character((succ>=0) ? succ:0x10ffff);
},undefined,function(){return{mod:$CCMM$,$t:{t:Character},d:['ceylon.language','Ordinal','$at','predecessor']}});
Character$proto.distanceFrom = function(other) {
    return this.value - other.value;
}

function StringBuilder(/*String...*/comps) {
    var that = new StringBuilder.$$;
    if (comps === undefined){
      that.value="";
    } else if (comps.length===1){
      that.value=comps[0];
    } else {
      that.value=String.prototype.concat.apply("",comps);
    }
    return that;
}
StringBuilder.$crtmm$=function(){return{'super':{t:Basic},$ps:[],
  $an:function(){return[shared(),native()];},mod:$CCMM$,d:['ceylon.language','StringBuilder']};};

initTypeProto(StringBuilder, 'ceylon.language::StringBuilder', $init$Basic());
var StringBuilder$proto = StringBuilder.$$.prototype;
defineAttr(StringBuilder$proto, 'string', function(){ return String$(this.value, this.size); },undefined,function(){return{
  mod:$CCMM$,$t:{t:String$},d:['ceylon.language','StringBuilder','$at','string'],$cont:StringBuilder}});
StringBuilder$proto.append = function(s) {
    this.value = this.value.concat(s);
    return this;
}
StringBuilder$proto.append.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','StringBuilder','$m','append'],
  $t:{t:StringBuilder},$cont:StringBuilder,$ps:[{$nm:'string',$t:{t:String$},$mt:'prm'}]};};
StringBuilder$proto.appendAll = function(strings) {
    var iter = strings.iterator();
    var _s; while ((_s = iter.next()) !== getFinished()) {
        this.append(_s||"null");
    }
    return this;
}
StringBuilder$proto.appendAll.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','StringBuilder','$m','appendAll'],
  $t:{t:StringBuilder},$ps:[{$nm:'strings',$t:{t:Iterable,a:{Element$Iterable:{t:String$},Absent$Iterable:{t:Null}}},$mt:'prm'}],$cont:StringBuilder
};};
StringBuilder$proto.appendCharacter=function(c){return this.append(c.string);}
StringBuilder$proto.appendCharacter.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','StringBuilder','$m','appendCharacter'],
  $cont:StringBuilder,$t:{t:StringBuilder},$ps:[{$nm:'character',$t:{t:Character},$mt:'prm'}]
};};
StringBuilder$proto.appendNewline=function(){return this.append("\n");}
StringBuilder$proto.appendNewline.$crtmm$=function(){return{mod:$$CCMM$,d:['ceylon.language','StringBuilder','$m','appendNewline'],
  $t:{t:StringBuilder},$ps:[],$cont:StringBuilder
};};
StringBuilder$proto.appendSpace=function(){return this.append(" ");}
StringBuilder$proto.appendSpace.$crtmm$=function(){return{mod:$$CCMM$,d:['ceylon.language','StringBuilder','$m','appendSpace'],
  $t:{t:StringBuilder},$ps:[],$cont:StringBuilder
};};
defineAttr(StringBuilder$proto, 'size', function() {
    return countCodepoints(this.value);
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','StringBuilder','$at','size'],$cont:StringBuilder}});
StringBuilder$proto.reset = function() {
    this.value = "";
    return this;
}
StringBuilder$proto.reset.$crtmm$=function(){return{mod:$$CCMM$,d:['ceylon.language','StringBuilder','$m','reset'],
  $cont:StringBuilder,$t:{t:StringBuilder},$ps:[]};};
StringBuilder$proto.insert = function(pos, content) {
    if (pos <= 0) {
        this.value = content + this.value;
    } else if (pos >= this.size) {
        this.value = this.value + content;
    } else {
        this.value = this.value.slice(0, pos).concat(content,this.value.slice(pos));
    }
    return this;
}
StringBuilder$proto.insert.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','StringBuilder','$m','insert'],
  $cont:StringBuilder,$t:{t:StringBuilder},$ps:[{$nm:'pos',$t:{t:Integer},$mt:'prm'},{$nm:'content',$t:{t:String$},$mt:'prm'}]
};};
StringBuilder$proto.insertCharacter = function(pos, c) {
    if (pos <= 0) {
        this.value = c.string + this.value;
    } else if (pos >= this.size) {
        this.value = this.value + c.string;
    } else {
        this.value = this.value.slice(0, pos).concat(c.string,this.value.slice(pos));
    }
    return this;
}
StringBuilder$proto.insertCharacter.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','StringBuilder','$m','insertCharacter'],
  $cont:StringBuilder,$t:{t:StringBuilder},$ps:[{$nm:'pos',$t:{t:Integer},$mt:'prm'},{$nm:'character',$t:{t:Character},$mt:'prm'}]
};};
StringBuilder$proto.$delete = function(pos, count) {
    if (pos < 0) pos=0; else if (pos>this.size) return this;
    if (count > 0) {
        this.value = this.value.slice(0, pos) + this.value.slice(pos+count);
    }
    return this;
}
StringBuilder$proto.$delete.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language','StringBuilder','$m','delete'],
  $cont:StringBuilder,$t:{t:StringBuilder},$ps:[{$nm:'pos',$t:{t:Integer},$mt:'prm'},{$nm:'count',$t:{t:Integer},$mt:'prm'}]
};};

exports.String=String$;
exports.Character=Character;
exports.StringBuilder=StringBuilder;
var minRadix$888;function $valinit$minRadix$888(){if(minRadix$888===undefined)minRadix$888=(2);return minRadix$888;};$valinit$minRadix$888();
function getMinRadix(){return $valinit$minRadix$888();}
exports.getMinRadix=getMinRadix;
var $prop$getMinRadix={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','minRadix']};}};
exports.$prop$getMinRadix=$prop$getMinRadix;
$prop$getMinRadix.get=getMinRadix;
getMinRadix.$crtmm$=$prop$getMinRadix.$crtmm$;
var maxRadix$889;function $valinit$maxRadix$889(){if(maxRadix$889===undefined)maxRadix$889=(36);return maxRadix$889;};$valinit$maxRadix$889();
function getMaxRadix(){return $valinit$maxRadix$889();}
exports.getMaxRadix=getMaxRadix;
var $prop$getMaxRadix={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','maxRadix']};}};
exports.$prop$getMaxRadix=$prop$getMaxRadix;
$prop$getMaxRadix.get=getMaxRadix;
getMaxRadix.$crtmm$=$prop$getMaxRadix.$crtmm$;
function parseInteger(string$890,radix$891){
    if(radix$891===undefined){radix$891=(10);}
    //assert at parseInteger.ceylon (32:4-32:49)
    if(!((radix$891>=getMinRadix())&&(radix$891<=getMaxRadix()))) {throw wrapexc(AssertionException("Assertion failed: \'radix >= minRadix, radix <= maxRadix\' at parseInteger.ceylon (32:11-32:48)"),'32:4-32:49','parseInteger.ceylon'); }
    var ii$892=(0);
    function setIi$892(ii$893){return ii$892=ii$893;};
    var max$894=getRuntime().minIntegerValue.divided(radix$891);
    var negative$895;
    var char$896;
    if((char$896=string$890.$get(ii$892))!==null){
        if(char$896.equals(Character(45,true))){
            negative$895=true;
            (oldii$897=ii$892,ii$892=oldii$897.successor,oldii$897);
            var oldii$897;
        }else {
            if(char$896.equals(Character(43,true))){
                negative$895=false;
                (oldii$898=ii$892,ii$892=oldii$898.successor,oldii$898);
                var oldii$898;
            }else {
                negative$895=false;
            }
        }
    }else {
        return null;
    }
    var limit$899=(opt$900=(negative$895?getRuntime().minIntegerValue:null),opt$900!==null&&opt$900!==undefined?opt$900:(-getRuntime().maxIntegerValue));
    var opt$900;
    var length$901=string$890.size;
    var result$902=(0);
    function setResult$902(result$903){return result$902=result$903;};
    var sep$904=(-(1));
    function setSep$904(sep$905){return sep$904=sep$905;};
    var digitIndex$906=(0);
    function setDigitIndex$906(digitIndex$907){return digitIndex$906=digitIndex$907;};
    var groupingSize$908=(-(1));
    function setGroupingSize$908(groupingSize$909){return groupingSize$908=groupingSize$909;};
    while((ii$892<length$901)){
        var ch$910;
        var char$911;
        if((char$911=string$890.$get(ii$892))!==null){
            ch$910=char$911;
        }else {
            return null;
        }
        if(ch$910.equals(Character(95,true))){
            if((sep$904==(-(1)))){
                var digitGroupSize$912;
                if((digitGroupSize$912=computeDigitGroupingSize(radix$891,digitIndex$906,string$890,ii$892))!==null&&(digitIndex$906<=digitGroupSize$912)){
                    groupingSize$908=digitGroupSize$912;
                    sep$904=digitIndex$906;
                }else {
                    return null;
                }
            }else {
                if((digitIndex$906.minus(sep$904)==groupingSize$908)){
                    return null;
                }else {
                    sep$904=digitIndex$906;
                }
            }
        }else {
            if(((!(sep$904==(-(1))))&&(digitIndex$906.minus(sep$904)==groupingSize$908.plus((1))))){
                return null;
            }
            if((((ii$892.plus((1))==length$901)&&(radix$891==(10)))&&String$("kMGTP",5).contains(ch$910))){
                var magnitude$913;
                if((magnitude$913=computeMagnitude(radix$891,string$890.$get((oldii$914=ii$892,ii$892=oldii$914.successor,oldii$914))))!==null){
                    if((limit$899.divided(magnitude$913)<result$902)){
                        (result$902=result$902.times(magnitude$913));
                        break;
                    }else {
                        return null;
                    }
                }else {
                    return null;
                }
                var oldii$914;
            }else {
                var digit$915;
                if((digit$915=parseDigit(ch$910,radix$891))!==null){
                    if((result$902<max$894)){
                        return null;
                    }
                    (result$902=result$902.times(radix$891));
                    if((result$902<limit$899.plus(digit$915))){
                        return null;
                    }
                    (result$902=result$902.minus(digit$915));
                }else {
                    return null;
                }
            }
        }
        (oldii$916=ii$892,ii$892=oldii$916.successor,oldii$916);
        var oldii$916;
        (olddigitIndex$917=digitIndex$906,digitIndex$906=olddigitIndex$917.successor,olddigitIndex$917);
        var olddigitIndex$917;
    }
    if(((!(sep$904==(-(1))))&&(!(digitIndex$906.minus(sep$904)==groupingSize$908.plus((1)))))){
        return null;
    }
    if((digitIndex$906==(0))){
        return null;
    }
    return (opt$918=(negative$895?result$902:null),opt$918!==null&&opt$918!==undefined?opt$918:(-result$902));
    var opt$918;
}
exports.parseInteger=parseInteger;
parseInteger.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'string',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'radix',$mt:'prm',$def:1,$t:{t:Integer},$an:function(){return[];}}],$an:function(){return[doc(String$("The `Integer` value of the given string representation \nof an integer, or `null` if the string does not represent \nan integer or if the mathematical integer it represents \nis too large in magnitude to be represented by an \n`Integer`.\n\nThe syntax accepted by this function is the same as the \nsyntax for an `Integer` literal in the Ceylon language \nexcept that it may optionally begin with a sign \ncharacter (`+` or `-`).\n\nA radix can be given in input to specify what is the base\nto take in consideration for the parsing. radix has to be\nbetween `minRadix` and `maxRadix` included.\nThe list of available digits starts from `0` to `9` followed\nby `a` to `z`.\nWhen parsing in a specific base, the first `radix` digits\nfrom the available digits list can be used.\nThis function is not case sensitive; `a` and `A` both\ncorrespond to the `a` digit which decimal value is `10`.\n \n`_` character can be used to separate groups of digits\nfor bases 2, 10 and 16 as for `Integer` literal in the\nCeylon language. For any other bases, no grouping is\nsupported.",1046)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),AssertionError),String$("if `radix` is not between `minRadix` and `maxRadix`",51)),shared()];},d:['ceylon.language','parseInteger']};};
function computeDigitGroupingSize(radix$919,digitIndex$920,string$921,ii$922){
    var groupingSize$923;
    if((radix$919==(2))){
        groupingSize$923=(4);
    }else {
        if((radix$919==(10))){
            groupingSize$923=(3);
        }else {
            if((radix$919==(16))){
                var char$924;
                if((digitIndex$920<=(2))&&(char$924=string$921.$get(ii$922.plus((3))))!==null&&char$924.equals(Character(95,true))){
                    groupingSize$923=(2);
                }else {
                    groupingSize$923=(4);
                }
            }else {
                groupingSize$923=null;
            }
        }
    }
    return groupingSize$923;
};computeDigitGroupingSize.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'radix',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'digitIndex',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'string',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'ii',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],d:['ceylon.language','computeDigitGroupingSize']};};
function computeMagnitude(radix$925,char$926){
    var power$927;
    var char$928;
    if((char$928=char$926)!==null){
        if(char$928.equals(Character(80,true))){
            power$927=(15);
        }else {
            if(char$928.equals(Character(84,true))){
                power$927=(12);
            }else {
                if(char$928.equals(Character(71,true))){
                    power$927=(9);
                }else {
                    if(char$928.equals(Character(77,true))){
                        power$927=(6);
                    }else {
                        if(char$928.equals(Character(107,true))){
                            power$927=(3);
                        }else {
                            power$927=null;
                        }
                    }
                }
            }
        }
    }else {
        power$927=null;
    }
    var power$929;
    if((power$929=power$927)!==null){
        return radix$925.power(power$929);
    }
    return null;
};computeMagnitude.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'radix',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'char',$mt:'prm',$t:{t:'u', l:[{t:Null},{t:Character}]},$an:function(){return[];}}],d:['ceylon.language','computeMagnitude']};};
var aInt$930;function $valinit$aInt$930(){if(aInt$930===undefined)aInt$930=Character(97,true).integer;return aInt$930;};$valinit$aInt$930();
function getAInt(){return $valinit$aInt$930();}
exports.getAInt=getAInt;
var $prop$getAInt={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','aInt']};}};
exports.$prop$getAInt=$prop$getAInt;
$prop$getAInt.get=getAInt;
getAInt.$crtmm$=$prop$getAInt.$crtmm$;
var zeroInt$931;function $valinit$zeroInt$931(){if(zeroInt$931===undefined)zeroInt$931=Character(48,true).integer;return zeroInt$931;};$valinit$zeroInt$931();
function getZeroInt(){return $valinit$zeroInt$931();}
exports.getZeroInt=getZeroInt;
var $prop$getZeroInt={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','zeroInt']};}};
exports.$prop$getZeroInt=$prop$getZeroInt;
$prop$getZeroInt.get=getZeroInt;
getZeroInt.$crtmm$=$prop$getZeroInt.$crtmm$;
function parseDigit(digit$932,radix$933){
    var figure$934;
    var digitInt$935=digit$932.integer;
    if((tmpvar$936=digitInt$935.minus(getZeroInt()),tmpvar$936.compare((0))!==getSmaller()&&tmpvar$936.compare((10))===getSmaller())){
        figure$934=digitInt$935.minus(getZeroInt());
    }else {
        if((tmpvar$937=digitInt$935.minus(getAInt()),tmpvar$937.compare((0))!==getSmaller()&&tmpvar$937.compare((26))===getSmaller())){
            figure$934=digitInt$935.minus(getAInt()).plus((10));
        }else {
            return null;
        }
    }
    return ((figure$934<radix$933)?figure$934:null);
};parseDigit.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Integer}]},$ps:[{$nm:'digit',$mt:'prm',$t:{t:Character},$an:function(){return[];}},{$nm:'radix',$mt:'prm',$t:{t:Integer},$an:function(){return[];}}],d:['ceylon.language','parseDigit']};};
function formatInteger(integer$938,radix$939){
    if(radix$939===undefined){radix$939=(10);}
    //assert at parseInteger.ceylon (195:4-195:49)
    if(!((radix$939>=getMinRadix())&&(radix$939<=getMaxRadix()))) {throw wrapexc(AssertionException("Assertion failed: \'radix >= minRadix, radix <= maxRadix\' at parseInteger.ceylon (195:11-195:48)"),'195:4-195:49','parseInteger.ceylon'); }
    if((integer$938==(0))){
        return String$("0",1);
    }
    var digits$940=StringBuilder();
    var insertIndex$941;
    var i$942;
    function setI$942(i$943){return i$942=i$943;};
    if((integer$938<(0))){
        digits$940.append(String$("-",1));
        insertIndex$941=(1);
        i$942=integer$938;
    }else {
        insertIndex$941=(0);
        i$942=(-integer$938);
    }
    while((!(i$942==(0)))){
        var d$944=(-i$942.remainder(radix$939));
        var c$945;
        if((tmpvar$946=d$944,tmpvar$946.compare((0))!==getSmaller()&&tmpvar$946.compare((10))===getSmaller())){
            c$945=d$944.plus(getZeroInt()).character;
        }else {
            if((tmpvar$947=d$944,tmpvar$947.compare((10))!==getSmaller()&&tmpvar$947.compare((36))===getSmaller())){
                c$945=d$944.minus((10)).plus(getAInt()).character;
            }else {
                //assert at parseInteger.ceylon (220:12-220:26)
                if(!(false)) {throw wrapexc(AssertionException("Assertion failed: \'false\' at parseInteger.ceylon (220:19-220:25)"),'220:12-220:26','parseInteger.ceylon'); }
            }
        }
        digits$940.insertCharacter(insertIndex$941,c$945);
        i$942=i$942.plus(d$944).divided(radix$939);
    }
    return digits$940.string;
}
exports.formatInteger=formatInteger;
formatInteger.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},$ps:[{$nm:'integer',$mt:'prm',$t:{t:Integer},$an:function(){return[];}},{$nm:'radix',$mt:'prm',$def:1,$t:{t:Integer},$an:function(){return[];}}],$an:function(){return[doc(String$("The string representation of `integer` in the `radix` base.\n`radix` must be between `minRadix` and `maxRadix` included.\n\nIf `integer` is negative, returned string will start by character `-`",190)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),AssertionError),String$("if `radix` is not between `minRadix` and `maxRadix`",51)),shared()];},d:['ceylon.language','formatInteger']};};
function parseBoolean(string$948){
    var case$949=string$948;
    if(case$949.equals(String$("true",4))) {
        return true;
    }else if(case$949.equals(String$("false",5))) {
        return false;
    }else {
        return null;
    }
}
exports.parseBoolean=parseBoolean;
parseBoolean.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:$Boolean}]},$ps:[{$nm:'string',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$an:function(){return[doc(String$("The `Boolean` value of the given string representation of a boolean value,\nor `null` if the string does not represent a boolean value.\n\nRecognized values are \"true\", \"false\".",174)),shared()];},d:['ceylon.language','parseBoolean']};};
var and=function (p$950,q$951,$$$mptypes){
    return function(t$952){{
        return (p$950(t$952)&&q$951(t$952));
    }
}
}
;
and.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'p',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T',l:[{$t:'T$and'}]}}},$an:function(){return[];}},{$nm:'q',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T',l:[{$t:'T$and'}]}}},$an:function(){return[];}}],$tp:{T$and:{}},$an:function(){return[doc(String$("Returns a function which is the logical \nconjunction of the given predicate functions.",86)),shared()];},d:['ceylon.language','and']};};
exports.and=and;
var or=function (p$953,q$954,$$$mptypes){
    return function(t$955){{
        return (p$953(t$955)||q$954(t$955));
    }
}
}
;
or.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'p',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T',l:[{$t:'T$or'}]}}},$an:function(){return[];}},{$nm:'q',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T',l:[{$t:'T$or'}]}}},$an:function(){return[];}}],$tp:{T$or:{}},$an:function(){return[doc(String$("Returns a function which is the logical \ndisjunction of the given predicate functions.",86)),shared()];},d:['ceylon.language','or']};};
exports.or=or;
var not=function (p$956,$$$mptypes){
    return function(t$957){{
        return (!p$956(t$957));
    }
}
}
;
not.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'p',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T',l:[{$t:'T$not'}]}}},$an:function(){return[doc("The predicate function to negate")];}}],$tp:{T$not:{}},$an:function(){return[doc(String$("Returns a function which is the logical \nnegation of the given predicate function.",82)),shared()];},d:['ceylon.language','not']};};
exports.not=not;
function xor(p$958,q$959,$$$mptypes){
    return function(t$960){
        if(p$958(t$960)){
            return (!q$959(t$960));
        }else {
            return q$959(t$960);
        }
    }
}
exports.xor=xor;
xor.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'p',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T',l:[{$t:'T$xor'}]}}},$an:function(){return[];}},{$nm:'q',$mt:'prm',$t:{t:Callable,a:{Return$Callable:{t:$Boolean},Arguments$Callable:{t:'T',l:[{$t:'T$xor'}]}}},$an:function(){return[];}}],$tp:{T$xor:{}},$an:function(){return[doc(String$("Returns a function which is the logical \nexclusive disjunction of the given \npredicate functions.\nUnlike [[and]] and [[or]] both predicate functions are always evaluated.",170)),shared()];},d:['ceylon.language','xor']};};
function Annotated($$annotated){
}
Annotated.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("A program element that can\nbe annotated.",40)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Annotation)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','Annotated']};};
exports.Annotated=Annotated;
function $init$Annotated(){
    if(Annotated.$$===undefined){
        initTypeProtoI(Annotated,'ceylon.language::Annotated');
    }
    return Annotated;
}
exports.$init$Annotated=$init$Annotated;
$init$Annotated();
function Annotation($$annotation){
}
Annotation.$crtmm$=function(){return{mod:$CCMM$,of:[{t:ConstrainedAnnotation,a:{Values$ConstrainedAnnotation:{t:Anything},Value$ConstrainedAnnotation:{t:Annotation},ProgramElement$ConstrainedAnnotation:{t:Nothing}}}],$an:function(){return[doc(String$("The supertype of all *annotation classes*. \n\n### Annotation classes\n\nAn *annotation class* must satisfy `Annotation`,\n[[OptionalAnnotation]],  or [[SequencedAnnotation]] and must be \nannotated `final annotation`. For example:\n\n    \"An annotation class.\"\n    final annotation class Example(shared String description) \n          satisfies Annotation {}\n\nAnnotation classes which satisfy `Annotation` directly may be applied \nto any program element that supports annotations (see [[Annotated]]). \nIn practice, annotation classes often satisfy [[OptionalAnnotation]] \nor [[SequencedAnnotation]] in order to prevent annotations being \napplied to inappropriate program elements.\n\nEach initializer parameter of an annotation class must have one of the \nfollowing types:\n\n* `Integer`, `Float`, `Character`, or `String`,\n* an enumerated type whose cases are all anonymous classes, \n  such as `Boolean`,\n* a subtype of [[ceylon.language.meta.declaration::Declaration]]\n* an annotation class,\n* `{T*}` or `[T*]` where `T` is a legal annotation parameter type, or\n* any tuple type whose element types are legal annotation parameter types.\n\nAn initializer parameter of an annotation class may be variadic \nor defaulted.\n\n### Annotation constructors\n\nAn *annotation constructor* is simply a top level function, annotated with \n`annotation` whose return type is an annotation class type. For example:\n\n    \"An annotation constructor.\"\n    annotation Example example(String description=\"\") \n        => Example(description);\n\nEach parameter of an annotation constructor must have one of the \nfollowing types:\n\n* `Integer`, `Float`, `Character`, or `String`,\n* an enumerated type whose cases are all anonymous classes, \n  such as `Boolean`,\n* a subtype of [[ceylon.language.meta.declaration::Declaration]],\n* an annotation type,\n* `{T*}` or `[T*]` where `T` is a legal annotation constructor parameter \n  type, or\n* any tuple type whose element types are legal annotation constructor \n  parameter types.\n\nA parameter of an annotation constructor may be variadic or defaulted.\n\nThe constructor must simply instantiate and return the annotation class, \nand there are strict rules about the arguments to the instantiation.\n\nAn annotation class can have multiple annotation constructors.\n",2266)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),OptionalAnnotation),$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),SequencedAnnotation),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta'),annotations$meta),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta'),optionalAnnotation$meta),$init$OpenFunction()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta'),sequencedAnnotations$meta)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:'u', l:[{t:InterfaceDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}})),shared()];},d:['ceylon.language','Annotation']};};
exports.Annotation=Annotation;
function $init$Annotation(){
    if(Annotation.$$===undefined){
        initTypeProtoI(Annotation,'ceylon.language::Annotation');
    }
    return Annotation;
}
exports.$init$Annotation=$init$Annotation;
$init$Annotation();
function ConstrainedAnnotation($$targs$$,$$constrainedAnnotation){
    Annotation($$constrainedAnnotation);
    set_type_args($$constrainedAnnotation,$$targs$$);
}
ConstrainedAnnotation.$crtmm$=function(){return{mod:$CCMM$,$tp:{Value$ConstrainedAnnotation:{'var':'out','satisfies':[{t:Annotation}],'def':{t:Annotation}},Values$ConstrainedAnnotation:{'var':'out','def':{t:Anything}},ProgramElement$ConstrainedAnnotation:{'var':'in','satisfies':[{t:Annotated}],'def':{t:Nothing}}},satisfies:[{t:Annotation}],of:['Value$ConstrainedAnnotation'],$an:function(){return[doc(String$("An annotation constrained to appear only on certain \nprogram elements, and only with certain values. \n\nThis interface should not be satisfied directly. \nInstead either [[OptionalAnnotation]] or [[SequencedAnnotation]] \nshould be satisfied.",239)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Annotation)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','ConstrainedAnnotation']};};
exports.ConstrainedAnnotation=ConstrainedAnnotation;
function $init$ConstrainedAnnotation(){
    if(ConstrainedAnnotation.$$===undefined){
        initTypeProtoI(ConstrainedAnnotation,'ceylon.language::ConstrainedAnnotation',$init$Annotation());
        (function($$constrainedAnnotation){
            $$constrainedAnnotation.occurs=function (programElement$961){
                var $$constrainedAnnotation=this;
                return isOfType(programElement$961,$$constrainedAnnotation.$$targs$$.ProgramElement$ConstrainedAnnotation);
            };
            $$constrainedAnnotation.occurs.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'programElement',$mt:'prm',$t:{t:Annotated},$an:function(){return[];}}],$cont:ConstrainedAnnotation,$an:function(){return[doc(String$("Can this annotation occur on the given program \nelement?",56)),shared()];},d:['ceylon.language','ConstrainedAnnotation','$m','occurs']};};
        })(ConstrainedAnnotation.$$.prototype);
    }
    return ConstrainedAnnotation;
}
exports.$init$ConstrainedAnnotation=$init$ConstrainedAnnotation;
$init$ConstrainedAnnotation();
function OptionalAnnotation($$targs$$,$$optionalAnnotation){
    ConstrainedAnnotation({Values$ConstrainedAnnotation:{t:'u', l:[{t:Null},$$targs$$.Value$OptionalAnnotation]},Value$ConstrainedAnnotation:$$targs$$.Value$OptionalAnnotation,ProgramElement$ConstrainedAnnotation:$$targs$$.ProgramElement$OptionalAnnotation},$$optionalAnnotation);
    set_type_args($$optionalAnnotation,$$targs$$);
}
OptionalAnnotation.$crtmm$=function(){return{mod:$CCMM$,$tp:{Value$OptionalAnnotation:{'var':'out','satisfies':[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:'Value$OptionalAnnotation',ProgramElement$OptionalAnnotation:'ProgramElement$OptionalAnnotation'}}]},ProgramElement$OptionalAnnotation:{'var':'in','satisfies':[{t:Annotated}],'def':{t:Annotated}}},satisfies:[{t:ConstrainedAnnotation,a:{Values$ConstrainedAnnotation:{t:'u', l:[{t:Null},'Value$OptionalAnnotation']},Value$ConstrainedAnnotation:'Value$OptionalAnnotation',ProgramElement$ConstrainedAnnotation:'ProgramElement$OptionalAnnotation'}}],of:['Value$OptionalAnnotation'],$an:function(){return[doc(String$("An annotation that may occur at most once at a single program element and \nonly on certain program elements.\n\nAn optional annotation is declared simply by having the annotation class\nsatisfy OptionalAnnotation instead of [[Annotation]]. For example \nthe following would only be allowed on `class` declarations:\n\n    final annotation class ExampleClass() \n            satisfies OptionalAnnotation<Example, ClassDeclaration> {}\n\nAt runtime a [[ceylon.language.meta.declaration::Declaration]] instance \ncan be queried for its `OptionalAnnotation`s of a certain type using \n[[ceylon.language.meta::annotations]] or [[ceylon.language.meta::optionalAnnotation]].\n",657)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Annotation)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','OptionalAnnotation']};};
exports.OptionalAnnotation=OptionalAnnotation;
function $init$OptionalAnnotation(){
    if(OptionalAnnotation.$$===undefined){
        initTypeProtoI(OptionalAnnotation,'ceylon.language::OptionalAnnotation',$init$ConstrainedAnnotation());
    }
    return OptionalAnnotation;
}
exports.$init$OptionalAnnotation=$init$OptionalAnnotation;
$init$OptionalAnnotation();
function SequencedAnnotation($$targs$$,$$sequencedAnnotation){
    ConstrainedAnnotation({Values$ConstrainedAnnotation:{t:Sequential,a:{Element$Sequential:$$targs$$.Value$SequencedAnnotation}},Value$ConstrainedAnnotation:$$targs$$.Value$SequencedAnnotation,ProgramElement$ConstrainedAnnotation:$$targs$$.ProgramElement$SequencedAnnotation},$$sequencedAnnotation);
    add_type_arg($$sequencedAnnotation,'Values$ConstrainedAnnotation',{t:Sequential,a:{Element$Sequential:$$sequencedAnnotation.$$targs$$.Value$SequencedAnnotation}});
    set_type_args($$sequencedAnnotation,$$targs$$);
}
SequencedAnnotation.$crtmm$=function(){return{mod:$CCMM$,$tp:{Value$SequencedAnnotation:{'var':'out','satisfies':[{t:SequencedAnnotation,a:{Value$SequencedAnnotation:'Value$SequencedAnnotation',ProgramElement$SequencedAnnotation:'ProgramElement$SequencedAnnotation'}}]},ProgramElement$SequencedAnnotation:{'var':'in','satisfies':[{t:Annotated}],'def':{t:Annotated}}},satisfies:[{t:ConstrainedAnnotation,a:{Values$ConstrainedAnnotation:{t:Sequential,a:{Element$Sequential:'Value$SequencedAnnotation'}},Value$ConstrainedAnnotation:'Value$SequencedAnnotation',ProgramElement$ConstrainedAnnotation:'ProgramElement$SequencedAnnotation'}}],of:['Value$SequencedAnnotation'],$an:function(){return[doc(String$("An annotation that may occur multiple times at a single program element, \nand only on certain program elemenets.\n\nA sequenced annotation is declared simply by having the annotation class\nsatisfy SequencedAnnotation instead of [[Annotation]]. For example \nthe following would only be allowed on `class` declarations, \nfunctions or methods:\n\n    alias ExecutableDeclaration \n           => ClassOrInterfaceDeclaration|FunctionDeclaration\n    \"Documents a pattern that the annotated element is particpating in\"\n    final annotation class Pattern(String name) \n            satisfies SequencedAnnotation<Pattern, ExecutableDeclaration> {\n    }\n\nAt runtime a [[ceylon.language.meta.declaration::Declaration]] instance \ncan be queried for its `SequencedAnnotation`s of a certain type using \n[[ceylon.language.meta::annotations]] or [[ceylon.language.meta::sequencedAnnotations]].\n",872)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Annotation)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared()];},d:['ceylon.language','SequencedAnnotation']};};
exports.SequencedAnnotation=SequencedAnnotation;
function $init$SequencedAnnotation(){
    if(SequencedAnnotation.$$===undefined){
        initTypeProtoI(SequencedAnnotation,'ceylon.language::SequencedAnnotation',$init$ConstrainedAnnotation());
    }
    return SequencedAnnotation;
}
exports.$init$SequencedAnnotation=$init$SequencedAnnotation;
$init$SequencedAnnotation();
function optionalAnnotation$meta(annotationType$962,programElement$963,$$$mptypes){
    return annotations$meta(annotationType$962,programElement$963,{Values$annotations:{t:'u', l:[{t:Null},$$$mptypes.Value$optionalAnnotation]},Value$annotations:$$$mptypes.Value$optionalAnnotation,ProgramElement$annotations:$$$mptypes.ProgramElement$optionalAnnotation});
}
exports.optionalAnnotation$meta=optionalAnnotation$meta;
optionalAnnotation$meta.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Value$optionalAnnotation']},$ps:[{$nm:'annotationType',$mt:'prm',$t:{t:Class$meta$model,a:{Type$Class:{t:OptionalAnnotation,a:{Value$OptionalAnnotation:'Value$optionalAnnotation',ProgramElement$OptionalAnnotation:'ProgramElement$optionalAnnotation'}},Arguments$Class:{t:Nothing}}},$an:function(){return[];}},{$nm:'programElement',$mt:'prm',$t:'ProgramElement$optionalAnnotation',$an:function(){return[];}}],$tp:{Value$optionalAnnotation:{'satisfies':[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:'Value$optionalAnnotation',ProgramElement$OptionalAnnotation:'ProgramElement$optionalAnnotation'}}]},ProgramElement$optionalAnnotation:{'var':'in','satisfies':[{t:Annotated}]}},$an:function(){return[doc(String$("The value of given optional annotation type on the given program element, \nor null if the program element was not annotated with that annotation type.\nFor example:\n\n    // Does the process declaration have the Shared annotation?\n    value isShared = optionalAnnotation(`Shared`, `value process`) exists;\n",304)),shared()];},d:['ceylon.language.meta','optionalAnnotation']};};
function sequencedAnnotations$meta(annotationType$964,programElement$965,$$$mptypes){
    return annotations$meta(annotationType$964,programElement$965,{Values$annotations:{t:Sequential,a:{Element$Sequential:$$$mptypes.Value$sequencedAnnotations}},Value$annotations:$$$mptypes.Value$sequencedAnnotations,ProgramElement$annotations:$$$mptypes.ProgramElement$sequencedAnnotations});
}
exports.sequencedAnnotations$meta=sequencedAnnotations$meta;
sequencedAnnotations$meta.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Value$sequencedAnnotations'}},$ps:[{$nm:'annotationType',$mt:'prm',$t:{t:Class$meta$model,a:{Type$Class:{t:SequencedAnnotation,a:{Value$SequencedAnnotation:'Value$sequencedAnnotations',ProgramElement$SequencedAnnotation:'ProgramElement$sequencedAnnotations'}},Arguments$Class:{t:Nothing}}},$an:function(){return[];}},{$nm:'programElement',$mt:'prm',$t:'ProgramElement$sequencedAnnotations',$an:function(){return[];}}],$tp:{Value$sequencedAnnotations:{'satisfies':[{t:SequencedAnnotation,a:{Value$SequencedAnnotation:'Value$sequencedAnnotations',ProgramElement$SequencedAnnotation:'ProgramElement$sequencedAnnotations'}}]},ProgramElement$sequencedAnnotations:{'var':'in','satisfies':[{t:Annotated}]}},$an:function(){return[doc(String$("The values of given sequenced annotation type on the given program element, \nor empty if the program element was not annotated with that annotation type.\nFor example:\n\n    // Does the sum declaration have any ThrownException annotations?\n    value throwsSomething = sequencedAnnotation(`ThrownException`, `function sum`) nonempty;\n\nThe annotations may be returned in any order.\n",378)),shared()];},d:['ceylon.language.meta','sequencedAnnotations']};};
function modules$966$meta(){
    var $$modules=new modules$966$meta.$$;
    $$modules.$prop$getList={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Module$meta$declaration}}},$cont:modules$966$meta,$an:function(){return[doc(String$("Returns the list of all currently loaded modules. This may include modules that\nwere not imported directly but your module, and multiple versions of the same\nmodule.",165)),shared(),$native()];},d:['ceylon.language.meta','modules','$at','list']};}};
    $$modules.$prop$getDefault={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Module$meta$declaration}]},$cont:modules$966$meta,$an:function(){return[doc(String$("Returns the default module, if there is one. This is only the case when\nyou are running the default module.",107)),shared(),$native()];},d:['ceylon.language.meta','modules','$at','default']};}};
    return $$modules;
};modules$966$meta.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$an:function(){return[doc("Represents the list of Ceylon modules currently loaded at runtime.\n\nNote that this contains all loaded modules, including those that are\nnot imported by your module.\n\nSince Ceylon supports module isolation at runtime, it is possible that\nthere are more than one version of a given module loaded at the same time.\n\n### Usage example\n\nHere\'s how you would iterate all the loaded modules and print their name and version:\n\n    import ceylon.language.meta { modules }\n\n    for(mod in modules.list){\n        print(\"Module: ``mod.name``/``mod.version``\");\n    }\n"),shared(),$native()];},d:['ceylon.language.meta','modules']};};
function $init$modules$966$meta(){
    if(modules$966$meta.$$===undefined){
        initTypeProto(modules$966$meta,'ceylon.language.meta::modules',Basic);
        (function($$modules){
        })(modules$966$meta.$$.prototype);
    }
    return modules$966$meta;
}
exports.$init$modules$966$meta=$init$modules$966$meta;
$init$modules$966$meta();
var modules$967$meta;
function getModules$meta(){
    if(modules$967$meta===undefined){modules$967$meta=$init$modules$966$meta()();modules$967$meta.$crtmm$=getModules$meta.$crtmm$;}
    return modules$967$meta;
}
exports.getModules$meta=getModules$meta;
getModules$meta.$crtmm$=function(){return{mod:$CCMM$,$t:{t:modules$966$meta},$an:function(){return[doc(String$("Represents the list of Ceylon modules currently loaded at runtime.\n\nNote that this contains all loaded modules, including those that are\nnot imported by your module.\n\nSince Ceylon supports module isolation at runtime, it is possible that\nthere are more than one version of a given module loaded at the same time.\n\n### Usage example\n\nHere\'s how you would iterate all the loaded modules and print their name and version:\n\n    import ceylon.language.meta { modules }\n\n    for(mod in modules.list){\n        print(\"Module: ``mod.name``/``mod.version``\");\n    }\n",556)),shared(),$native()];},d:['ceylon.language.meta','modules']};};
$prop$getModules$meta={get:getModules$meta,$crtmm$:getModules$meta.$crtmm$};
exports.$prop$getModules$meta=$prop$getModules$meta;
function ValueModel$meta$model($$targs$$,$$valueModel){
    Model$meta$model($$valueModel);
    set_type_args($$valueModel,$$targs$$);
}
ValueModel$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Get$ValueModel:{'var':'out','def':{t:Anything}},Set$ValueModel:{'var':'in','def':{t:Nothing}}},satisfies:[{t:Model$meta$model}],$an:function(){return[doc(String$("A value model represents the model of a Ceylon value that you can inspect.\n\nA value model can be either a toplevel [[Value]] or a member [[Attribute]].\n",152)),shared()];},d:['ceylon.language.meta.model','ValueModel']};};
exports.ValueModel$meta$model=ValueModel$meta$model;
function $init$ValueModel$meta$model(){
    if(ValueModel$meta$model.$$===undefined){
        initTypeProtoI(ValueModel$meta$model,'ceylon.language.meta.model::ValueModel',$init$Model$meta$model());
        (function($$valueModel){
            $$valueModel.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:ValueDeclaration$meta$declaration},$cont:ValueModel$meta$model,$an:function(){return[doc(String$("This value\'s declaration.",25)),shared(),formal(),actual()];},d:['ceylon.language.meta.model','ValueModel','$at','declaration']};}};
            $$valueModel.$prop$getType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Type$meta$model,a:{Type$Type:'Get$ValueModel'}},$cont:ValueModel$meta$model,$an:function(){return[doc(String$("This value\'s closed type.",25)),shared(),formal()];},d:['ceylon.language.meta.model','ValueModel','$at','type']};}};
        })(ValueModel$meta$model.$$.prototype);
    }
    return ValueModel$meta$model;
}
exports.$init$ValueModel$meta$model=$init$ValueModel$meta$model;
$init$ValueModel$meta$model();
function ClassOrInterface$meta$model($$targs$$,$$classOrInterface){
    Model$meta$model($$classOrInterface);
    Generic$meta$model($$classOrInterface);
    Type$meta$model({Type$Type:$$targs$$.Type$ClassOrInterface},$$classOrInterface);
    set_type_args($$classOrInterface,$$targs$$);
}
ClassOrInterface$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$ClassOrInterface:{'var':'out','def':{t:Anything}}},satisfies:[{t:Model$meta$model},{t:Generic$meta$model},{t:Type$meta$model,a:{Type$Type:'Type$ClassOrInterface'}}],of:[{t:ClassModel$meta$model,a:{Type$ClassModel:'Type$ClassOrInterface',Arguments$ClassModel:{t:Nothing}}},{t:InterfaceModel$meta$model,a:{Type$InterfaceModel:'Type$ClassOrInterface'}}],$an:function(){return[doc(String$("Model of a class or interface that you can inspect.\n\nThe models of classes and interfaces are also closed types.",112)),shared()];},d:['ceylon.language.meta.model','ClassOrInterface']};};
exports.ClassOrInterface$meta$model=ClassOrInterface$meta$model;
function $init$ClassOrInterface$meta$model(){
    if(ClassOrInterface$meta$model.$$===undefined){
        initTypeProtoI(ClassOrInterface$meta$model,'ceylon.language.meta.model::ClassOrInterface',$init$Model$meta$model(),$init$Generic$meta$model(),$init$Type$meta$model());
        (function($$classOrInterface){
            $$classOrInterface.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:ClassOrInterfaceDeclaration$meta$declaration},$cont:ClassOrInterface$meta$model,$an:function(){return[doc(String$("The declaration for this class or interface.",44)),shared(),formal(),actual()];},d:['ceylon.language.meta.model','ClassOrInterface','$at','declaration']};}};
            $$classOrInterface.$prop$getExtendedType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:ClassModel$meta$model,a:{Type$ClassModel:{t:Anything},Arguments$ClassModel:{t:Nothing}}}]},$cont:ClassOrInterface$meta$model,$an:function(){return[doc(String$("The extended closed type for this class or interface. Note that the [[Anything|ceylon.language::Anything]] type\nhas no extended type since it is the top of the type hierarchy.",175)),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$at','extendedType']};}};
            $$classOrInterface.$prop$getSatisfiedTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:InterfaceModel$meta$model,a:{Type$InterfaceModel:{t:Anything}}}}},$cont:ClassOrInterface$meta$model,$an:function(){return[doc(String$("The list of closed types that this class or interface satisfies.",64)),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$at','satisfiedTypes']};}};
            $$classOrInterface.getClassOrInterface={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Member$meta$model,a:{Container$Member:'Container$getClassOrInterface',Kind$Member:'Kind$getClassOrInterface'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getClassOrInterface:{'def':{t:Nothing}},Kind$getClassOrInterface:{'satisfies':[{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:{t:Anything}}}],'def':{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:{t:Anything}}}}},$an:function(){return[doc("Gets a member class or interface by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container` or `Kind` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getClassOrInterface']};}};$$classOrInterface.getDeclaredClassOrInterface={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Member$meta$model,a:{Container$Member:'Container$getDeclaredClassOrInterface',Kind$Member:'Kind$getDeclaredClassOrInterface'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getDeclaredClassOrInterface:{'def':{t:Nothing}},Kind$getDeclaredClassOrInterface:{'satisfies':[{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:{t:Anything}}}],'def':{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:{t:Anything}}}}},$an:function(){return[doc("Gets a member class or interface by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container` or `Kind` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredClassOrInterface']};}};$$classOrInterface.getClass={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:MemberClass$meta$model,a:{Type$MemberClass:'Type$getClass',Container$MemberClass:'Container$getClass',Arguments$MemberClass:'Arguments$getClass'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getClass:{'def':{t:Nothing}},Type$getClass:{'def':{t:Anything}},Arguments$getClass:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Gets a member class by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container`, `Type` or `Arguments` type arguments are not compatible with the actual result, \nor if the corresponding member is not a `MemberClass`."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getClass']};}};$$classOrInterface.getDeclaredClass={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:MemberClass$meta$model,a:{Type$MemberClass:'Type$getDeclaredClass',Container$MemberClass:'Container$getDeclaredClass',Arguments$MemberClass:'Arguments$getDeclaredClass'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getDeclaredClass:{'def':{t:Nothing}},Type$getDeclaredClass:{'def':{t:Anything}},Arguments$getDeclaredClass:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Gets a member class by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container`, `Type` or `Arguments` type arguments are not compatible with the actual result, \nor if the corresponding member is not a `MemberClass`."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredClass']};}};$$classOrInterface.getInterface={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:MemberInterface$meta$model,a:{Type$MemberInterface:'Type$getInterface',Container$MemberInterface:'Container$getInterface'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getInterface:{'def':{t:Nothing}},Type$getInterface:{'def':{t:Anything}}},$an:function(){return[doc("Gets a member interface by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container` or `Type` type arguments are not compatible with the actual result, \nor if the corresponding member is not a `MemberInterface`."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getInterface']};}};$$classOrInterface.getDeclaredInterface={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:MemberInterface$meta$model,a:{Type$MemberInterface:'Type$getDeclaredInterface',Container$MemberInterface:'Container$getDeclaredInterface'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getDeclaredInterface:{'def':{t:Nothing}},Type$getDeclaredInterface:{'def':{t:Anything}}},$an:function(){return[doc("Gets a member interface by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container` or `Type` type arguments are not compatible with the actual result, \nor if the corresponding member is not a `MemberInterface`."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredInterface']};}};$$classOrInterface.getMethod={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Method$meta$model,a:{Type$Method:'Type$getMethod',Container$Method:'Container$getMethod',Arguments$Method:'Arguments$getMethod'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getMethod:{'def':{t:Nothing}},Type$getMethod:{'def':{t:Anything}},Arguments$getMethod:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Gets a method by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container`, `Type` or `Arguments` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getMethod']};}};$$classOrInterface.getDeclaredMethod={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Method$meta$model,a:{Type$Method:'Type$getDeclaredMethod',Container$Method:'Container$getDeclaredMethod',Arguments$Method:'Arguments$getDeclaredMethod'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getDeclaredMethod:{'def':{t:Nothing}},Type$getDeclaredMethod:{'def':{t:Anything}},Arguments$getDeclaredMethod:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Gets a method by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container`, `Type` or `Arguments` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredMethod']};}};$$classOrInterface.getAttribute={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Attribute$meta$model,a:{Container$Attribute:'Container$getAttribute',Set$Attribute:'Set$getAttribute',Get$Attribute:'Get$getAttribute'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getAttribute:{'def':{t:Nothing}},Get$getAttribute:{'def':{t:Anything}},Set$getAttribute:{'def':{t:Nothing}}},$an:function(){return[doc("Gets an attribute by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container`, `Get` or `Set` type arguments are not compatible with the actual result."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getAttribute']};}};$$classOrInterface.getDeclaredAttribute={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Attribute$meta$model,a:{Container$Attribute:'Container$getDeclaredAttribute',Set$Attribute:'Set$getDeclaredAttribute',Get$Attribute:'Get$getDeclaredAttribute'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$getDeclaredAttribute:{'def':{t:Nothing}},Get$getDeclaredAttribute:{'def':{t:Anything}},Set$getDeclaredAttribute:{'def':{t:Nothing}}},$an:function(){return[doc("Gets an attribute by name. Returns `null` if not found."),$throws("IncompatibleTypeException","If the specified `Container`, `Get` or `Set` type arguments are not compatible with the actual result."),shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredAttribute']};}};
        })(ClassOrInterface$meta$model.$$.prototype);
    }
    return ClassOrInterface$meta$model;
}
exports.$init$ClassOrInterface$meta$model=$init$ClassOrInterface$meta$model;
$init$ClassOrInterface$meta$model();
//Addendum to ClassOrInterface
defineAttr(ClassOrInterface$meta$model.$$.prototype,'satisfiedTypes',function(){
  var ints = this.tipo.$crtmm$['satisfies'];
  if (ints && ints.length) {
    var rv = [];
    function resolveTypeArguments(root,type) {
      if (type.a) {
        var t2 = {t:type.t, a:{}};
        for (var targ in type.a) {
          t2.a[targ]=typeof(type.a[targ])==='string' ?
            t2.a[targ]=root.$$targs$$.Type$ClassOrInterface.a[type.a[targ]]
            : t2.a[targ]=type.a[targ];
          if (t2.a[targ] && t2.a[targ].a) {
            t2.a[targ]=resolveTypeArguments(root,t2.a[targ]);
          }
        }
        type=t2;
      }
      return type;
    }
    for (var i=0; i < ints.length; i++) {
      var ifc = resolveTypeArguments(this,ints[i]);
      var mm=getrtmm$$(ifc.t);
      if (mm.$cont) {
        rv.push(AppliedMemberInterface(ifc.t, {Type$MemberInterface:ifc}));
      } else {
        rv.push(AppliedInterface(ifc.t, {Type$Interface:ifc}));
      }
    }
    return rv.reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceModel$meta$model,a:{Type$InterfaceModel:{t:Anything}}}});
  }
  return getEmpty();
},undefined,function(){
  return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Iterable:{t:InterfaceModel$meta$model,a:{Type:{t:Anything}}}}},$cont:ClassOrInterface$meta$model,
  $an:function(){return[shared(),formal()];},d:['ceylon.language.meta.model','ClassOrInterface','$at','satisfiedTypes']};
});
ClassOrInterface$meta$model.$$.prototype.getMethod=function(name,types,$$$mptypes) {
  if (!extendsType($$$mptypes.Container$getMethod,{t:this.tipo}))throw IncompatibleTypeException$meta$model("Incompatible Container type argument");
  var fun = this.tipo[name];
  if (!fun) fun = this.tipo.$$.prototype[name];
  if (!fun) return null;
  var mm=getrtmm$$(fun);
  var _t=$$$mptypes.Type$getMethod;
  var _a=$$$mptypes.Arguments$getMethod;
  if (mm) {
    if (mm.$t){
      _t=mm.$t;
      if (typeof(_t)==='string') {
        var _ta;
        if (this.$targs && this.$targs[_t])_t=this.$targs[_t];
        else if ($$$mptypes.Container$getMethod && $$$mptypes.Container$getMethod.a && $$$mptypes.Container$getMethod.a[_t])_t=$$$mptypes.Container$getMethod.a[_t];
        else if (mm.$tp && mm.$tp[_t])_ta=mm.$tp[_t];
        else if (this.tipo.$crtmm$.$tp && this.tipo.$crtmm$.$tp[_t])_ta=this.tipo.$crtmm$.$tp[_t];
        if (_ta && _ta.satisfies)_t=_ta.satisfies.length===1?_ta.satisfies[0]:{t:'i',l:_ta.satisfies};
        if (typeof(_t)==='string')_t={t:Anything};
      }
      if (!extendsType(_t,$$$mptypes.Type$getMethod))throw IncompatibleTypeException$meta$model("Incompatible Type argument");
    }
    validate$params(mm.$ps,_a,"Wrong number of Arguments for getMethod");
    _a=tupleize$params(mm.$ps);
  }
  return AppliedMethod(fun, types, {Container$Method:{t:this.tipo},Type$Method:_t,Arguments$Method:_a});
}
ClassOrInterface$meta$model.$$.prototype.getMethod.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Method$meta$model,a:{Arguments:'Arguments',Type:'Type',Container:'Container'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Iterable:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{},Arguments:{'satisfies':[{t:Sequential,a:{Element$Iterable:{t:Anything}}}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getMethod']};};
ClassOrInterface$meta$model.$$.prototype.getDeclaredMethod=function(name,types,$$$mptypes) {
  var rv=this.getMethod(name,types,{Type$getMethod:$$$mptypes.Type$getDeclaredMethod,Arguments$getMethod:$$$mptypes.Arguments$getDeclaredMethod,
    Container$getMethod:$$$mptypes.Container$getDeclaredMethod});
  if (rv && rv.tipo) {
    var mm=getrtmm$$(rv.tipo);
    if (mm && mm.$cont!==this.tipo)return null;
  }
  return rv;
}
ClassOrInterface$meta$model.$$.prototype.getDeclaredMethod.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Method$meta$model,a:{Arguments:'Arguments',Type:'Type',Container:'Container'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Iterable:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{},Arguments:{'satisfies':[{t:Sequential,a:{Element$Iterable:{t:Anything}}}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredMethod']};};
ClassOrInterface$meta$model.$$.prototype.getAttribute=function getAttribute(name$15,$$$mptypes){
  if (!extendsType($$$mptypes.Container$getAttribute,{t:this.tipo}))throw IncompatibleTypeException$meta$model("Incompatible Container type argument");
  var nom = '$prop$get' + name$15[0].toUpperCase() + name$15.substring(1);
  var at = this.tipo.$$.prototype[nom];
  if (!at)return null;
  var mm=getrtmm$$(at);
  var _t=$$$mptypes.Get$getAttribute;
  if (mm && mm.$t) {
    if (!extendsType(mm.$t,_t))throw IncompatibleTypeException$meta$model("Incompatible Get type argument");
    if (!extendsType($$$mptypes.Set$getAttribute,at.set?mm.$t:{t:Nothing}))throw IncompatibleTypeException$meta$model("Incompatible Set type argument");
    _t=mm.$t;
  }
  var rv=AppliedAttribute(name$15, at, {Get$Attribute:_t,Set$Attribute:at.set?_t:{t:Nothing}, Container$Attribute:{t:this.tipo}});
  if (this.$targs)rv.$$targs$$.Container$Attribute.a=this.$targs;
  rv.$parent=this;
  return rv;
};
ClassOrInterface$meta$model.$$.prototype.getAttribute.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Attribute$meta$model,a:{Get:'Get',Set:'Set',Container:'Container'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getAttribute']};};
ClassOrInterface$meta$model.$$.prototype.getDeclaredAttribute=function getDeclaredAttribute(name$15,$$$mptypes){
  var rv=this.getAttribute(name$15,{Get$getAttribute:$$$mptypes.Get$getDeclaredAttribute,Set$getAttribute:$$$mptypes.Set$getDeclaredAttribute,
    Container$getAttribute:$$$mptypes.Container$getDeclaredAttribute});
  if (rv && rv.tipo) {
    var mm=getrtmm$$(rv.tipo);
    if (mm&&mm.$cont!==this.tipo)return null;
  }
  return rv;
};ClassOrInterface$meta$model.$$.prototype.getDeclaredAttribute.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Attribute$meta$model,a:{Get:'Get',Set:'Set',Container:'Container'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredAttribute']};};
defineAttr(ClassOrInterface$meta$model.$$.prototype,'container',function(){
  if (this.$parent)return this.$parent;
  var cont = this.tipo.$crtmm$.$cont;
  if (cont === undefined)return null;
  if (get_model(cont.$crtmm$).$mt === 'ifc')
    return AppliedInterface(cont,{Type$Interface:{t:cont}});
  return AppliedClass(cont,{Type$Class:{t:cont},Arguments$Class:{t:Sequential,a:{Element$Iterable:{t:Anything}}}});
},undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Type$meta$model,a:{Type:{t:Anything}}}]},$cont:ClassOrInterface$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Member','$at','container']};});
ClassOrInterface$meta$model.$$.prototype.getClassOrInterface=function getClassOrInterface(name$2,types$3,$$$mptypes,noInherit){
  if (!extendsType($$$mptypes.Kind$getClassOrInterface, {t:ClassOrInterface$meta$model}))throw IncompatibleTypeException$meta$model("Kind must be ClassOrInterface");
  if (!extendsType($$$mptypes.Container$getClassOrInterface,{t:this.tipo}))throw IncompatibleTypeException$meta$model("Incompatible type specified in Container");
  var $$clase=this;
  if(types$3===undefined){types$3=getEmpty();}
  var mm = getrtmm$$($$clase.tipo);
  var nom = name$2 + '$' + mm.d[mm.d.length-1];
  var ic = $$clase.tipo.$$.prototype[nom];
  if (!ic) {
    if (noInherit)return null;
    var pere=mm['super'];
    while (!ic && pere) {
      mm=getrtmm$$(pere.t);
      nom=mm&&mm.d?name$2+'$'+mm.d[mm.d.length-1]:undefined;
      if (nom)ic=$$clase.tipo.$$.prototype[nom];
      if (!ic)pere=mm['super'];
    }
  }
  if (ic) {
    mm = getrtmm$$(ic);
    var md = get_model(mm);
    var rv;
    var ict={t:ic};
    var _cont={t:this.tipo};
    if (this.$targs)_cont.a=this.$targs;
    if (md.$mt==='ifc') {
      if (!extendsType({t:Interface$meta$model},{t:$$$mptypes.Kind$getClassOrInterface.t}))throw IncompatibleTypeException$meta$model("Member " + name$2 + " is an interface");
      validate$typeparams(ict,ic.$crtmm$.$tp,types$3);
      rv=AppliedMemberInterface(ic, {Container$MemberInterface:_cont,Type$MemberInterface:ict});
    } else if (md.$mt==='cls'){
      if (!extendsType({t:Class$meta$model},{t:$$$mptypes.Kind$getClassOrInterface.t}))throw IncompatibleTypeException$meta$model("Member " + name$2 + " is a class");
      validate$typeparams(ict,ic.$crtmm$.$tp,types$3);
      rv=AppliedMemberClass(ic, {Container$MemberClass:_cont,Type$MemberClass:ict, Arguments$MemberClass:$$$mptypes.Arguments$getClassOrInterface});
    } else {
      throw IncompatibleTypeException$meta$model("Member " + name$2 + " is not a class or interface");
    }
    if (ict.a)rv.$targs=ict.a;
    rv.$parent=this;
    return rv;
  }
  return null;
};ClassOrInterface$meta$model.$$.prototype.getClassOrInterface.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Member$meta$model,a:{Type$Member:'Container$ClassOrInterface',Kind$Member:'Kind$ClassOrInterface'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Iterable:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container$ClassOrInterface:{},Kind$ClassOrInterface:{'satisfies':[{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:{t:Anything}}}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getClassOrInterface']};};
ClassOrInterface$meta$model.$$.prototype.getDeclaredClassOrInterface=function getDeclaredClassOrInterface(name$2,types$3,$$$mptypes){
  return this.getClassOrInterface(name$2,types$3,{Kind$getClassOrInterface:$$$mptypes.Kind$getDeclaredClassOrInterface,
    Arguments$getClassOrInterface:$$$mptypes.Arguments$getDeclaredClassOrInterface,
    Container$getClassOrInterface:$$$mptypes.Container$getDeclaredClassOrInterface},1);
};ClassOrInterface$meta$model.$$.prototype.getDeclaredClassOrInterface.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Member$meta$model,a:{Type$Member:'Container',Kind$Member:'Kind'}}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}},{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Iterable:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Kind:{'satisfies':[{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:{t:Anything}}}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredClassOrInterface']};};

ClassOrInterface$meta$model.$$.prototype.getClass=function getClass(name,types,$mptypes) {
  var rv=this.getClassOrInterface(name,types,{Container$getClassOrInterface:$mptypes.Container$getClass,
    Kind$getClassOrInterface:Class$meta$model});
  if (rv && !isOfType(rv, {t:AppliedMemberClass})) {
    throw IncompatibleTypeException$meta$model("Member " + name + " is not a class");
  }
  return rv;
};ClassOrInterface$meta$model.$$.prototype.getClass.$crtmm$=function(){return{mod:$CCMM$,$t:{t:MemberClass$meta$model},$ps:[],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{},Arguments:{satisfies:[{t:Sequential,a:{Element$Iterable:{t:Anything}}}]}},d:['ceylon.language.meta.model','ClassOrInterface','$m','getClass']};};
ClassOrInterface$meta$model.$$.prototype.getDeclaredClass=function getClass(name,types,$mptypes) {
  var rv=this.getDeclaredClassOrInterface(name,types,{Container$getDeclaredClassOrInterface:$mptypes.Container$getClass,
    Kind$getDeclaredClassOrInterface:Class$meta$model});
  if (rv && !isOfType(rv, {t:AppliedMemberClass})) {
    throw IncompatibleTypeException$meta$model("Member " + name + " is not a class");
  }
  return rv;
};ClassOrInterface$meta$model.$$.prototype.getDeclaredClass.$crtmm$=function(){return{mod:$CCMM$,$t:{t:MemberClass$meta$model},$ps:[],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{},Arguments:{satisfies:[{t:Sequential,a:{Element$Iterable:{t:Anything}}}]}},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredClass']};};
ClassOrInterface$meta$model.$$.prototype.getInterface=function(name,types,$mptypes) {
  var rv=this.getClassOrInterface(name,types,{Container$getClassOrInterface:$mptypes.Container$getInterface,
    Kind$getClassOrInterface:Interface$meta$model});
  if (rv && !isOfType(rv, {t:AppliedMemberInterface})) {
    throw IncompatibleTypeException$meta$model("Member " + name + " is not an interface");
  }
  return rv;
};ClassOrInterface$meta$model.$$.prototype.getInterface.$crtmm$=function(){return{mod:$CCMM$,$t:{t:MemberInterface$meta$model},$ps:[],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{},Arguments:{satisfies:[{t:Sequential,a:{Element$Iterable:{t:Anything}}}]}},d:['ceylon.language.meta.model','ClassOrInterface','$m','getInterface']};};
ClassOrInterface$meta$model.$$.prototype.getDeclaredInterface=function(name,types,$mptypes) {
  var rv=this.getDeclaredClassOrInterface(name,types,{Container$getDeclaredClassOrInterface:$mptypes.Container$getDeclaredInterface,
    Kind$getDeclaredClassOrInterface:Interface$meta$model});
  if (rv && !isOfType(rv, {t:AppliedMemberInterface})) {
    throw IncompatibleTypeException$meta$model("Member " + name + " is not an interface");
  }
  return rv;
};ClassOrInterface$meta$model.$$.prototype.getDeclaredInterface.$crtmm$=function(){return{mod:$CCMM$,$t:{t:MemberInterface$meta$model},$ps:[],$cont:ClassOrInterface$meta$model,$tp:{Container:{},Type:{},Arguments:{satisfies:[{t:Sequential,a:{Element$Iterable:{t:Anything}}}]}},d:['ceylon.language.meta.model','ClassOrInterface','$m','getDeclaredInterface']};};


ClassOrInterface$meta$model.$$.prototype.typeOf=function typeOf(instance$8){
  var _t={t:this.tipo};
  if (this.$targs)_t.a=this.$targs;
  return isOfType(instance$8,_t);
};
ClassOrInterface$meta$model.$$.prototype.typeOf.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},$ps:[{$nm:'instance',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Type','$m','typeOf']};};
ClassOrInterface$meta$model.$$.prototype.supertypeOf=function supertypeOf(type$9){
  return extendsType({t:type$9.tipo}, {t:this.tipo});
};
ClassOrInterface$meta$model.$$.prototype.supertypeOf.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type:{t:Anything}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Type','$m','supertypeOf']};};
ClassOrInterface$meta$model.$$.prototype.exactly=function exactly(type$10){
  return type$10.tipo && this.tipo === type$10.tipo;
};
ClassOrInterface$meta$model.$$.prototype.exactly.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type:{t:Anything}}},$an:function(){return[];}}],$cont:ClassOrInterface$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Type','$m','exactly']};};
defineAttr(ClassOrInterface$meta$model.$$.prototype,'typeArguments',function(){
  var mm = getrtmm$$(this.tipo);
  if (mm) {
    if (mm.$tp) {
      var targs={};
      for (var tp in mm.$tp) {
        var param = OpenTypeParam(this.tipo,tp);
        var targ;
        if (this.$$targs$$ && this.$$targs$$.Type$ClassOrInterface && this.$$targs$$.Type$ClassOrInterface.a
            && this.$$targs$$.Type$ClassOrInterface.a[tp]) {
          var _targ=this.$$targs$$.Type$ClassOrInterface.a[tp];
          if (typeof(_targ)==='string') {
            console.log("TODO buscar " + tp + "->" + _targ + " para " + this.declaration.qualifiedName);
            _targ={t:Anything};
          }
          targ=typeLiteral$meta({Type$typeLiteral:_targ});
        } else {
          targ=typeLiteral$meta({Type$typeLiteral:{t:Anything}});
        }
        targs[param]=targ;
      }
      return Mapita(targs,{K$Mapita:{t:TypeParameter$meta$declaration},V$Mapita:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}});
    }
    return getEmpty();
  }
  throw Exception(String$("ClassOrInterface.typeArguments-we don't have a metamodel!"));
},undefined,function(){return{mod:$CCMM$,$t:{t:Map,a:{Key:{t:TypeParameter$meta$declaration},Item:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$cont:ClassOrInterface$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Generic','$at','typeArguments']};});
defineAttr(ClassOrInterface$meta$model.$$.prototype,'string',function(){
    var mm = getrtmm$$(this.tipo);
    var qn=$qname(mm);
    if (mm.$tp) {
      qn+="<";
      var first=true;
      for (var tp in mm.$tp) {
        var targ;
        if (this.$$targs$$ && this.$$targs$$.Type$ClassOrInterface && this.$$targs$$.Type$ClassOrInterface.a && this.$$targs$$.Type$ClassOrInterface.a[tp]) {
          var _targ=this.$$targs$$.Type$ClassOrInterface.a[tp];
          if (typeof(_targ)==='string') {
            console.log("TODO buscar " + tp + "->" + _targ + " para " + this.declaration.qualifiedName);
            _targ={t:Anything};
          }
          targ=typeLiteral$meta({Type$typeLiteral:_targ});
        } else {
          targ=typeLiteral$meta({Type$typeLiteral:{t:Anything}});
        }
        if (first)first=false; else qn+=",";
        if (targ.declaration) {
          qn+=targ.declaration.qualifiedName;
        } else {
          qn+=targ.string;
        }
      }
      qn+=">";
    }
    return String$(qn);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
defineAttr(ClassOrInterface$meta$model.$$.prototype,'hash',function(){
  var mm = getrtmm$$(this.tipo);
  var h=String$($qname(mm)).hash;
  if (mm.$tp) {
    for (var tp in mm.$tp) {
      var targ;
      if (this.$$targs$$ && this.$$targs$$.Type$ClassOrInterface && this.$$targs$$.Type$ClassOrInterface.a && this.$$targs$$.Type$ClassOrInterface.a[tp]) {
        var _targ=this.$$targs$$.Type$ClassOrInterface.a[tp];
        if (typeof(_targ)==='string') {
          console.log("TODO buscar " + tp + "->" + _targ + " para " + this.declaration.qualifiedName);
          _targ={t:Anything};
        }
        targ=typeLiteral$meta({Type$typeLiteral:_targ});
      } else {
        targ=typeLiteral$meta({Type$typeLiteral:{t:Anything}});
      }
      h+=targ.hash;
    }
  }
  if (this.$bound)h+=this.$bound.hash;
  return h;
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Object','$at','hash']};});
defineAttr(ClassOrInterface$meta$model.$$.prototype,'extendedType',function(){
  var sc = this.tipo.$crtmm$['super'];
  if (sc === undefined)return null;
  var mm = getrtmm$$(sc.t);
  var ac;
  if (mm.$cont) {
    ac=AppliedMemberClass(sc.t, {Type$MemberClass:sc,Arguments$MemberClass:{t:Sequential,a:{Element$Iterable:{t:Anything}}},Container$MemberClass:mm.$cont});
  } else {
    ac=AppliedClass(sc.t, {Type$Class:sc,Arguments$Class:{t:Sequential,a:{Element$Iterable:{t:Anything}}}});
  }
  if (sc.a)ac.$targs=sc.a;
  return ac;
},undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:ClassModel$meta$model,a:{Arguments:{t:Nothing},Type:{t:Anything}}}]},$cont:AppliedClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Class','$at','extendedType']};});

function ClassModel$meta$model($$targs$$,$$classModel){
    ClassOrInterface$meta$model({Type$ClassOrInterface:$$targs$$.Type$ClassModel},$$classModel);
    set_type_args($$classModel,$$targs$$);
}
ClassModel$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$ClassModel:{'var':'out','def':{t:Anything}},Arguments$ClassModel:{'var':'in','satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:'Type$ClassModel'}}],$an:function(){return[doc(String$("A class model represents the model of a Ceylon class that you can inspect.\n\nA class model can be either a toplevel [[Class]] or a member [[MemberClass]].\n",154)),shared()];},d:['ceylon.language.meta.model','ClassModel']};};
exports.ClassModel$meta$model=ClassModel$meta$model;
function $init$ClassModel$meta$model(){
    if(ClassModel$meta$model.$$===undefined){
        initTypeProtoI(ClassModel$meta$model,'ceylon.language.meta.model::ClassModel',$init$ClassOrInterface$meta$model());
        (function($$classModel){
            $$classModel.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:ClassDeclaration$meta$declaration},$cont:ClassModel$meta$model,$an:function(){return[shared(),formal(),actual()];},d:['ceylon.language.meta.model','ClassModel','$at','declaration']};}};
            $$classModel.$prop$getParameterTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$cont:ClassModel$meta$model,$an:function(){return[doc(String$("This function\'s parameter closed types",38)),shared(),formal()];},d:['ceylon.language.meta.model','ClassModel','$at','parameterTypes']};}};
        })(ClassModel$meta$model.$$.prototype);
    }
    return ClassModel$meta$model;
}
exports.$init$ClassModel$meta$model=$init$ClassModel$meta$model;
$init$ClassModel$meta$model();
//Addendum to ClassModel
defineAttr(ClassModel$meta$model.$$.prototype,'parameterTypes',function(){
  var ps=this.tipo.$crtmm$.$ps;
  if (!ps || ps.length==0)return getEmpty();
  var r=[];
  for (var i=0; i < ps.length; i++) {
    var pt=ps[i].$t;
    if (typeof(pt)==='string'){
      if (!this.$targs)throw TypeApplicationException$meta$model(String$("This class model needs type parameters"));
      pt=this.$targs[pt];
      if (!pt)throw TypeApplicationException$meta$model(String$("Class model is missing type argument for <" + ps[i].$t + ">"));
    }
    r.push(typeLiteral$meta({Type$typeLiteral:pt}));
  }
  return ArraySequence(r,{Element$Iterable:{t:Type$meta$model,a:{t:Anything}}});
},undefined,function(){return{mod:$CCMM$,$cont:ClassModel$meta$model,d:['ceylon.language.meta.model','ClassModel','$at','parameterTypes'],$t:{t:Sequential,a:{ElementSequential:{t:Type$meta$model,a:{Type:{t:Anything}}},Absent:{t:Null}}}};});

defineAttr(ClassModel$meta$model.$$.prototype,'declaration',function(){
  var $$clase=this;
  if ($$clase._decl)return $$clase._decl;
  var mm = getrtmm$$($$clase.tipo);
  $$clase._decl = OpenClass(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), $$clase.tipo);
  return $$clase._decl;
},undefined,function(){return{mod:$CCMM$,$t:{t:ClassDeclaration$meta$declaration},$cont:ClassModel$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','ClassModel','$at','declaration']};});
ClassModel$meta$model.$$.prototype.equals=function(o){
return isOfType(o,{t:AppliedClass}) && o.tipo===this.tipo && this.typeArguments.equals(o.typeArguments);
};
ClassModel$meta$model.$$.prototype.equals.$crtmm$=function(){return{
  mod:$CCMM$,d:['ceylon.language','Object','$m','equals'],$t:{t:Boolean$},$ps:[{$nm:'other',$t:{t:Object$},$mt:'prm'}]
}};
function Class$meta$model($$targs$$,$$class){
    ClassModel$meta$model({Type$ClassModel:$$targs$$.Type$Class,Arguments$ClassModel:$$targs$$.Arguments$Class},$$class);
    Callable({Return$Callable:$$targs$$.Type$Class,Arguments$Callable:$$targs$$.Arguments$Class},$$class);
    set_type_args($$class,$$targs$$);
}
Class$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$Class:{'var':'out','def':{t:Anything}},Arguments$Class:{'var':'in','satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:ClassModel$meta$model,a:{Type$ClassModel:'Type$Class',Arguments$ClassModel:'Arguments$Class'}},{t:Callable,a:{Return$Callable:'Type$Class',Arguments$Callable:'Arguments$Class'}}],$an:function(){return[doc(String$("A class model represents the model of a Ceylon class that you can instantiate and inspect.\n\nA class is a toplevel type, declared on a package.\n\nThis is a [[ClassModel]] that you can also invoke to instantiate new instances of the class:\n\n    shared class Foo(String name){\n        shared String hello => \"Hello \"+name;\n    }\n    \n    void test(){\n        Class<Foo,[String]> c = `Foo`;\n        // This will print: Hello Stef\n        print(c(\"Stef\").hello);\n    }\n",463)),shared()];},d:['ceylon.language.meta.model','Class']};};
exports.Class$meta$model=Class$meta$model;
function $init$Class$meta$model(){
    if(Class$meta$model.$$===undefined){
        initTypeProtoI(Class$meta$model,'ceylon.language.meta.model::Class',$init$ClassModel$meta$model(),$init$Callable());
        (function($$class){
            $$class.$apply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Type$Class',$ps:[{$nm:'arguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Anything}}},$an:function(){return[];}}],$cont:Class$meta$model,$an:function(){return[doc("Type-unsafe initialiser application, to be used when the argument types are unknown until runtime.\n\nThis has the same behaviour as invoking this `Class` directly, but exchanges compile-time type\nsafety with runtime checks."),$throws("IncompatibleTypeException","If any argument is not assignable to this initialiser\'s corresponding parameter"),$throws("InvocationException","If there are not enough or too many provided arguments"),shared(),formal()];},d:['ceylon.language.meta.model','Class','$m','apply']};}};
        })(Class$meta$model.$$.prototype);
    }
    return Class$meta$model;
}
exports.$init$Class$meta$model=$init$Class$meta$model;
$init$Class$meta$model();
function FunctionModel$meta$model($$targs$$,$$functionModel){
    Model$meta$model($$functionModel);
    Generic$meta$model($$functionModel);
    set_type_args($$functionModel,$$targs$$);
}
FunctionModel$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$FunctionModel:{'var':'out','def':{t:Anything}},Arguments$FunctionModel:{'var':'in','satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:Model$meta$model},{t:Generic$meta$model}],$an:function(){return[doc(String$("A function model represents the model of a Ceylon function that you can inspect.\n\nA function model can be either a toplevel [[Function]] or a member [[Method]].\n",161)),shared()];},d:['ceylon.language.meta.model','FunctionModel']};};
exports.FunctionModel$meta$model=FunctionModel$meta$model;
function $init$FunctionModel$meta$model(){
    if(FunctionModel$meta$model.$$===undefined){
        initTypeProtoI(FunctionModel$meta$model,'ceylon.language.meta.model::FunctionModel',$init$Model$meta$model(),$init$Generic$meta$model());
        (function($$functionModel){
            $$functionModel.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:FunctionDeclaration$meta$declaration},$cont:FunctionModel$meta$model,$an:function(){return[doc(String$("This function\'s declaration.",28)),shared(),formal(),actual()];},d:['ceylon.language.meta.model','FunctionModel','$at','declaration']};}};
            $$functionModel.$prop$getType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Type$meta$model,a:{Type$Type:'Type$FunctionModel'}},$cont:FunctionModel$meta$model,$an:function(){return[doc(String$("This function\'s return closed type.",35)),shared(),formal()];},d:['ceylon.language.meta.model','FunctionModel','$at','type']};}};
            $$functionModel.$prop$getParameterTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$cont:FunctionModel$meta$model,$an:function(){return[doc(String$("This function\'s parameter closed types",38)),shared(),formal()];},d:['ceylon.language.meta.model','FunctionModel','$at','parameterTypes']};}};
        })(FunctionModel$meta$model.$$.prototype);
    }
    return FunctionModel$meta$model;
}
exports.$init$FunctionModel$meta$model=$init$FunctionModel$meta$model;
$init$FunctionModel$meta$model();
defineAttr(FunctionModel$meta$model.$$.prototype,'parameterTypes',function(){
  var ps=this.tipo.$crtmm$.$ps;
  if (!ps || ps.length==0)return getEmpty();
  var r=[];
  for (var i=0; i < ps.length; i++) {
    var pt=ps[i].$t;
    if (typeof(pt)==='string'){
      if (!this.$targs)throw TypeApplicationException$meta$model(String$("This function model needs type parameters"));
      pt=this.$targs[pt];
      if (!pt)throw TypeApplicationException$meta$model(String$("Function model is missing type argument for <" + ps[i].$t + ">"));
    }
    r.push(typeLiteral$meta({Type$typeLiteral:pt}));
  }
  return ArraySequence(r,{Element$Iterable:{t:Type$meta$model,a:{t:Anything}}});
},undefined,function(){return{mod:$CCMM$,$cont:FunctionModel$meta$model,d:['ceylon.language.meta.model','FunctionModel','$at','parameterTypes'],$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type:{t:Anything}}},Absent:{t:Null}}}};});
defineAttr(FunctionModel$meta$model.$$.prototype,'typeArguments',function(){
  var mm = this.tipo.$crtmm$;
  if (mm) {
    if (mm.$tp) {
      if (this.$targs===undefined)throw TypeApplicationException$meta$model("Missing type arguments for "+this.string);
      var targs={};
      for (var tp in mm.$tp) {
        var param = OpenTypeParam(this.tipo,tp);
        var targ = this.$targs[tp];
        if (targ) {
          targ=typeLiteral$meta({Type$typeLiteral:targ});
        } else {
          targ=typeLiteral$meta({Type$typeLiteral:{t:Anything}});
        }
        targs[param]=targ;
      }
      return Mapita(targs,{K$Mapita:{t:TypeParameter$meta$declaration},V$Mapita:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}});
    }
    return getEmpty();
  }
  throw Exception(String$("FunctionModel.typeArguments-we don't have a metamodel!"));
},undefined,function(){return{mod:$CCMM$,$t:{t:Map,a:{Key:{t:TypeParameter$meta$declaration},Item:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$cont:FunctionModel$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Generic','$at','typeArguments']};});
defineAttr(FunctionModel$meta$model.$$.prototype,'string',function(){
  var mm=this.tipo.$crtmm$;
  var qn;
  if (mm.$cont) {
    qn=$qname(mm.$cont);
    if (mm.$cont.$crtmm$.$tp) {
      var cnt=this.$$targs$$&&this.$$targs$$.Container$Function&&this.$$targs$$.Container$Function.a;
      if (!cnt)cnt=this.$$targs$$&&this.$$targs$$.Container$Method&&this.$$targs$$.Container$Method.a;
      qn+="<";var first=true;
      for (var tp in mm.$cont.$crtmm$.$tp) {
        if (first)first=false;else qn+=",";
        var _ta=cnt&&cnt[tp];
        qn+=$qname(_ta||Anything);
      }
      qn+=">";
    }
    qn+="."+mm.d[mm.d.length-1];
  } else {
    qn=$qname(mm);
  }
  if (mm.$tp) {
    qn+="<";
    var first=true;
    for (var tp in mm.$tp) {
      if (first)first=false; else qn+=",";
      var targ=this.$targs[tp];
      if (targ.t) {
        var _m=getrtmm$$(targ.t);
        qn+=$qname(_m);
      } else {
        qn+=tp;
      }
    }
    qn+=">";
  }
  return String$(qn);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string'],$cont:FunctionModel$meta$model};});
function Function$meta$model($$targs$$,$$function){
    FunctionModel$meta$model({Type$FunctionModel:$$targs$$.Type$Function,Arguments$FunctionModel:$$targs$$.Arguments$Function},$$function);
    Callable({Return$Callable:$$targs$$.Type$Function,Arguments$Callable:$$targs$$.Arguments$Function},$$function);
    set_type_args($$function,$$targs$$);
}
Function$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$Function:{'var':'out','def':{t:Anything}},Arguments$Function:{'var':'in','satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:FunctionModel$meta$model,a:{Type$FunctionModel:'Type$Function',Arguments$FunctionModel:'Arguments$Function'}},{t:Callable,a:{Return$Callable:'Type$Function',Arguments$Callable:'Arguments$Function'}}],$an:function(){return[doc(String$("A function model represents the model of a Ceylon function that you can invoke and inspect.\n\nA function is a toplevel binding, declared on a package.\n\nThis is a [[FunctionModel]] that you can also invoke:\n\n    shared String foo(String name) => \"Hello \"+name;\n    \n    void test(){\n        Function<String,[String]> f = `foo`;\n        // This will print: Hello Stef\n        print(f(\"Stef\"));\n    }\n",397)),shared()];},d:['ceylon.language.meta.model','Function']};};
exports.Function$meta$model=Function$meta$model;
function $init$Function$meta$model(){
    if(Function$meta$model.$$===undefined){
        initTypeProtoI(Function$meta$model,'ceylon.language.meta.model::Function',$init$FunctionModel$meta$model(),$init$Callable());
        (function($$function){
            $$function.$apply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Type$Function',$ps:[{$nm:'arguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Anything}}},$an:function(){return[];}}],$cont:Function$meta$model,$an:function(){return[doc("Type-unsafe function application, to be used when the argument types are unknown until runtime.\n\nThis has the same behaviour as invoking this `Function` directly, but exchanges compile-time type\nsafety with runtime checks."),$throws("IncompatibleTypeException","If any argument is not assignable to this function\'s corresponding parameter"),$throws("InvocationException","If there are not enough or too many provided arguments"),shared(),formal()];},d:['ceylon.language.meta.model','Function','$m','apply']};}};
        })(Function$meta$model.$$.prototype);
    }
    return Function$meta$model;
}
exports.$init$Function$meta$model=$init$Function$meta$model;
$init$Function$meta$model();
function Method$meta$model($$targs$$,$$method){
    FunctionModel$meta$model({Type$FunctionModel:$$targs$$.Type$Method,Arguments$FunctionModel:$$targs$$.Arguments$Method},$$method);
    Member$meta$model({Container$Member:$$targs$$.Container$Method,Kind$Member:{t:Function$meta$model,a:{Type$Function:$$targs$$.Type$Method,Arguments$Function:$$targs$$.Arguments$Method}}},$$method);
    add_type_arg($$method,'Kind$Member',{t:Function$meta$model,a:{Type$Function:$$method.$$targs$$.Type$Method,Arguments$Function:$$method.$$targs$$.Arguments$Method}});
    set_type_args($$method,$$targs$$);
}
Method$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Container$Method:{'var':'in'},Type$Method:{'var':'out','def':{t:Anything}},Arguments$Method:{'var':'in','satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:FunctionModel$meta$model,a:{Type$FunctionModel:'Type$Method',Arguments$FunctionModel:'Arguments$Method'}},{t:Member$meta$model,a:{Container$Member:'Container$Method',Kind$Member:{t:Function$meta$model,a:{Type$Function:'Type$Method',Arguments$Function:'Arguments$Method'}}}}],$an:function(){return[doc(String$("A function model represents the model of a Ceylon function that you can invoke and inspect.\n\nA method is a member function: it is declared on classes or interfaces.\n\nThis is both a [[FunctionModel]] and a [[Member]]: you can invoke it with an instance value\nto bind it to that instance and obtain a [[Function]]:\n\n    class Outer(){\n        shared String foo(String name) => \"Hello \"+name;\n    }\n    \n    void test(){\n        Method<Outer,String,[String]> method = `Outer.foo`;\n        // Bind it to an instance value\n        Function<String,[String]> f = method(Outer());\n        // This will print: Hello Stef\n        print(f(\"Stef\"));\n    }\n",644)),shared()];},d:['ceylon.language.meta.model','Method']};};
exports.Method$meta$model=Method$meta$model;
function $init$Method$meta$model(){
    if(Method$meta$model.$$===undefined){
        initTypeProtoI(Method$meta$model,'ceylon.language.meta.model::Method',$init$FunctionModel$meta$model(),$init$Member$meta$model());
        (function($$method){
            $$method.$bind={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Function$meta$model,a:{Type$Function:'Type$Method',Arguments$Function:'Arguments$Method'}},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Method$meta$model,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language.meta.model','Method','$m','bind']};}};
        })(Method$meta$model.$$.prototype);
    }
    return Method$meta$model;
}
exports.$init$Method$meta$model=$init$Method$meta$model;
$init$Method$meta$model();
function InterfaceModel$meta$model($$targs$$,$$interfaceModel){
    ClassOrInterface$meta$model({Type$ClassOrInterface:$$targs$$.Type$InterfaceModel},$$interfaceModel);
    set_type_args($$interfaceModel,$$targs$$);
}
InterfaceModel$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$InterfaceModel:{'var':'out','def':{t:Anything}}},satisfies:[{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:'Type$InterfaceModel'}}],$an:function(){return[doc(String$("An interface model represents the model of a Ceylon interface that you can inspect.\n\nAn interface model can be either a toplevel [[Interface]] or a member [[MemberInterface]].\n",176)),shared()];},d:['ceylon.language.meta.model','InterfaceModel']};};
exports.InterfaceModel$meta$model=InterfaceModel$meta$model;
function $init$InterfaceModel$meta$model(){
    if(InterfaceModel$meta$model.$$===undefined){
        initTypeProtoI(InterfaceModel$meta$model,'ceylon.language.meta.model::InterfaceModel',$init$ClassOrInterface$meta$model());
        (function($$interfaceModel){
            $$interfaceModel.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:InterfaceDeclaration$meta$declaration},$cont:InterfaceModel$meta$model,$an:function(){return[shared(),formal(),actual()];},d:['ceylon.language.meta.model','InterfaceModel','$at','declaration']};}};
        })(InterfaceModel$meta$model.$$.prototype);
    }
    return InterfaceModel$meta$model;
}
exports.$init$InterfaceModel$meta$model=$init$InterfaceModel$meta$model;
$init$InterfaceModel$meta$model();
defineAttr(InterfaceModel$meta$model.$$.prototype,'declaration',function(){
if (this._decl)return this._decl;
var mm = getrtmm$$(this.tipo);
this._decl = OpenInterface(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), this.tipo);
return this._decl;
},undefined,function(){return{mod:$CCMM$,$t:{t:InterfaceDeclaration$meta$declaration},$cont:InterfaceModel$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','InterfaceModel','$at','declaration']};});

InterfaceModel$meta$model.$$.prototype.equals=function(o){
return isOfType(o,{t:AppliedInterface}) && (o.tipo$2||o.tipo)==this.tipo && this.typeArguments.equals(o.typeArguments);
};
InterfaceModel$meta$model.$$.prototype.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Object','$m','equals'],$ps:[{$nm:'other',$t:{t:Object$}}],$cont:InterfaceModel$meta$model};}
function Interface$meta$model($$targs$$,$$interface){
    InterfaceModel$meta$model({Type$InterfaceModel:$$targs$$.Type$Interface},$$interface);
    set_type_args($$interface,$$targs$$);
}
Interface$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$Interface:{'var':'out','def':{t:Anything}}},satisfies:[{t:InterfaceModel$meta$model,a:{Type$InterfaceModel:'Type$Interface'}}],$an:function(){return[doc(String$("An interface model that you can inspect.",40)),shared()];},d:['ceylon.language.meta.model','Interface']};};
exports.Interface$meta$model=Interface$meta$model;
function $init$Interface$meta$model(){
    if(Interface$meta$model.$$===undefined){
        initTypeProtoI(Interface$meta$model,'ceylon.language.meta.model::Interface',$init$InterfaceModel$meta$model());
    }
    return Interface$meta$model;
}
exports.$init$Interface$meta$model=$init$Interface$meta$model;
$init$Interface$meta$model();
function IntersectionType$meta$model($$targs$$,$$intersectionType){
    Type$meta$model({Type$Type:$$targs$$.Intersection$IntersectionType},$$intersectionType);
    set_type_args($$intersectionType,$$targs$$);
}
IntersectionType$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Intersection$IntersectionType:{'var':'out','def':{t:Anything}}},satisfies:[{t:Type$meta$model,a:{Type$Type:'Intersection$IntersectionType'}}],$an:function(){return[doc(String$("A closed intersection type.",27)),shared()];},d:['ceylon.language.meta.model','IntersectionType']};};
exports.IntersectionType$meta$model=IntersectionType$meta$model;
function $init$IntersectionType$meta$model(){
    if(IntersectionType$meta$model.$$===undefined){
        initTypeProtoI(IntersectionType$meta$model,'ceylon.language.meta.model::IntersectionType',$init$Type$meta$model());
        (function($$intersectionType){
            $$intersectionType.$prop$getSatisfiedTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$cont:IntersectionType$meta$model,$an:function(){return[doc(String$("The list of closed satisfied types of this intersection.",56)),shared(),formal()];},d:['ceylon.language.meta.model','IntersectionType','$at','satisfiedTypes']};}};
        })(IntersectionType$meta$model.$$.prototype);
    }
    return IntersectionType$meta$model;
}
exports.$init$IntersectionType$meta$model=$init$IntersectionType$meta$model;
$init$IntersectionType$meta$model();
function Member$meta$model($$targs$$,$$member){
    Callable({Return$Callable:$$targs$$.Kind$Member,Arguments$Callable:{t:'T', l:[$$targs$$.Container$Member]}},$$member);
    add_type_arg($$member,'Arguments$Callable',{t:'T', l:[$$member.$$targs$$.Container$Member]});
    set_type_args($$member,$$targs$$);
}
Member$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Container$Member:{'var':'in'},Kind$Member:{'var':'out','satisfies':[{t:Model$meta$model}]}},satisfies:[{t:Callable,a:{Return$Callable:'Kind$Member',Arguments$Callable:{t:'T',l:[{$t:'Container$Member'}]}}}],$an:function(){return[doc(String$("Model for members that can be bound to a containing instance to turn them into toplevel models.\n\nYou can bind a member to an instance by invoking that member with the instance as parameter:\n\n    shared class Outer(String name){\n        shared class Inner(){\n            shared String hello => \"Hello \"+name;\n        }\n    }\n    \n    void test(){\n        Member<Outer,Class<Outer.Inner,[]>> memberClass = `Outer.Inner`;\n        Class<Outer.Inner,[]> c = memberClass(Outer(\"Stef\"));\n        // This will print: Hello Stef\n        print(c().hello);\n    }\n",552)),shared()];},d:['ceylon.language.meta.model','Member']};};
exports.Member$meta$model=Member$meta$model;
function $init$Member$meta$model(){
    if(Member$meta$model.$$===undefined){
        initTypeProtoI(Member$meta$model,'ceylon.language.meta.model::Member',$init$Callable());
        (function($$member){
            $$member.$prop$getDeclaringType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$cont:Member$meta$model,$an:function(){return[doc(String$("The declaring closed type. This is the type that declared this member.",70)),shared(),formal()];},d:['ceylon.language.meta.model','Member','$at','declaringType']};}};
            $$member.$bind={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Model$meta$model},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Member$meta$model,$an:function(){return[doc("Type-unsafe container binding, to be used when the container type is unknown until runtime.\n\nThis has the same behaviour as invoking this `Member` directly, but exchanges compile-time type\nsafety with runtime checks."),$throws("IncompatibleTypeException","If the container is not assignable to this member\'s container"),shared(),formal()];},d:['ceylon.language.meta.model','Member','$m','bind']};}};
        })(Member$meta$model.$$.prototype);
    }
    return Member$meta$model;
}
exports.$init$Member$meta$model=$init$Member$meta$model;
$init$Member$meta$model();
defineAttr(Member$meta$model.$$.prototype,'declaringType',function(){
  var $$member=this;
  var mm = getrtmm$$($$member.tipo);
  var m2 = get_model(mm);
  return (m2['$mt']==='cls'?OpenClass:OpenInterface)(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), $$member.tipo);
},undefined,function(){return{mod:$CCMM$,$t:{t:Member$meta$model,a:{Type:{t:Anything}}},$cont:Member$meta$model,$an:function(){return[shared(),formal()];},d:['ceylon.language.meta.model','Member','$at','declaringType']};});

defineAttr(Member$meta$model.$$.prototype,'container',function(){
    return this.declaringClassOrInterface;
},undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Type$meta$model,a:{Type:{t:Anything}}}]},$cont:Member$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Member','$at','container']};});
function MemberClass$meta$model($$targs$$,$$memberClass){
    ClassModel$meta$model({Type$ClassModel:$$targs$$.Type$MemberClass,Arguments$ClassModel:$$targs$$.Arguments$MemberClass},$$memberClass);
    Member$meta$model({Container$Member:$$targs$$.Container$MemberClass,Kind$Member:{t:Class$meta$model,a:{Type$Class:$$targs$$.Type$MemberClass,Arguments$Class:$$targs$$.Arguments$MemberClass}}},$$memberClass);
    add_type_arg($$memberClass,'Kind$Member',{t:Class$meta$model,a:{Type$Class:$$memberClass.$$targs$$.Type$MemberClass,Arguments$Class:$$memberClass.$$targs$$.Arguments$MemberClass}});
    set_type_args($$memberClass,$$targs$$);
}
MemberClass$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Container$MemberClass:{'var':'in'},Type$MemberClass:{'var':'out','def':{t:Anything}},Arguments$MemberClass:{'var':'in','satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:ClassModel$meta$model,a:{Type$ClassModel:'Type$MemberClass',Arguments$ClassModel:'Arguments$MemberClass'}},{t:Member$meta$model,a:{Container$Member:'Container$MemberClass',Kind$Member:{t:Class$meta$model,a:{Type$Class:'Type$MemberClass',Arguments$Class:'Arguments$MemberClass'}}}}],$an:function(){return[doc(String$("A class model represents the model of a Ceylon class that you can instantiate and inspect.\n\nA member class is is declared on classes or interfaces.\n\nThis is both a [[ClassModel]] and a [[Member]]: you can invoke it with an instance value\nto bind it to that instance and obtain a [[Class]]:\n\n    shared class Outer(String name){\n        shared class Inner(){\n            shared String hello => \"Hello \"+name;\n        }\n    }\n    \n    void test(){\n        MemberClass<Outer,Outer.Inner,[]> memberClass = `Outer.Inner`;\n        Class<Outer.Inner,[]> c = memberClass(Outer(\"Stef\"));\n        // This will print: Hello Stef\n        print(c().hello);\n    }\n",650)),shared()];},d:['ceylon.language.meta.model','MemberClass']};};
exports.MemberClass$meta$model=MemberClass$meta$model;
function $init$MemberClass$meta$model(){
    if(MemberClass$meta$model.$$===undefined){
        initTypeProtoI(MemberClass$meta$model,'ceylon.language.meta.model::MemberClass',$init$ClassModel$meta$model(),$init$Member$meta$model());
        (function($$memberClass){
            $$memberClass.$bind={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Class$meta$model,a:{Type$Class:'Type$MemberClass',Arguments$Class:'Arguments$MemberClass'}},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:MemberClass$meta$model,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language.meta.model','MemberClass','$m','bind']};}};
        })(MemberClass$meta$model.$$.prototype);
    }
    return MemberClass$meta$model;
}
exports.$init$MemberClass$meta$model=$init$MemberClass$meta$model;
$init$MemberClass$meta$model();
function MemberInterface$meta$model($$targs$$,$$memberInterface){
    InterfaceModel$meta$model({Type$InterfaceModel:$$targs$$.Type$MemberInterface},$$memberInterface);
    Member$meta$model({Container$Member:$$targs$$.Container$MemberInterface,Kind$Member:{t:Interface$meta$model,a:{Type$Interface:$$targs$$.Type$MemberInterface}}},$$memberInterface);
    add_type_arg($$memberInterface,'Kind$Member',{t:Interface$meta$model,a:{Type$Interface:$$memberInterface.$$targs$$.Type$MemberInterface}});
    set_type_args($$memberInterface,$$targs$$);
}
MemberInterface$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Container$MemberInterface:{'var':'in'},Type$MemberInterface:{'var':'out','def':{t:Anything}}},satisfies:[{t:InterfaceModel$meta$model,a:{Type$InterfaceModel:'Type$MemberInterface'}},{t:Member$meta$model,a:{Container$Member:'Container$MemberInterface',Kind$Member:{t:Interface$meta$model,a:{Type$Interface:'Type$MemberInterface'}}}}],$an:function(){return[doc(String$("A member interface model that you can inspect.",46)),shared()];},d:['ceylon.language.meta.model','MemberInterface']};};
exports.MemberInterface$meta$model=MemberInterface$meta$model;
function $init$MemberInterface$meta$model(){
    if(MemberInterface$meta$model.$$===undefined){
        initTypeProtoI(MemberInterface$meta$model,'ceylon.language.meta.model::MemberInterface',$init$InterfaceModel$meta$model(),$init$Member$meta$model());
        (function($$memberInterface){
            $$memberInterface.$bind={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Interface$meta$model,a:{Type$Interface:'Type$MemberInterface'}},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:MemberInterface$meta$model,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language.meta.model','MemberInterface','$m','bind']};}};
        })(MemberInterface$meta$model.$$.prototype);
    }
    return MemberInterface$meta$model;
}
exports.$init$MemberInterface$meta$model=$init$MemberInterface$meta$model;
$init$MemberInterface$meta$model();
function Attribute$meta$model($$targs$$,$$attribute){
    ValueModel$meta$model({Set$ValueModel:$$targs$$.Set$Attribute,Get$ValueModel:$$targs$$.Get$Attribute},$$attribute);
    Member$meta$model({Container$Member:$$targs$$.Container$Attribute,Kind$Member:{t:Value$meta$model,a:{Set$Value:$$targs$$.Set$Attribute,Get$Value:$$targs$$.Get$Attribute}}},$$attribute);
    add_type_arg($$attribute,'Kind$Member',{t:Value$meta$model,a:{Set$Value:$$attribute.$$targs$$.Set$Attribute,Get$Value:$$attribute.$$targs$$.Get$Attribute}});
    set_type_args($$attribute,$$targs$$);
}
Attribute$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Container$Attribute:{'var':'in'},Get$Attribute:{'var':'out','def':{t:Anything}},Set$Attribute:{'var':'in','def':{t:Nothing}}},satisfies:[{t:ValueModel$meta$model,a:{Set$ValueModel:'Set$Attribute',Get$ValueModel:'Get$Attribute'}},{t:Member$meta$model,a:{Container$Member:'Container$Attribute',Kind$Member:{t:Value$meta$model,a:{Set$Value:'Set$Attribute',Get$Value:'Get$Attribute'}}}}],$an:function(){return[doc(String$("An attribute model represents the model of a Ceylon attribute that you can read and inspect.\n\nAn attribute is a member value: it is declared on classes or interfaces.\n\nThis is both a [[ValueModel]] and a [[Member]]: you can invoke it with an instance value\nto bind it to that instance and obtain a [[Value]]:\n\n    class Outer(){\n        shared String foo = \"Hello\";\n    }\n    \n    void test(){\n        Attribute<Outer,String> attribute = `Outer.foo`;\n        Value<String> boundAttribute = attribute(Outer());\n        // This will print: Hello\n        print(boundAttribute.get());\n    }\n",587)),shared()];},d:['ceylon.language.meta.model','Attribute']};};
exports.Attribute$meta$model=Attribute$meta$model;
function $init$Attribute$meta$model(){
    if(Attribute$meta$model.$$===undefined){
        initTypeProtoI(Attribute$meta$model,'ceylon.language.meta.model::Attribute',$init$ValueModel$meta$model(),$init$Member$meta$model());
        (function($$attribute){
            $$attribute.$bind={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Value$meta$model,a:{Set$Value:'Set$Attribute',Get$Value:'Get$Attribute'}},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:Attribute$meta$model,$an:function(){return[shared(),actual(),formal()];},d:['ceylon.language.meta.model','Attribute','$m','bind']};}};
        })(Attribute$meta$model.$$.prototype);
    }
    return Attribute$meta$model;
}
exports.$init$Attribute$meta$model=$init$Attribute$meta$model;
$init$Attribute$meta$model();
function Model$meta$model($$model){
}
Model$meta$model.$crtmm$=function(){return{mod:$CCMM$,of:[{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:{t:Anything}}},{t:FunctionModel$meta$model,a:{Type$FunctionModel:{t:Anything},Arguments$FunctionModel:{t:Nothing}}},{t:ValueModel$meta$model,a:{Set$ValueModel:{t:Nothing},Get$ValueModel:{t:Anything}}}],$an:function(){return[doc(String$("The root of all models. There are several types of models:\n\n- [[ClassOrInterface]]\n- [[FunctionModel]]\n- [[ValueModel]]\n",120)),shared()];},d:['ceylon.language.meta.model','Model']};};
exports.Model$meta$model=Model$meta$model;
function $init$Model$meta$model(){
    if(Model$meta$model.$$===undefined){
        initTypeProtoI(Model$meta$model,'ceylon.language.meta.model::Model');
        (function($$model){
            $$model.$prop$getContainer={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Type$meta$model,a:{Type$Type:{t:Anything}}}]},$cont:Model$meta$model,$an:function(){return[doc(String$("The container type of this model, or `null` if this is a toplevel model.",72)),shared(),formal()];},d:['ceylon.language.meta.model','Model','$at','container']};}};
            $$model.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:NestableDeclaration$meta$declaration},$cont:Model$meta$model,$an:function(){return[doc(String$("The declaration for this model.",31)),shared(),formal()];},d:['ceylon.language.meta.model','Model','$at','declaration']};}};
        })(Model$meta$model.$$.prototype);
    }
    return Model$meta$model;
}
exports.$init$Model$meta$model=$init$Model$meta$model;
$init$Model$meta$model();
function Type$meta$model($$targs$$,$$type){
    set_type_args($$type,$$targs$$);
}
Type$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Type$Type:{'var':'out','def':{t:Anything}}},$an:function(){return[doc(String$("A closed type.\n\nA closed type is a type which is fully resolved and bound and contains no open type variables.\nAll instance types are closed at runtime.\n\nYou have only four sorts of types:\n\n- [[ClassOrInterface]]\n- [[UnionType]]\n- [[IntersectionType]]\n- [[nothingType]]",269)),shared()];},d:['ceylon.language.meta.model','Type']};};
exports.Type$meta$model=Type$meta$model;
function $init$Type$meta$model(){
    if(Type$meta$model.$$===undefined){
        initTypeProtoI(Type$meta$model,'ceylon.language.meta.model::Type');
        (function($$type){
            $$type.typeOf={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'instance',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:Type$meta$model,$an:function(){return[doc("True if the given instance is of this type, or is of a subtype of this type."),shared(),formal()];},d:['ceylon.language.meta.model','Type','$m','typeOf']};}};$$type.supertypeOf={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$an:function(){return[];}}],$cont:Type$meta$model,$an:function(){return[doc("True if the given type is a supertype of this type."),shared(),formal()];},d:['ceylon.language.meta.model','Type','$m','supertypeOf']};}};$$type.subtypeOf=function (type$968){
                var $$type=this;
                return type$968.supertypeOf($$type);
            };
            $$type.subtypeOf.$crtmm$=function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$an:function(){return[];}}],$cont:Type$meta$model,$an:function(){return[doc(String$("True if the given type is a subtype of this type.",49)),shared(),$default()];},d:['ceylon.language.meta.model','Type','$m','subtypeOf']};};
            $$type.exactly={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$an:function(){return[];}}],$cont:Type$meta$model,$an:function(){return[doc("True if the given type is a exactly this type."),shared(),formal()];},d:['ceylon.language.meta.model','Type','$m','exactly']};}};
        })(Type$meta$model.$$.prototype);
    }
    return Type$meta$model;
}
exports.$init$Type$meta$model=$init$Type$meta$model;
$init$Type$meta$model();
function UnionType$meta$model($$targs$$,$$unionType){
    Type$meta$model({Type$Type:$$targs$$.Union$UnionType},$$unionType);
    set_type_args($$unionType,$$targs$$);
}
UnionType$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Union$UnionType:{'var':'out','def':{t:Anything}}},satisfies:[{t:Type$meta$model,a:{Type$Type:'Union$UnionType'}}],$an:function(){return[doc(String$("A closed union type.",20)),shared()];},d:['ceylon.language.meta.model','UnionType']};};
exports.UnionType$meta$model=UnionType$meta$model;
function $init$UnionType$meta$model(){
    if(UnionType$meta$model.$$===undefined){
        initTypeProtoI(UnionType$meta$model,'ceylon.language.meta.model::UnionType',$init$Type$meta$model());
        (function($$unionType){
            $$unionType.$prop$getCaseTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:Type$meta$model,a:{Type$Type:'Union$UnionType'}}}},$cont:UnionType$meta$model,$an:function(){return[doc(String$("The list of closed case types of this union.",44)),shared(),formal()];},d:['ceylon.language.meta.model','UnionType','$at','caseTypes']};}};
        })(UnionType$meta$model.$$.prototype);
    }
    return UnionType$meta$model;
}
exports.$init$UnionType$meta$model=$init$UnionType$meta$model;
$init$UnionType$meta$model();
function Value$meta$model($$targs$$,$$value){
    ValueModel$meta$model({Set$ValueModel:$$targs$$.Set$Value,Get$ValueModel:$$targs$$.Get$Value},$$value);
    set_type_args($$value,$$targs$$);
}
Value$meta$model.$crtmm$=function(){return{mod:$CCMM$,$tp:{Get$Value:{'var':'out','def':{t:Anything}},Set$Value:{'var':'in','def':{t:Nothing}}},satisfies:[{t:ValueModel$meta$model,a:{Set$ValueModel:'Set$Value',Get$ValueModel:'Get$Value'}}],$an:function(){return[doc(String$("A value model represents the model of a Ceylon value that you can read and inspect.\n\nA value is a toplevel binding, declared on a package.\n\nThis is a [[ValueModel]] that you can query for a value declaration\'s current value:\n\n    shared String foo = \"Hello\";\n    \n    void test(){\n        Value<String> val = `foo`;\n        // This will print: Hello\n        print(val.get());\n    }\n",382)),shared()];},d:['ceylon.language.meta.model','Value']};};
exports.Value$meta$model=Value$meta$model;
function $init$Value$meta$model(){
    if(Value$meta$model.$$===undefined){
        initTypeProtoI(Value$meta$model,'ceylon.language.meta.model::Value',$init$ValueModel$meta$model());
        (function($$value){
            $$value.$get={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:'Get$Value',$ps:[],$cont:Value$meta$model,$an:function(){return[doc("Reads the current value for this value binding. Note that in the case of getter\nvalues, this can throw if the getter throws."),shared(),formal()];},d:['ceylon.language.meta.model','Value','$m','get']};}};$$value.set={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'newValue',$mt:'prm',$t:'Set$Value',$an:function(){return[];}}],$cont:Value$meta$model,$an:function(){return[doc("Changes this variable\'s value to the given new value. Note that in the case of\nsetter attributes, this can throw if the setter throws."),shared(),formal()];},d:['ceylon.language.meta.model','Value','$m','set']};}};$$value.setIfAssignable={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'newValue',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:Value$meta$model,$an:function(){return[doc("Non type-safe equivalent to [[Value.set]], to be used when you don\'t know the \nvariable type at compile-time. This only works if the underlying value is \nvariable. Note that if the underlying variable is a setter, this can throw \nexceptions thrown in the setter block."),$throws("IncompatibleTypeException","If the specified new value is not of a subtype of this variable\'s type"),$throws("MutationException","If this value is not variable"),shared(),formal()];},d:['ceylon.language.meta.model','Value','$m','setIfAssignable']};}};
        })(Value$meta$model.$$.prototype);
    }
    return Value$meta$model;
}
exports.$init$Value$meta$model=$init$Value$meta$model;
$init$Value$meta$model();
function nothingType$969$meta$model($$targs$$){
    var $$nothingType=new nothingType$969$meta$model.$$;
    $$nothingType.$$targs$$=$$targs$$;
    Type$meta$model({Type$Type:{t:Nothing}},$$nothingType);
    return $$nothingType;
};nothingType$969$meta$model.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Type$meta$model,a:{Type$Type:{t:Nothing}}}],$an:function(){return[doc("The singleton closed type for [[Nothing|ceylon.language::nothing]]."),shared()];},d:['ceylon.language.meta.model','nothingType']};};
function $init$nothingType$969$meta$model(){
    if(nothingType$969$meta$model.$$===undefined){
        initTypeProto(nothingType$969$meta$model,'ceylon.language.meta.model::nothingType',Basic,$init$Type$meta$model());
        (function($$nothingType){
            defineAttr($$nothingType,'string',function(){
                var $$nothingType=this;
                return String$("Nothing",7);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:nothingType$969$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','nothingType','$at','string']};});
            $$nothingType.typeOf=function (instance$970){
                var $$nothingType=this;
                return false;
            };$$nothingType.supertypeOf=function (type$971){
                var $$nothingType=this;
                return $$nothingType.exactly(type$971);
            };$$nothingType.subtypeOf=function (type$972){
                var $$nothingType=this;
                return true;
            };$$nothingType.exactly=function (type$973){
                var $$nothingType=this;
                return type$973.equals(getNothingType$meta$model());
            };
        })(nothingType$969$meta$model.$$.prototype);
    }
    return nothingType$969$meta$model;
}
exports.$init$nothingType$969$meta$model=$init$nothingType$969$meta$model;
$init$nothingType$969$meta$model();
var nothingType$974$meta$model;
function getNothingType$meta$model(){
    if(nothingType$974$meta$model===undefined){nothingType$974$meta$model=$init$nothingType$969$meta$model()({Type$Type:{t:Nothing}});nothingType$974$meta$model.$crtmm$=getNothingType$meta$model.$crtmm$;}
    return nothingType$974$meta$model;
}
exports.getNothingType$meta$model=getNothingType$meta$model;
getNothingType$meta$model.$crtmm$=function(){return{mod:$CCMM$,$t:{t:nothingType$969$meta$model},$an:function(){return[doc(String$("The singleton closed type for [[Nothing|ceylon.language::nothing]].",67)),shared()];},d:['ceylon.language.meta.model','nothingType']};};
$prop$getNothingType$meta$model={get:getNothingType$meta$model,$crtmm$:getNothingType$meta$model.$crtmm$};
exports.$prop$getNothingType$meta$model=$prop$getNothingType$meta$model;
function TypeApplicationException$meta$model(message$975,$$typeApplicationException){
    $init$TypeApplicationException$meta$model();
    if($$typeApplicationException===undefined)$$typeApplicationException=new TypeApplicationException$meta$model.$$;
    $$typeApplicationException.message$975_=message$975;
    Exception($$typeApplicationException.message$975,undefined,$$typeApplicationException);
    return $$typeApplicationException;
}
TypeApplicationException$meta$model.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Exception},$ps:[{$nm:'message',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$an:function(){return[doc(String$("Thrown when declarations are applied with invalid or incompatible type arguments.\n\nFor example if you try to apply `Foo` with `String`, hoping to get a `Foo<String>`\nbut the type parameter for `Foo` only accepts types that satisfy `Numeric`.\n",242)),shared()];},d:['ceylon.language.meta.model','TypeApplicationException']};};
exports.TypeApplicationException$meta$model=TypeApplicationException$meta$model;
function $init$TypeApplicationException$meta$model(){
    if(TypeApplicationException$meta$model.$$===undefined){
        initTypeProto(TypeApplicationException$meta$model,'ceylon.language.meta.model::TypeApplicationException',$init$Exception());
        (function($$typeApplicationException){
            defineAttr($$typeApplicationException,'message$975',function(){return this.message$975_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:TypeApplicationException$meta$model,d:['ceylon.language.meta.model','TypeApplicationException','$at','message']};});
        })(TypeApplicationException$meta$model.$$.prototype);
    }
    return TypeApplicationException$meta$model;
}
exports.$init$TypeApplicationException$meta$model=$init$TypeApplicationException$meta$model;
$init$TypeApplicationException$meta$model();
function InvocationException$meta$model(message$976,$$invocationException){
    $init$InvocationException$meta$model();
    if($$invocationException===undefined)$$invocationException=new InvocationException$meta$model.$$;
    $$invocationException.message$976_=message$976;
    Exception($$invocationException.message$976,undefined,$$invocationException);
    return $$invocationException;
}
InvocationException$meta$model.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Exception},$ps:[{$nm:'message',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$an:function(){return[doc(String$("Thrown when attempting to invoke something which can\'t be invoked, like abstract class\ninitialisers.",100)),shared()];},d:['ceylon.language.meta.model','InvocationException']};};
exports.InvocationException$meta$model=InvocationException$meta$model;
function $init$InvocationException$meta$model(){
    if(InvocationException$meta$model.$$===undefined){
        initTypeProto(InvocationException$meta$model,'ceylon.language.meta.model::InvocationException',$init$Exception());
        (function($$invocationException){
            defineAttr($$invocationException,'message$976',function(){return this.message$976_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:InvocationException$meta$model,d:['ceylon.language.meta.model','InvocationException','$at','message']};});
        })(InvocationException$meta$model.$$.prototype);
    }
    return InvocationException$meta$model;
}
exports.$init$InvocationException$meta$model=$init$InvocationException$meta$model;
$init$InvocationException$meta$model();
function MutationException$meta$model(message$977,$$mutationException){
    $init$MutationException$meta$model();
    if($$mutationException===undefined)$$mutationException=new MutationException$meta$model.$$;
    $$mutationException.message$977_=message$977;
    Exception($$mutationException.message$977,undefined,$$mutationException);
    return $$mutationException;
}
MutationException$meta$model.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Exception},$ps:[{$nm:'message',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$an:function(){return[doc(String$("Thrown when you try to change the value of a non-variable value",63)),shared()];},d:['ceylon.language.meta.model','MutationException']};};
exports.MutationException$meta$model=MutationException$meta$model;
function $init$MutationException$meta$model(){
    if(MutationException$meta$model.$$===undefined){
        initTypeProto(MutationException$meta$model,'ceylon.language.meta.model::MutationException',$init$Exception());
        (function($$mutationException){
            defineAttr($$mutationException,'message$977',function(){return this.message$977_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:MutationException$meta$model,d:['ceylon.language.meta.model','MutationException','$at','message']};});
        })(MutationException$meta$model.$$.prototype);
    }
    return MutationException$meta$model;
}
exports.$init$MutationException$meta$model=$init$MutationException$meta$model;
$init$MutationException$meta$model();
function IncompatibleTypeException$meta$model(message$978,$$incompatibleTypeException){
    $init$IncompatibleTypeException$meta$model();
    if($$incompatibleTypeException===undefined)$$incompatibleTypeException=new IncompatibleTypeException$meta$model.$$;
    $$incompatibleTypeException.message$978_=message$978;
    Exception($$incompatibleTypeException.message$978,undefined,$$incompatibleTypeException);
    return $$incompatibleTypeException;
}
IncompatibleTypeException$meta$model.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Exception},$ps:[{$nm:'message',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$an:function(){return[doc(String$("Thrown when you invoke metamodel methods with invalid or incompatible type arguments.\n\nFor example if you try to get an attribute from a class and expect an attribute of `String`\ntype but it is an attribute of `Integer` type.\n",226)),shared()];},d:['ceylon.language.meta.model','IncompatibleTypeException']};};
exports.IncompatibleTypeException$meta$model=IncompatibleTypeException$meta$model;
function $init$IncompatibleTypeException$meta$model(){
    if(IncompatibleTypeException$meta$model.$$===undefined){
        initTypeProto(IncompatibleTypeException$meta$model,'ceylon.language.meta.model::IncompatibleTypeException',$init$Exception());
        (function($$incompatibleTypeException){
            defineAttr($$incompatibleTypeException,'message$978',function(){return this.message$978_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:IncompatibleTypeException$meta$model,d:['ceylon.language.meta.model','IncompatibleTypeException','$at','message']};});
        })(IncompatibleTypeException$meta$model.$$.prototype);
    }
    return IncompatibleTypeException$meta$model;
}
exports.$init$IncompatibleTypeException$meta$model=$init$IncompatibleTypeException$meta$model;
$init$IncompatibleTypeException$meta$model();
function Generic$meta$model($$generic){
}
Generic$meta$model.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("A generic model which has closed type arguments.",48)),shared()];},d:['ceylon.language.meta.model','Generic']};};
exports.Generic$meta$model=Generic$meta$model;
function $init$Generic$meta$model(){
    if(Generic$meta$model.$$===undefined){
        initTypeProtoI(Generic$meta$model,'ceylon.language.meta.model::Generic');
        (function($$generic){
            $$generic.$prop$getTypeArguments={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Map,a:{Item$Map:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},Key$Map:{t:TypeParameter$meta$declaration}}},$cont:Generic$meta$model,$an:function(){return[doc(String$("The map of type parameter declaration to type arguments for this generic model.",79)),shared(),formal()];},d:['ceylon.language.meta.model','Generic','$at','typeArguments']};}};
        })(Generic$meta$model.$$.prototype);
    }
    return Generic$meta$model;
}
exports.$init$Generic$meta$model=$init$Generic$meta$model;
$init$Generic$meta$model();
function Declaration$meta$declaration($$declaration){
}
Declaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,of:[{t:AnnotatedDeclaration$meta$declaration},{t:TypeParameter$meta$declaration}],$an:function(){return[doc(String$("A declaration.\n\nThere are only two types of declarations:\n\n- [[AnnotatedDeclaration]]s such as modules, packages, classes or functions, and\n- [[TypeParameter]] declarations.",173)),shared()];},d:['ceylon.language.meta.declaration','Declaration']};};
exports.Declaration$meta$declaration=Declaration$meta$declaration;
function $init$Declaration$meta$declaration(){
    if(Declaration$meta$declaration.$$===undefined){
        initTypeProtoI(Declaration$meta$declaration,'ceylon.language.meta.declaration::Declaration');
        (function($$declaration){
            $$declaration.$prop$getName={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Declaration$meta$declaration,$an:function(){return[doc(String$("The name of this declaration. For example, the [[Declaration]] class is named \"Declaration\".",92)),shared(),formal()];},d:['ceylon.language.meta.declaration','Declaration','$at','name']};}};
            $$declaration.$prop$getQualifiedName={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Declaration$meta$declaration,$an:function(){return[doc(String$("The qualified name of this declaration. This includes the container qualified name. For\nexample, the [[Declaration]] class\' qualified name is \"ceylon.language.meta.declaration::Declaration\".",190)),shared(),formal()];},d:['ceylon.language.meta.declaration','Declaration','$at','qualifiedName']};}};
        })(Declaration$meta$declaration.$$.prototype);
    }
    return Declaration$meta$declaration;
}
exports.$init$Declaration$meta$declaration=$init$Declaration$meta$declaration;
$init$Declaration$meta$declaration();
function AnnotatedDeclaration$meta$declaration($$annotatedDeclaration){
    Declaration$meta$declaration($$annotatedDeclaration);
    Annotated($$annotatedDeclaration);
}
AnnotatedDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:Declaration$meta$declaration},{t:Annotated}],of:[{t:NestableDeclaration$meta$declaration},{t:Module$meta$declaration},{t:Package$meta$declaration}],$an:function(){return[doc(String$("Declaration which can be annotated, such as:\n\n- [[NestableDeclaration]]\n- [[Module]]\n- [[Package]]\n\nYou can query annotations that are placed on a given annotated declaration with:\n\n",182)),shared()];},d:['ceylon.language.meta.declaration','AnnotatedDeclaration']};};
exports.AnnotatedDeclaration$meta$declaration=AnnotatedDeclaration$meta$declaration;
function $init$AnnotatedDeclaration$meta$declaration(){
    if(AnnotatedDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(AnnotatedDeclaration$meta$declaration,'ceylon.language.meta.declaration::AnnotatedDeclaration',$init$Declaration$meta$declaration(),$init$Annotated());
        (function($$annotatedDeclaration){
            $$annotatedDeclaration.annotations={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Annotation$annotations'}},$ps:[],$cont:AnnotatedDeclaration$meta$declaration,$tp:{Annotation$annotations:{'var':'out','satisfies':[{t:Annotation}]}},$an:function(){return[doc("The annotation instances of the given \nannotation type on this declaration.\n\nFor example, you can list all the [[See|ceylon.language::See]] \nannotations on [[List|ceylon.language::List]]\nwith the following code:\n\n    for(annot in `interface List`.annotations<See>()){\n        for(elems in annot.programElements){\n            print(\"See: ``elems``\");\n        }\n    }\n\nAlternatively, you can use the [[ceylon.language.meta::annotations]] \nfunction.\n"),shared(),formal()];},d:['ceylon.language.meta.declaration','AnnotatedDeclaration','$m','annotations']};}};
        })(AnnotatedDeclaration$meta$declaration.$$.prototype);
    }
    return AnnotatedDeclaration$meta$declaration;
}
exports.$init$AnnotatedDeclaration$meta$declaration=$init$AnnotatedDeclaration$meta$declaration;
$init$AnnotatedDeclaration$meta$declaration();
//Add-on to AnnotatedDeclaration
AnnotatedDeclaration$meta$declaration.$$.prototype.annotations=function ($$$mptypes) {
  var ans = [];
  var _mdl = getrtmm$$(this.tipo);
  var _ans = _mdl.$an;
  if (typeof(_ans)==='function') {
    _ans = _ans();
    _mdl.$an=_ans;
  }
  for (var i=0; i<_ans.length;i++) {
    if (isOfType(_ans[i], $$$mptypes.Annotation$annotations)) {
      ans.push(_ans[i]);
    }
  }
  return ans.length == 0 ? getEmpty() : ans.reifyCeylonType({Element$Iterable:$$$mptypes.Annotation$annotations});
};
AnnotatedDeclaration$meta$declaration.$$.prototype.annotations.$crtmm$=function(){return{mod:$CCMM$,
  $t:{t:Sequential,a:{Element$Iterable:'Annotation'}},$ps:[],$cont:AnnotatedDeclaration$meta$declaration,$tp:{Annotation$annotations:{'var':'out','satisfies':[{t:Annotation,a:{Value$Annotation:'Annotation'}}]}},$an:function(){return[shared(),formal()];},d:['ceylon.language.meta.declaration','AnnotatedDeclaration','$m','annotations']};};
function NestableDeclaration$meta$declaration($$nestableDeclaration){
    AnnotatedDeclaration$meta$declaration($$nestableDeclaration);
    TypedDeclaration$meta$declaration($$nestableDeclaration);
}
NestableDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:AnnotatedDeclaration$meta$declaration},{t:TypedDeclaration$meta$declaration}],of:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration},{t:AliasDeclaration$meta$declaration}],$an:function(){return[doc(String$("A declaration which can be contained in a [[Package]] or in another [[NestableDeclaration]].\n\nFunctions, values, classes, interfaes and aliases are such declarations.",166)),shared()];},d:['ceylon.language.meta.declaration','NestableDeclaration']};};
exports.NestableDeclaration$meta$declaration=NestableDeclaration$meta$declaration;
function $init$NestableDeclaration$meta$declaration(){
    if(NestableDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(NestableDeclaration$meta$declaration,'ceylon.language.meta.declaration::NestableDeclaration',$init$AnnotatedDeclaration$meta$declaration(),$init$TypedDeclaration$meta$declaration());
        (function($$nestableDeclaration){
            $$nestableDeclaration.$prop$getActual={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this declaration is annotated with [[actual|ceylon.language::actual]].",78)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','actual']};}};
            $$nestableDeclaration.$prop$getFormal={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this declaration is annotated with [[formal|ceylon.language::formal]].",78)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','formal']};}};
            $$nestableDeclaration.$prop$getDefault={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this declaration is annotated with [[default|ceylon.language::default]].",80)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','default']};}};
            $$nestableDeclaration.$prop$getShared={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this declaration is annotated with [[shared|ceylon.language::shared]].",78)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','shared']};}};
            $$nestableDeclaration.$prop$getContainingPackage={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("This declaration\'s package container.",37)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','containingPackage']};}};
            $$nestableDeclaration.$prop$getContainingModule={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("This declaration\'s module container.",36)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','containingModule']};}};
            $$nestableDeclaration.$prop$getContainer={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:NestableDeclaration$meta$declaration},{t:Package$meta$declaration}]},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("This declaration\'s immediate container, which can be either a [[NestableDeclaration]]\nor a [[Package]].",103)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','container']};}};
            $$nestableDeclaration.$prop$getToplevel={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:NestableDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this declaration is a toplevel declaration.",51)),shared(),formal()];},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','toplevel']};}};
        })(NestableDeclaration$meta$declaration.$$.prototype);
    }
    return NestableDeclaration$meta$declaration;
}
exports.$init$NestableDeclaration$meta$declaration=$init$NestableDeclaration$meta$declaration;
$init$NestableDeclaration$meta$declaration();
defineAttr(NestableDeclaration$meta$declaration.$$.prototype,'actual',function(){
  return $findAnnotation(this.tipo,ActualAnnotation)!==null;
},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:NestableDeclaration$meta$declaration,d:['ceylon.language.meta.declaration','NestableDeclaration','$at','actual']};});
defineAttr(NestableDeclaration$meta$declaration.$$.prototype,'formal',function(){
  return $findAnnotation(this.tipo,FormalAnnotation)!==null;
},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:NestableDeclaration$meta$declaration,d:['ceylon.language.meta.declaration','NestableDeclaration','$at','formal']};});
defineAttr(NestableDeclaration$meta$declaration.$$.prototype,'$default',function(){
  return $findAnnotation(this.tipo,DefaultAnnotation)!==null;
},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:NestableDeclaration$meta$declaration,d:['ceylon.language.meta.declaration','NestableDeclaration','$at','default']};});
defineAttr(NestableDeclaration$meta$declaration.$$.prototype,'shared',function(){
  return $findAnnotation(this.tipo,SharedAnnotation)!==null;
},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:NestableDeclaration$meta$declaration,d:['ceylon.language.meta.declaration','NestableDeclaration','$at','shared']};});

function GenericDeclaration$meta$declaration($$genericDeclaration){
}
GenericDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("A declaration that can have type parameters.",44)),shared()];},d:['ceylon.language.meta.declaration','GenericDeclaration']};};
exports.GenericDeclaration$meta$declaration=GenericDeclaration$meta$declaration;
function $init$GenericDeclaration$meta$declaration(){
    if(GenericDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(GenericDeclaration$meta$declaration,'ceylon.language.meta.declaration::GenericDeclaration');
        (function($$genericDeclaration){
            $$genericDeclaration.$prop$getTypeParameterDeclarations={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:TypeParameter$meta$declaration}}},$cont:GenericDeclaration$meta$declaration,$an:function(){return[doc(String$("The list of type parameters declared on this generic declaration.",65)),shared(),formal()];},d:['ceylon.language.meta.declaration','GenericDeclaration','$at','typeParameterDeclarations']};}};
            $$genericDeclaration.getTypeParameterDeclaration={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:TypeParameter$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:GenericDeclaration$meta$declaration,$an:function(){return[doc("Finds a type parameter by name. Returns `null` if not found."),shared(),formal()];},d:['ceylon.language.meta.declaration','GenericDeclaration','$m','getTypeParameterDeclaration']};}};
        })(GenericDeclaration$meta$declaration.$$.prototype);
    }
    return GenericDeclaration$meta$declaration;
}
exports.$init$GenericDeclaration$meta$declaration=$init$GenericDeclaration$meta$declaration;
$init$GenericDeclaration$meta$declaration();
//Addendum to GenericDeclaration
defineAttr(GenericDeclaration$meta$declaration.$$.prototype,'typeParameterDeclarations',function(){
  if (this.tipo) {
    var mm=getrtmm$$(this.tipo);
    var tps=mm.$tp;
    if (tps) {
      var rv=[];
      for (var tp in tps) {
        rv.push(OpenTypeParam(this.tipo,tp));
      }
      return ArraySequence(rv,{Element$Iterable:{t:TypeParameter$meta$declaration}});
    }
    return getEmpty();
  }
  console.log("TODO GenericDeclaration.typeParameterDeclarations");
  return getEmpty();
},undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:TypeParameter$meta$declaration}}},$cont:GenericDeclaration,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','GenericDeclaration','$at','typeParameterDeclarations']};});
GenericDeclaration$meta$declaration.$$.prototype.getTypeParameterDeclaration=function (name$14){
  if (this.tipo) {
    var mm=getrtmm$$(this.tipo);
    var tps=mm.$tp;
    if (tps) {
      for (var tp in tps) {
        var tpnm = tp;
        if (tp.indexOf('$')>0)tpnm=tp.substring(0,tp.indexOf('$'));
        if (name$14==tpnm) {
          return OpenTypeParam(this.tipo,tp);
        }
      }
    }
    return null;
  }
  console.log("TODO GenericDeclaration.getTypeParameterDeclaration(" + name$14 + ")");
  return null;
};
GenericDeclaration$meta$declaration.$$.prototype.getTypeParameterDeclaration.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:TypeParameter$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:GenericDeclaration,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','GenericDeclaration','$m','getTypeParameterDeclaration']};};
 
function ClassOrInterfaceDeclaration$meta$declaration($$classOrInterfaceDeclaration){
    NestableDeclaration$meta$declaration($$classOrInterfaceDeclaration);
    GenericDeclaration$meta$declaration($$classOrInterfaceDeclaration);
}
ClassOrInterfaceDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:NestableDeclaration$meta$declaration},{t:GenericDeclaration$meta$declaration}],of:[{t:ClassDeclaration$meta$declaration},{t:InterfaceDeclaration$meta$declaration}],$an:function(){return[doc(String$("A class or interface declaration.\n\n<a name=\"toplevel-sample\"></a>\n### Usage sample for toplevel classes\n\nBecause some classes have type parameters, getting a model requires applying type arguments to the\nclass declaration with [[apply]] in order to be able to instantiate that class. For example, here is how you would\nobtain a class or interface model that you can instantiate from a toplevel class declaration:\n\n    class Foo<T>() {\n        string => \"Hello, our T is: ``typeLiteral<T>()``\";\n    }\n    \n    void test(){\n        // We need to apply the Integer closed type to the Foo declaration in order to get the Foo<Integer> closed type\n        ClassOrInterface<Foo<Integer>> classOrInterfaceModel = `class Foo`.apply<Foo<Integer>>(`Integer`);\n        assert(is Class<Foo<Integer>,[]> classOrInterfaceModel);\n        // This will print: Hello, our T is: ceylon.language::Integer\n        print(classOrInterfaceModel());\n    }\n\nNote that there are more specialised versions of [[apply]] in [[ClassDeclaration.classApply]] and \n[[InterfaceDeclaration.interfaceApply]].\n\n<a name=\"member-sample\"></a>\n### Usage sample for member classes\n\nFor member classes or interfaces it is a bit longer, because member types need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared class Inner(){\n            string => \"Hello\";\n        }\n    }\n\n    void test(){\n        // apply the containing closed type `Outer` to the member class declaration `Outer.Inner`\n        value memberClassModel = `class Outer.Inner`.memberApply<Outer,Outer.Inner>(`Outer`);\n        assert(is MemberClass<Outer,Outer.Inner,[]> memberClassModel);\n        // We now have a MemberClass, which needs to be applied to a containing instance in order to become an\n        // invokable class model:\n        Class<Outer.Inner,[]> boundMemberClassModel = memberClassModel(Outer());\n        // This will print: Hello\n        print(boundMemberClassModel());\n    }\n\nNote that there are more specialised versions of [[memberApply]] in [[ClassDeclaration.memberClassApply]] and \n[[InterfaceDeclaration.memberInterfaceApply]].\n",2216)),shared()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration']};};
exports.ClassOrInterfaceDeclaration$meta$declaration=ClassOrInterfaceDeclaration$meta$declaration;
function $init$ClassOrInterfaceDeclaration$meta$declaration(){
    if(ClassOrInterfaceDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(ClassOrInterfaceDeclaration$meta$declaration,'ceylon.language.meta.declaration::ClassOrInterfaceDeclaration',$init$NestableDeclaration$meta$declaration(),$init$GenericDeclaration$meta$declaration());
        (function($$classOrInterfaceDeclaration){
            $$classOrInterfaceDeclaration.$prop$getExtendedType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:OpenClassType$meta$declaration}]},$cont:ClassOrInterfaceDeclaration$meta$declaration,$an:function(){return[doc(String$("This type\'s extended type, unless this is the class for [[Anything|ceylon.language::Anything]], which\nis the root of the type hierarchy and thus does not have any extended type.",177)),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$at','extendedType']};}};
            $$classOrInterfaceDeclaration.$prop$getSatisfiedTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenInterfaceType$meta$declaration}}},$cont:ClassOrInterfaceDeclaration$meta$declaration,$an:function(){return[doc(String$("The list of types satisfied by this type.",41)),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$at','satisfiedTypes']};}};
            $$classOrInterfaceDeclaration.$prop$getCaseTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenType$meta$declaration}}},$cont:ClassOrInterfaceDeclaration$meta$declaration,$an:function(){return[doc(String$("If this type has an `of` clause, this is the list of case types for the current type.",85)),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$at','caseTypes']};}};
            $$classOrInterfaceDeclaration.$prop$getIsAlias={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:ClassOrInterfaceDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this type is an alias type, in which case the [[extendedType]] will \ncontain the substituted type.",106)),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$at','isAlias']};}};
            $$classOrInterfaceDeclaration.memberDeclarations={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind$memberDeclarations'}},$ps:[],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Kind$memberDeclarations:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[doc("Returns the list of member declarations that satisfy the given `Kind` type argument."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','memberDeclarations']};}};$$classOrInterfaceDeclaration.declaredMemberDeclarations={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind$declaredMemberDeclarations'}},$ps:[],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Kind$declaredMemberDeclarations:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[doc("Returns the list of member declarations that satisfy the given `Kind` type argument."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','declaredMemberDeclarations']};}};$$classOrInterfaceDeclaration.annotatedMemberDeclarations={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind$annotatedMemberDeclarations'}},$ps:[],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Kind$annotatedMemberDeclarations:{'satisfies':[{t:NestableDeclaration$meta$declaration}]},Annotation$annotatedMemberDeclarations:{}},$an:function(){return[doc("Returns the list of member declarations that satisfy the given `Kind` type argument and\nthat are annotated with the given `Annotation` type argument"),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','annotatedMemberDeclarations']};}};$$classOrInterfaceDeclaration.annotatedDeclaredMemberDeclarations={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind$annotatedDeclaredMemberDeclarations'}},$ps:[],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Kind$annotatedDeclaredMemberDeclarations:{'satisfies':[{t:NestableDeclaration$meta$declaration}]},Annotation$annotatedDeclaredMemberDeclarations:{}},$an:function(){return[doc("Returns the list of member declarations that satisfy the given `Kind` type argument and\nthat are annotated with the given `Annotation` type argument"),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','annotatedDeclaredMemberDeclarations']};}};$$classOrInterfaceDeclaration.getMemberDeclaration={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Kind$getMemberDeclaration']},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Kind$getMemberDeclaration:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[doc("Looks up a member declaration by name, provided it satisfies the given `Kind` type\nargument. Returns `null` if no such member matches."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','getMemberDeclaration']};}};$$classOrInterfaceDeclaration.getDeclaredMemberDeclaration={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Kind$getDeclaredMemberDeclaration']},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Kind$getDeclaredMemberDeclaration:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[doc("Looks up a member declaration by name, provided it satisfies the given `Kind` type\nargument. Returns `null` if no such member matches."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','getDeclaredMemberDeclaration']};}};$$classOrInterfaceDeclaration.$apply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:'Type$apply'}},$ps:[{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Type$apply:{'def':{t:Anything}}},$an:function(){return[doc("Applies the given closed type arguments to this toplevel class or interface declaration in order to obtain a class or interface model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Type` type argument is not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','apply']};}};$$classOrInterfaceDeclaration.memberApply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'i', l:[{t:Member$meta$model,a:{Container$Member:'Container$memberApply',Kind$Member:{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:'Type$memberApply'}}}},{t:ClassOrInterface$meta$model,a:{Type$ClassOrInterface:'Type$memberApply'}}]},$ps:[{$nm:'containerType',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:'Container$memberApply'}},$an:function(){return[];}},{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassOrInterfaceDeclaration$meta$declaration,$tp:{Container$memberApply:{'def':{t:Nothing}},Type$memberApply:{'def':{t:Anything}}},$an:function(){return[doc("Applies the given closed container type and type arguments to this member class or interface declaration in order to obtain a \nmember class or interface model. See [this code sample](#member-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Container` or `Type` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result\'s container type or type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','memberApply']};}};
        })(ClassOrInterfaceDeclaration$meta$declaration.$$.prototype);
    }
    return ClassOrInterfaceDeclaration$meta$declaration;
}
exports.$init$ClassOrInterfaceDeclaration$meta$declaration=$init$ClassOrInterfaceDeclaration$meta$declaration;
$init$ClassOrInterfaceDeclaration$meta$declaration();
function FunctionalDeclaration$meta$declaration($$functionalDeclaration){
}
FunctionalDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("Declaration which can be invoked, and may have parameters. Classes\nand functions are functional declarations.\n\nNote that multiple-parameter lists are not reified at runtime, so if you\nhave a function declaration like this:\n\n    Integer add(Integer a)(Integer b) => a + b;\n\nIt will only have a single parameter list at runtime (the first), and its return\ntype will be `Callable<Integer,[Integer]>`.\n",398)),shared()];},d:['ceylon.language.meta.declaration','FunctionalDeclaration']};};
exports.FunctionalDeclaration$meta$declaration=FunctionalDeclaration$meta$declaration;
function $init$FunctionalDeclaration$meta$declaration(){
    if(FunctionalDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(FunctionalDeclaration$meta$declaration,'ceylon.language.meta.declaration::FunctionalDeclaration');
        (function($$functionalDeclaration){
            $$functionalDeclaration.$prop$getAnnotation={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:FunctionalDeclaration$meta$declaration,$an:function(){return[doc(String$("True if the current declaration is an annotation class or function.",67)),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionalDeclaration','$at','annotation']};}};
            $$functionalDeclaration.$prop$getParameterDeclarations={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:FunctionOrValueDeclaration$meta$declaration}}},$cont:FunctionalDeclaration$meta$declaration,$an:function(){return[doc(String$("The list of parameter declarations for this functional declaration.",67)),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionalDeclaration','$at','parameterDeclarations']};}};
            $$functionalDeclaration.getParameterDeclaration={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:FunctionOrValueDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:FunctionalDeclaration$meta$declaration,$an:function(){return[doc("Gets a parameter declaration by name. Returns `null` if no such parameter exists."),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionalDeclaration','$m','getParameterDeclaration']};}};
        })(FunctionalDeclaration$meta$declaration.$$.prototype);
    }
    return FunctionalDeclaration$meta$declaration;
}
exports.$init$FunctionalDeclaration$meta$declaration=$init$FunctionalDeclaration$meta$declaration;
$init$FunctionalDeclaration$meta$declaration();
//Addendum to model.declaration.ClassOrInterfaceDeclaration
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.getMemberDeclaration=function(name$20,$$$mptypes,noInherit){
  var _m=undefined;
  if (extendsType($$$mptypes.Kind$getMemberDeclaration, {t:ValueDeclaration$meta$declaration})) {
    var _d = this.tipo.$$.prototype['$prop$get'+name$20[0].toUpperCase()+name$20.substring(1)];
    if (_d){
      if (noInherit) {
        var mm=getrtmm$$(_d);
        if (mm.$cont!==this.tipo)return null;
      }
      _m=OpenValue(this.containingPackage, _d);
    }
  }
  if (!_m && extendsType($$$mptypes.Kind$getMemberDeclaration, {t:FunctionDeclaration$meta$declaration})) {
    var nom=name$20;
    if (this.tipo===String$ && ['split','replace','filter','every','map','sort','slice'].indexOf(nom)>=0)nom='$'+nom;
    var _d = this.tipo.$$.prototype[nom];
    if(_d){
      if (noInherit) {
        var mm=getrtmm$$(_d);
        if (mm.$cont!==this.tipo)return null;
      }
      _m=OpenFunction(this.containingPackage, _d);
    }
  }
  if (!_m && extendsType($$$mptypes.Kind$getMemberDeclaration, {t:ClassOrInterfaceDeclaration$meta$declaration})) {
    var nom=name$20+'$'+this.name;
    var _d = this.tipo.$$.prototype[nom];
    if (!_d) {
      if (noInherit)return null;
      var pere=this.tipo.$crtmm$['super'];
      while (!_d && pere) {
        var mm=getrtmm$$(pere.t);
        nom=mm&&mm.d?name$20+'$'+mm.d[mm.d.length-1]:undefined;
        if(nom)_d=this.tipo.$$.prototype[nom];
        if (!_d)pere=mm['super'];
      }
    }
    if(_d){
      var wantsClass=extendsType($$$mptypes.Kind$getMemberDeclaration,{t:ClassDeclaration$meta$declaration});
      var wantsIface=extendsType($$$mptypes.Kind$getMemberDeclaration,{t:InterfaceDeclaration$meta$declaration});
      var _$m = getrtmm$$(_d);
      var _mdl=get_model(_$m);
      if ((wantsClass && _mdl.$mt!=='cls') || (wantsIface && _mdl.$mt!=='ifc'))return null;
      _m=(_mdl.$mt==='cls'?OpenClass:OpenInterface)(this.containingPackage, _d);
    }
  }
  if (_m) {
    _m.$parent=this;
    return _m;
  }
  return null;
};
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.getMemberDeclaration.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},'Kind']},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:OpenClass,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','getMemberDeclaration']};};
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.getDeclaredMemberDeclaration=function(nm,$mptypes){
  return this.getMemberDeclaration(nm,{Kind$getMemberDeclaration:$mptypes.Kind$getDeclaredMemberDeclaration},1);
}
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.getDeclaredMemberDeclaration.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},'Kind']},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:OpenClass,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','getDeclaredMemberDeclaration']};};
defineAttr(FunctionalDeclaration$meta$declaration.$$.prototype,'parameterDeclarations',function(){
  var that=this;
  var parms = that.tipo.$crtmm$.$ps;
  if (!parms || parms.length === 0)return getEmpty();
  var rv = [];
  for (var i=0; i<parms.length;i++) {
    var p = parms[i];
    if (p.$pt === 'f') {
      rv.push(FunParamDecl(this,p));
    } else {
      rv.push(ValParamDecl(this,p));
    }
  }
  return ArraySequence(rv,{Element$Iterable:{t:FunctionOrValueDeclaration$meta$declaration},Absent$Iterable:{t:Null}});
},undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:FunctionOrValueDeclaration$meta$declaration}}},$cont:FunctionalDeclaration$meta$declaration,$an:function(){return[shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionalDeclaration','$at','parameterDeclarations']};});
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.memberDeclarations=function($$$mptypes){
  var filter;
  var defs=[];
  if (extendsType({t:FunctionDeclaration$meta$declaration},$$$mptypes.Kind$memberDeclarations)) {
    for (var df in this.meta['$m']) {
      defs.push(this.meta['$m'][df]);
    }
  }
  if (extendsType({t:ValueDeclaration$meta$declaration},$$$mptypes.Kind$memberDeclarations)) {
    for (var df in this.meta['$at']) {
      defs.push(this.meta['$at'][df]);
    }
  }
  if (extendsType({t:InterfaceDeclaration$meta$declaration},$$$mptypes.Kind$memberDeclarations)) {
    for (var df in this.meta['$i']) {
      defs.push(this.meta['$i'][df]);
    }
  }
  if (extendsType({t:ClassDeclaration$meta$declaration},$$$mptypes.Kind$memberDeclarations)) {
    for (var df in this.meta['$c']) {
      defs.push(this.meta['$c'][df]);
    }
  }
  var pkg = this.containingPackage;
  var r=[];
  for (var i=0; i<defs.length; i++) {
    var m=defs[i];
    var mt = m['$mt'];
    var _d;
    if (mt === 'mthd') {
      _d=this.getMemberDeclaration(m.$nm, {Kind$getMemberDeclaration:{t:FunctionDeclaration$meta$declaration}});
    } else if (mt==='cls') {
      _d=this.getMemberDeclaration(m.$nm, {Kind$getMemberDeclaration:{t:ClassDeclaration$meta$declaration}});
    } else if (mt==='ifc') {
      _d=this.getMemberDeclaration(m.$nm, {Kind$getMemberDeclaration:{t:InterfaceDeclaration$meta$declaration}});
    } else if (mt==='attr'||mt==='gttr'||mt==='obj') {
      _d=this.getMemberDeclaration(m.$nm, {Kind$getMemberDeclaration:{t:ValueDeclaration$meta$declaration}});
    }
    if (_d) {
      _d.$parent=this;
      r.push(_d);
    }
  }
  return ArraySequence(r,{Element$Iterable:$$$mptypes.Kind$memberDeclarations});
};
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.memberDeclarations.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind'}},$ps:[],$cont:OpenInterface,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','memberDeclarations']};};
defineAttr(ClassOrInterfaceDeclaration$meta$declaration.$$.prototype,'caseTypes',function(){
  var casos = this.tipo.$crtmm$.of;
  if (casos && casos.length > 0) {
    var ct=[]; var ta=[];
    for (var i=0; i < casos.length; i++) {
      if (typeof(casos[i])==='string') {
        ct.push(OpenTvar(OpenTypeParam(this, casos[i])));
        if (!ta.contains(OpenTypeVariable$meta$declaration))ta.push(OpenTypeVariable$meta$declaration);
      } else {
        var ot=_openTypeFromTarg(casos[i]);
        ct.push(ot);
        if (isOfType(ot,{t:OpenClassType$meta$declaration}) && !ta.contains(OpenClassType$meta$declaration))ta.push(OpenClassType$meta$declaration);
        else if (isOfType(ot,{t:OpenInterfaceType$meta$declaration})&&!ta.contains(OpenInterfaceType$meta$declaration))ta.push(OpenInterfaceType$meta$declaration);
      }
    }
    if (ta.length===0)ta={t:OpenType$meta$declaration};
    else if (ta.length===1)ta={t:ta[0]};
    else {
      for (var i=0;i<ta.length;i++)ta[i]={t:ta[i]};
      ta={t:'u',l:ta};
    }
    return ArraySequence(ct,{Element$Iterable:ta});
  }
  return getEmpty();
},undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenType$meta$declaration}}},$cont:ClassOrInterfaceDeclaration$meta$declaration,$an:function(){return[shared(),formal()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$at','caseTypes']};});
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.$apply=function(types,$mptypes){
  var _t = {t:this.tipo};
  var _m = getrtmm$$(this.tipo);
  validate$typeparams(_t,_m.$tp,types);
  if (!extendsType(_t, $mptypes.Type$apply))
    throw IncompatibleTypeException$meta$model(String$("Type argument for 'Type' must be a supertype of " + this));
  var rv=this.meta.$mt==='ifc'?AppliedInterface(_t.t, {Type$Interface:$mptypes.Type$apply}):
    AppliedClass(_t.t, {Type$Class:$mptypes.Type$apply,Arguments$Class:$mptypes.Arguments$apply});
  if (_t.a)rv.$targs=_t.a;
  return rv;
}
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.$apply.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','apply']};};
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.memberApply=function(cont, types,$mptypes) {
  var mm=getrtmm$$(this.tipo);
  if (!extendsType({t:cont.tipo},{t:mm.$cont}))throw IncompatibleTypeException$meta$model("Incompatible Container type");
  var _t = {t:this.tipo};
  validate$typeparams(_t,mm.$tp,types);
  if (!extendsType(_t, $mptypes.Type$memberApply))
    throw IncompatibleTypeException$meta$model(String$("Type argument for 'Type' must be a supertype of " + this));
  var rv=this.meta.$mt==='ifc'?AppliedMemberInterface(_t.t, {Container$MemberInterface:$mptypes.Container$memberApply, Type$MemberInterface:_t})
    :AppliedMemberClass(_t.t, {Container$MemberClass:$mptypes.Container$memberApply, Type$MemberClass:_t, Arguments$MemberClass:$mptypes.Arguments$memberApply});
  if (_t.a)rv.$targs=_t.a;
  return rv;
};ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.memberApply.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','memberApply']};};
defineAttr(ClassOrInterfaceDeclaration$meta$declaration.$$.prototype,'container',function(){
  if (this.$parent)return this.$parent;
  var mm=getrtmm$$(this.tipo);
  if (mm.$cont) {
    return typeLiteral$meta({Type$typeLiteral:mm.$cont});
  }
  return this.containingPackage;
},undefined,function(){return{mod:$CCMM$,$t:{t:'u',l:[{t:NestableDeclaration$meta$declaration},{t:Package$meta$declaration}]},d:['ceylon.language.meta.declaration.NestableDeclaration','$at','container']};});
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.annotatedMemberDeclarations=function($$$mptypes,list){
  if (list===undefined)list=this.memberDeclarations({Kind$memberDeclarations:$$$mptypes.Kind$annotatedMemberDeclarations});
  if (list.length) {
    var rv=[];
    for (var i=0; i < list.length; i++) {
      var mm = getrtmm$$(list[i].tipo);
      var anns = mm&&mm.$an;
      if (typeof(anns)==='function'){anns=anns();mm.$an=anns;}
      if (anns) for (var j=0; j<anns.length; j++) {
        if (isOfType(anns[j],$$$mptypes.Annotation$annotatedMemberDeclarations)) {
          rv.push(list[i]);
          break;
        }
      }
    }
    if (rv.length)return ArraySequence(rv,{Element$Iterable:$$$mptypes.Kind$annotatedMemberDeclarations});
  }
  return getEmpty();
};
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.annotatedMemberDeclarations.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind'}},$ps:[],$cont:ClassOrInterfaceDeclaration$meta$declarationl,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]},Annotation:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','annotatedMemberDeclarations']};};
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.annotatedDeclaredMemberDeclarations=function ($$$mptypes){
  return this.annotatedMemberDeclarations({Kind$annotatedMemberDeclarations:$$$mptypes.Kind$annotatedDeclaredMemberDeclarations,
    Annotation$annotatedMemberDeclarations:$$$mptypes.Annotation$annotatedDeclaredMemberDeclarations},
    this.memberDeclarations({Kind$memberDeclarations:$$$mptypes.Kind$annotatedDeclaredMemberDeclarations}));
};
ClassOrInterfaceDeclaration$meta$declaration.$$.prototype.annotatedDeclaredMemberDeclarations.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind'}},$ps:[],$cont:ClassOrInterfaceDeclaration$meta$declarationl,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]},Annotation:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassOrInterfaceDeclaration','$m','annotatedDeclaredMemberDeclarations']};};

function FunctionOrValueDeclaration$meta$declaration($$functionOrValueDeclaration){
    NestableDeclaration$meta$declaration($$functionOrValueDeclaration);
}
FunctionOrValueDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:NestableDeclaration$meta$declaration}],of:[{t:FunctionDeclaration$meta$declaration},{t:ValueDeclaration$meta$declaration}],$an:function(){return[doc(String$("A function or value declaration.",32)),shared()];},d:['ceylon.language.meta.declaration','FunctionOrValueDeclaration']};};
exports.FunctionOrValueDeclaration$meta$declaration=FunctionOrValueDeclaration$meta$declaration;
function $init$FunctionOrValueDeclaration$meta$declaration(){
    if(FunctionOrValueDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(FunctionOrValueDeclaration$meta$declaration,'ceylon.language.meta.declaration::FunctionOrValueDeclaration',$init$NestableDeclaration$meta$declaration());
        (function($$functionOrValueDeclaration){
            $$functionOrValueDeclaration.$prop$getParameter={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:FunctionOrValueDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this function or value is a parameter to a [[FunctionalDeclaration]].",77)),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionOrValueDeclaration','$at','parameter']};}};
            $$functionOrValueDeclaration.$prop$getDefaulted={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:FunctionOrValueDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this function or value is a parameter and has a default value.",70)),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionOrValueDeclaration','$at','defaulted']};}};
            $$functionOrValueDeclaration.$prop$getVariadic={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:FunctionOrValueDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this function or value is a parameter and is variadic (accepts a list of values).",89)),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionOrValueDeclaration','$at','variadic']};}};
        })(FunctionOrValueDeclaration$meta$declaration.$$.prototype);
    }
    return FunctionOrValueDeclaration$meta$declaration;
}
exports.$init$FunctionOrValueDeclaration$meta$declaration=$init$FunctionOrValueDeclaration$meta$declaration;
$init$FunctionOrValueDeclaration$meta$declaration();
function ValueDeclaration$meta$declaration($$valueDeclaration){
    FunctionOrValueDeclaration$meta$declaration($$valueDeclaration);
}
ValueDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:FunctionOrValueDeclaration$meta$declaration}],$an:function(){return[doc(String$("A value declaration.\n\n<a name=\"toplevel-sample\"></a>\n### Usage sample for toplevel value\n\nGetting a model requires applying type arguments to the\nvalue declaration with [[apply]] in order to be able to read that value. For example, here is how you would\nobtain a value model that you can read from a toplevel attribute declaration:\n\n    String foo = \"Hello\";\n    \n    void test(){\n        // We need to apply the the foo declaration in order to get the foo value model\n        Value<String> valueModel = `value foo`.apply<String>();\n        // This will print: Hello\n        print(valueModel.get());\n    }\n\n<a name=\"member-sample\"></a>\n### Usage sample for attributes\n\nFor attributes it is a bit longer, because attributes need to be applied the containing type, so you should \nuse [[memberApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared String foo => \"Hello\";\n    }\n\n    void test(){\n        // Apply the containing closed type `Outer` to the attribute declaration `Outer.foo`\n        Attribute<Outer,String> valueModel = `value Outer.foo`.memberApply<Outer,String>(`Outer`);\n        // We now have an Attribute, which needs to be applied to a containing instance in order to become a\n        // readable value:\n        Value<String> boundValueModel = valueModel(Outer());\n        // This will print: Hello\n        print(boundValueModel.get());\n    }\n",1395)),shared()];},d:['ceylon.language.meta.declaration','ValueDeclaration']};};
exports.ValueDeclaration$meta$declaration=ValueDeclaration$meta$declaration;
function $init$ValueDeclaration$meta$declaration(){
    if(ValueDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(ValueDeclaration$meta$declaration,'ceylon.language.meta.declaration::ValueDeclaration',$init$FunctionOrValueDeclaration$meta$declaration());
        (function($$valueDeclaration){
            $$valueDeclaration.$prop$getVariable={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:ValueDeclaration$meta$declaration,$an:function(){return[doc(String$("True if this declaration is annotated with [[variable|ceylon.language::variable]].",82)),shared(),formal()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','variable']};}};
            $$valueDeclaration.$apply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Value$meta$model,a:{Set$Value:'Set$apply',Get$Value:'Get$apply'}},$ps:[],$cont:ValueDeclaration$meta$declaration,$tp:{Get$apply:{'def':{t:Anything}},Set$apply:{'def':{t:Nothing}}},$an:function(){return[doc("Applies this value declaration in order to obtain a value model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Get` or `Set` type arguments are not compatible with the actual result."),shared(),formal()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','apply']};}};$$valueDeclaration.memberApply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Attribute$meta$model,a:{Container$Attribute:'Container$memberApply',Set$Attribute:'Set$memberApply',Get$Attribute:'Get$memberApply'}},$ps:[{$nm:'containerType',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:'Container$memberApply'}},$an:function(){return[];}}],$cont:ValueDeclaration$meta$declaration,$tp:{Container$memberApply:{'def':{t:Nothing}},Get$memberApply:{'def':{t:Anything}},Set$memberApply:{'def':{t:Nothing}}},$an:function(){return[doc("Applies the given closed container type to this attribute declaration in order to obtain an attribute model. \nSee [this code sample](#member-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Container`, `Get` or `Set` type arguments are not compatible with the actual result."),shared(),formal()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','memberApply']};}};$$valueDeclaration.$get=function (){
                var $$valueDeclaration=this;
                return $$valueDeclaration.$apply({Set$apply:{t:Nothing},Get$apply:{t:Anything}}).$get();
            };
            $$valueDeclaration.$get.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[],$cont:ValueDeclaration$meta$declaration,$an:function(){return[doc(String$("Reads the current value of this toplevel value.",47)),shared(),$default()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','get']};};
            $$valueDeclaration.memberGet=function (container$979){
                var $$valueDeclaration=this;
                return $$valueDeclaration.memberApply(getNothingType$meta$model(),{Set$memberApply:{t:Nothing},Get$memberApply:{t:Anything},Container$memberApply:{t:Nothing}}).$bind(container$979).$get();
            };
            $$valueDeclaration.memberGet.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}}],$cont:ValueDeclaration$meta$declaration,$an:function(){return[doc(String$("Reads the current value of this attribute on the given container instance.",74)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta.model'),IncompatibleTypeException$meta$model),String$("If the specified container is not compatible with this attribute.",65)),shared(),$default()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','memberGet']};};
            $$valueDeclaration.set=function (newValue$980){
                var $$valueDeclaration=this;
                return $$valueDeclaration.$apply({Set$apply:{t:Nothing},Get$apply:{t:Anything}}).setIfAssignable(newValue$980);
            };
            $$valueDeclaration.set.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'newValue',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:ValueDeclaration$meta$declaration,$an:function(){return[doc(String$("Sets the current value of this toplevel value.",46)),shared(),$default()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','set']};};
            $$valueDeclaration.memberSet={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}},{$nm:'newValue',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:ValueDeclaration$meta$declaration,$an:function(){return[doc("Sets the current value of this attribute on the given container instance."),$throws("IncompatibleTypeException","If the specified container or new value type is not compatible with this attribute."),shared(),formal()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','memberSet']};}};$$valueDeclaration.$prop$getSetter={$crtmm$:function(){return{mod:$CCMM$,$t:{t:SetterDeclaration$meta$declaration},$cont:ValueDeclaration$meta$declaration,$an:function(){return[doc(String$("Returns the setter declaration for this variable.\n\nFor modelling purposes `variable` reference \nvalues have a SetterDeclaration even though there is no \nsuch setter explicit in the source code.",193)),shared(),formal()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','setter']};}};
        })(ValueDeclaration$meta$declaration.$$.prototype);
    }
    return ValueDeclaration$meta$declaration;
}
exports.$init$ValueDeclaration$meta$declaration=$init$ValueDeclaration$meta$declaration;
$init$ValueDeclaration$meta$declaration();
function ClassDeclaration$meta$declaration($$classDeclaration){
    ClassOrInterfaceDeclaration$meta$declaration($$classDeclaration);
    FunctionalDeclaration$meta$declaration($$classDeclaration);
}
ClassDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:ClassOrInterfaceDeclaration$meta$declaration},{t:FunctionalDeclaration$meta$declaration}],$an:function(){return[doc(String$("Class declaration.\n\n<a name=\"toplevel-sample\"></a>\n### Usage sample for toplevel classes\n\nBecause some classes have type parameters, getting a model requires applying type arguments to the\nclass declaration with [[classApply]] in order to be able to instantiate that class. For example, here is how you would\nobtain a class model that you can instantiate from a toplevel class declaration:\n\n    class Foo<T>(){\n        string => \"Hello, our T is: ``typeLiteral<T>()``\";\n    }\n    \n    void test(){\n        // We need to apply the Integer closed type to the Foo declaration in order to get the Foo<Integer> closed type\n        Class<Foo<Integer>,[]> classModel = `class Foo`.classApply<Foo<Integer>,[]>(`Integer`);\n        // This will print: Hello, our T is: ceylon.language::Integer\n        print(classModel());\n    }\n\n<a name=\"member-sample\"></a>\n### Usage sample for member classes\n\nFor member classes it is a bit longer, because member classes need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberClassApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared class Inner(){\n            string => \"Hello\";\n        }\n    }\n\n    void test(){\n        // apply the containing closed type `Outer` to the member class declaration `Outer.Inner`\n        MemberClass<Outer,Outer.Inner,[]> memberClassModel = `class Outer.Inner`.memberClassApply<Outer,Outer.Inner,[]>(`Outer`);\n        // We now have a MemberClass, which needs to be applied to a containing instance in order to become an\n        // invokable class model:\n        Class<Outer.Inner,[]> boundMemberClassModel = memberClassModel(Outer());\n        // This will print: Hello\n        print(boundMemberClassModel());\n    }\n",1763)),shared()];},d:['ceylon.language.meta.declaration','ClassDeclaration']};};
exports.ClassDeclaration$meta$declaration=ClassDeclaration$meta$declaration;
function $init$ClassDeclaration$meta$declaration(){
    if(ClassDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(ClassDeclaration$meta$declaration,'ceylon.language.meta.declaration::ClassDeclaration',$init$ClassOrInterfaceDeclaration$meta$declaration(),$init$FunctionalDeclaration$meta$declaration());
        (function($$classDeclaration){
            $$classDeclaration.$prop$getAbstract={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:ClassDeclaration$meta$declaration,$an:function(){return[doc(String$("True if the class has an [[abstract|ceylon.language::abstract]] annotation.",75)),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','abstract']};}};
            $$classDeclaration.$prop$getAnonymous={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:ClassDeclaration$meta$declaration,$an:function(){return[doc(String$("True if the class is an object class.",37)),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','anonymous']};}};
            $$classDeclaration.$prop$getFinal={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:ClassDeclaration$meta$declaration,$an:function(){return[doc(String$("True if the class has a [[final|ceylon.language::final]] annotation.",68)),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','final']};}};
            $$classDeclaration.classApply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Class$meta$model,a:{Type$Class:'Type$classApply',Arguments$Class:'Arguments$classApply'}},$ps:[{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassDeclaration$meta$declaration,$tp:{Type$classApply:{'def':{t:Anything}},Arguments$classApply:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Applies the given closed type arguments to this toplevel class declaration in order to obtain a class model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Type` or `Arguments` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$m','classApply']};}};$$classDeclaration.memberClassApply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:MemberClass$meta$model,a:{Type$MemberClass:'Type$memberClassApply',Container$MemberClass:'Container$memberClassApply',Arguments$MemberClass:'Arguments$memberClassApply'}},$ps:[{$nm:'containerType',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:'Container$memberClassApply'}},$an:function(){return[];}},{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:ClassDeclaration$meta$declaration,$tp:{Container$memberClassApply:{'def':{t:Nothing}},Type$memberClassApply:{'def':{t:Anything}},Arguments$memberClassApply:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Applies the given closed container type and type arguments to this member class declaration in order to obtain a member class model. \nSee [this code sample](#member-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Container`, `Type` or `Arguments` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result\'s container type or type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$m','memberClassApply']};}};$$classDeclaration.instantiate$defs$typeArguments=function(typeArguments$981,arguments$982){var $$classDeclaration=this;
            return getEmpty();};
            $$classDeclaration.instantiate=function (typeArguments$981,arguments$982){
                var $$classDeclaration=this;
                if(typeArguments$981===undefined){typeArguments$981=$$classDeclaration.instantiate$defs$typeArguments(typeArguments$981,arguments$982);}
                if(arguments$982===undefined){arguments$982=getEmpty();}
                return $$classDeclaration.classApply(typeArguments$981,{Arguments$classApply:{t:Nothing},Type$classApply:{t:Anything}}).$apply(arguments$982);
            };
            $$classDeclaration.instantiate.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'typeArguments',$mt:'prm',$def:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}},{$nm:'arguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Anything}}},$an:function(){return[];}}],$cont:ClassDeclaration$meta$declaration,$an:function(){return[doc(String$("Creates a new instance of this toplevel class, by applying the specified type arguments and value arguments.",108)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta.model'),IncompatibleTypeException$meta$model),String$("If the specified type or value arguments are not compatible with this toplevel class.",85)),shared(),$default()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$m','instantiate']};};
            $$classDeclaration.memberInstantiate$defs$typeArguments=function(container$983,typeArguments$984,arguments$985){var $$classDeclaration=this;
            return getEmpty();};
            $$classDeclaration.memberInstantiate=function (container$983,typeArguments$984,arguments$985){
                var $$classDeclaration=this;
                if(typeArguments$984===undefined){typeArguments$984=$$classDeclaration.memberInstantiate$defs$typeArguments(container$983,typeArguments$984,arguments$985);}
                if(arguments$985===undefined){arguments$985=getEmpty();}
                return $$classDeclaration.memberClassApply(getNothingType$meta$model(),typeArguments$984,{Arguments$memberClassApply:{t:Nothing},Type$memberClassApply:{t:Anything},Container$memberClassApply:{t:Nothing}}).$bind(container$983).$apply(arguments$985);
            };
            $$classDeclaration.memberInstantiate.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}},{$nm:'typeArguments',$mt:'prm',$def:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}},{$nm:'arguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Anything}}},$an:function(){return[];}}],$cont:ClassDeclaration$meta$declaration,$an:function(){return[doc(String$("Creates a new instance of this member class, by applying the specified type arguments and value arguments.",106)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta.model'),IncompatibleTypeException$meta$model),String$("If the specified container, type or value arguments are not compatible with this method.",88)),shared(),$default()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$m','memberInstantiate']};};
        })(ClassDeclaration$meta$declaration.$$.prototype);
    }
    return ClassDeclaration$meta$declaration;
}
exports.$init$ClassDeclaration$meta$declaration=$init$ClassDeclaration$meta$declaration;
$init$ClassDeclaration$meta$declaration();
function FunctionDeclaration$meta$declaration($$functionDeclaration){
    FunctionOrValueDeclaration$meta$declaration($$functionDeclaration);
    GenericDeclaration$meta$declaration($$functionDeclaration);
    FunctionalDeclaration$meta$declaration($$functionDeclaration);
}
FunctionDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:FunctionOrValueDeclaration$meta$declaration},{t:GenericDeclaration$meta$declaration},{t:FunctionalDeclaration$meta$declaration}],$an:function(){return[doc(String$("A function declaration.\n\n<a name=\"toplevel-sample\"></a>\n### Usage sample for toplevel function\n\nBecause some functions have type parameters, getting a model requires applying type arguments to the\nfunction declaration with [[apply]] in order to be able to invoke that function. For example, here is how you would\nobtain a function model that you can invoke from a toplevel function declaration:\n\n    String foo<T>(){\n        return \"Hello, our T is: ``typeLiteral<T>()``\";\n    }\n    \n    void test(){\n        // We need to apply the Integer closed type to the foo declaration in order to get the foo<Integer> function model\n        Function<String,[]> functionModel = `function foo`.apply<String,[]>(`Integer`);\n        // This will print: Hello, our T is: ceylon.language::Integer\n        print(functionModel());\n    }\n\n<a name=\"member-sample\"></a>\n### Usage sample for methods\n\nFor methods it is a bit longer, because methods need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared String hello() => \"Hello\";\n    }\n\n    void test(){\n        // apply the containing closed type `Outer` to the method declaration `Outer.hello`\n        Method<Outer,String,[]> methodModel = `function Outer.hello`.memberApply<Outer,String,[]>(`Outer`);\n        // We now have a Method, which needs to be applied to a containing instance in order to become an\n        // invokable function:\n        Function<String,[]> boundMethodModel = methodModel(Outer());\n        // This will print: Hello\n        print(boundMethodModel());\n    }\n",1656)),shared()];},d:['ceylon.language.meta.declaration','FunctionDeclaration']};};
exports.FunctionDeclaration$meta$declaration=FunctionDeclaration$meta$declaration;
function $init$FunctionDeclaration$meta$declaration(){
    if(FunctionDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(FunctionDeclaration$meta$declaration,'ceylon.language.meta.declaration::FunctionDeclaration',$init$FunctionOrValueDeclaration$meta$declaration(),$init$GenericDeclaration$meta$declaration(),$init$FunctionalDeclaration$meta$declaration());
        (function($$functionDeclaration){
            $$functionDeclaration.$apply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Function$meta$model,a:{Type$Function:'Return$apply',Arguments$Function:'Arguments$apply'}},$ps:[{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:FunctionDeclaration$meta$declaration,$tp:{Return$apply:{'def':{t:Anything}},Arguments$apply:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Applies the given closed type arguments to this function declaration in order to obtain a function model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Return` or `Arguments` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','apply']};}};$$functionDeclaration.memberApply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Method$meta$model,a:{Type$Method:'Return$memberApply',Container$Method:'Container$memberApply',Arguments$Method:'Arguments$memberApply'}},$ps:[{$nm:'containerType',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:'Container$memberApply'}},$an:function(){return[];}},{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:FunctionDeclaration$meta$declaration,$tp:{Container$memberApply:{'def':{t:Nothing}},Return$memberApply:{'def':{t:Anything}},Arguments$memberApply:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[doc("Applies the given closed container type and type arguments to this method declaration in order to obtain a method model. \nSee [this code sample](#member-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Container`, `Return` or `Arguments` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result\'s container type or type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','memberApply']};}};$$functionDeclaration.invoke$defs$typeArguments=function(typeArguments$986,arguments$987){var $$functionDeclaration=this;
            return getEmpty();};
            $$functionDeclaration.invoke=function (typeArguments$986,arguments$987){
                var $$functionDeclaration=this;
                if(typeArguments$986===undefined){typeArguments$986=$$functionDeclaration.invoke$defs$typeArguments(typeArguments$986,arguments$987);}
                if(arguments$987===undefined){arguments$987=getEmpty();}
                return $$functionDeclaration.$apply(typeArguments$986,{Arguments$apply:{t:Nothing},Return$apply:{t:Anything}}).$apply(arguments$987);
            };
            $$functionDeclaration.invoke.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'typeArguments',$mt:'prm',$def:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}},{$nm:'arguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Anything}}},$an:function(){return[];}}],$cont:FunctionDeclaration$meta$declaration,$an:function(){return[doc(String$("Invokes the underlying toplevel function, by applying the specified type arguments and value arguments.",103)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta.model'),IncompatibleTypeException$meta$model),String$("If the specified type or value arguments are not compatible with this toplevel function.",88)),shared(),$default()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','invoke']};};
            $$functionDeclaration.memberInvoke$defs$typeArguments=function(container$988,typeArguments$989,arguments$990){var $$functionDeclaration=this;
            return getEmpty();};
            $$functionDeclaration.memberInvoke=function (container$988,typeArguments$989,arguments$990){
                var $$functionDeclaration=this;
                if(typeArguments$989===undefined){typeArguments$989=$$functionDeclaration.memberInvoke$defs$typeArguments(container$988,typeArguments$989,arguments$990);}
                if(arguments$990===undefined){arguments$990=getEmpty();}
                return $$functionDeclaration.memberApply(getNothingType$meta$model(),typeArguments$989,{Arguments$memberApply:{t:Nothing},Return$memberApply:{t:Anything},Container$memberApply:{t:Nothing}}).$bind(container$988).$apply(arguments$990);
            };
            $$functionDeclaration.memberInvoke.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'container',$mt:'prm',$t:{t:$Object},$an:function(){return[];}},{$nm:'typeArguments',$mt:'prm',$def:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}},{$nm:'arguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Anything}}},$an:function(){return[];}}],$cont:FunctionDeclaration$meta$declaration,$an:function(){return[doc(String$("Invokes the underlying method, by applying the specified type arguments and value arguments.",92)),$throws($init$OpenClass()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language.meta.model'),IncompatibleTypeException$meta$model),String$("If the specified container, type or value arguments are not compatible with this method.",88)),shared(),$default()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','memberInvoke']};};
        })(FunctionDeclaration$meta$declaration.$$.prototype);
    }
    return FunctionDeclaration$meta$declaration;
}
exports.$init$FunctionDeclaration$meta$declaration=$init$FunctionDeclaration$meta$declaration;
$init$FunctionDeclaration$meta$declaration();
function InterfaceDeclaration$meta$declaration($$interfaceDeclaration){
    ClassOrInterfaceDeclaration$meta$declaration($$interfaceDeclaration);
}
InterfaceDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:ClassOrInterfaceDeclaration$meta$declaration}],$an:function(){return[doc(String$("An interface declaration.\n\n<a name=\"toplevel-sample\"></a>\n### Usage sample for toplevel interfaces\n\nBecause some interfaces have type parameters, getting a model requires applying type arguments to the\ninterface declaration with [[interfaceApply]] in order to be able to get a closed type. For example, here is how you would\nobtain an interface model from a toplevel interface declaration:\n\n    interface Foo<T> satisfies List<T> {\n    }\n    \n    void test(){\n        // We need to apply the Integer closed type to the Foo declaration in order to get the Foo<Integer> closed type\n        Interface<Foo<Integer>> interfaceModel = `interface Foo`.interfaceApply<Foo<Integer>>(`Integer`);\n        // This will print: ceylon.language::List<ceylon.language::Integer>\n        for(satisfiedType in interfaceModel.satisfiedTypes){\n            print(satisfiedType);\n        }\n    }\n\n<a name=\"member-sample\"></a>\n### Usage sample for member interfaces\n\nFor member interfaces it is a bit longer, because member interfaces need to be applied not only their type arguments but also\nthe containing type, so you should use [[memberInterfaceApply]] and start by giving the containing closed type:\n\n    class Outer(){\n        shared interface Inner<T> satisfies List<T> {\n        }\n    }\n\n    void test(){\n        // apply the containing closed type `Outer` to the member class declaration `Outer.Inner`\n        MemberInterface<Outer,Outer.Inner<Integer>> memberInterfaceModel = `interface Outer.Inner`.memberInterfaceApply<Outer,Outer.Inner<Integer>>(`Outer`, `Integer`);\n        // This will print: ceylon.language::List<ceylon.language::Integer>\n        for(satisfiedType in memberInterfaceModel.satisfiedTypes){\n            print(satisfiedType);\n        }\n    }\n",1749)),shared()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration']};};
exports.InterfaceDeclaration$meta$declaration=InterfaceDeclaration$meta$declaration;
function $init$InterfaceDeclaration$meta$declaration(){
    if(InterfaceDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(InterfaceDeclaration$meta$declaration,'ceylon.language.meta.declaration::InterfaceDeclaration',$init$ClassOrInterfaceDeclaration$meta$declaration());
        (function($$interfaceDeclaration){
            $$interfaceDeclaration.interfaceApply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Interface$meta$model,a:{Type$Interface:'Type$interfaceApply'}},$ps:[{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:InterfaceDeclaration$meta$declaration,$tp:{Type$interfaceApply:{'def':{t:Anything}}},$an:function(){return[doc("Applies the given closed type arguments to this toplevel interface declaration in order to obtain an interface model. \nSee [this code sample](#toplevel-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Type` type argument is not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed type argument values are not compatible with the actual result\'s type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$m','interfaceApply']};}};$$interfaceDeclaration.memberInterfaceApply={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:MemberInterface$meta$model,a:{Type$MemberInterface:'Type$memberInterfaceApply',Container$MemberInterface:'Container$memberInterfaceApply'}},$ps:[{$nm:'containerType',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:'Container$memberInterfaceApply'}},$an:function(){return[];}},{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:InterfaceDeclaration$meta$declaration,$tp:{Container$memberInterfaceApply:{'def':{t:Nothing}},Type$memberInterfaceApply:{'def':{t:Anything}}},$an:function(){return[doc("Applies the given closed container type and type arguments to this member interface declaration in order to obtain a member interface model. \nSee [this code sample](#member-sample) for an example on how to use this."),$throws("IncompatibleTypeException","If the specified `Container` or `Type` type arguments are not compatible with the actual result."),$throws("TypeApplicationException","If the specified closed container type or type argument values are not compatible with the actual result\'s container type or type parameters."),shared(),formal()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$m','memberInterfaceApply']};}};
        })(InterfaceDeclaration$meta$declaration.$$.prototype);
    }
    return InterfaceDeclaration$meta$declaration;
}
exports.$init$InterfaceDeclaration$meta$declaration=$init$InterfaceDeclaration$meta$declaration;
$init$InterfaceDeclaration$meta$declaration();
function Module$meta$declaration($$module){
    Identifiable($$module);
    AnnotatedDeclaration$meta$declaration($$module);
}
Module$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:Identifiable},{t:AnnotatedDeclaration$meta$declaration}],$an:function(){return[doc(String$("A `module` declaration\nfrom a `module.ceylon` compilation unit",62)),shared()];},d:['ceylon.language.meta.declaration','Module']};};
exports.Module$meta$declaration=Module$meta$declaration;
function $init$Module$meta$declaration(){
    if(Module$meta$declaration.$$===undefined){
        initTypeProtoI(Module$meta$declaration,'ceylon.language.meta.declaration::Module',$init$Identifiable(),$init$AnnotatedDeclaration$meta$declaration());
        (function($$module){
            $$module.$prop$getVersion={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Module$meta$declaration,$an:function(){return[doc(String$("The module version.",19)),shared(),formal()];},d:['ceylon.language.meta.declaration','Module','$at','version']};}};
            $$module.$prop$getMembers={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Package$meta$declaration}}},$cont:Module$meta$declaration,$an:function(){return[doc(String$("The package members of the module.",34)),shared(),formal()];},d:['ceylon.language.meta.declaration','Module','$at','members']};}};
            $$module.$prop$getDependencies={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Import$meta$declaration}}},$cont:Module$meta$declaration,$an:function(){return[doc(String$("The modules this module depends on.",35)),shared(),formal()];},d:['ceylon.language.meta.declaration','Module','$at','dependencies']};}};
            $$module.findPackage={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Package$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Module$meta$declaration,$an:function(){return[doc("Finds a package by name. Returns `null` if not found."),shared(),formal()];},d:['ceylon.language.meta.declaration','Module','$m','findPackage']};}};$$module.findImportedPackage={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Package$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Module$meta$declaration,$an:function(){return[doc("Finds a package by name in this module or in its dependencies. Note that all transitive `shared`\ndependencies are searched. Returns `null` if not found."),shared(),formal()];},d:['ceylon.language.meta.declaration','Module','$m','findImportedPackage']};}};$$module.resourceByPath={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:Resource}]},$ps:[{$nm:'path',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Module$meta$declaration,$an:function(){return[doc("Searches for a resource by its path inside the module."),shared(),formal()];},d:['ceylon.language.meta.declaration','Module','$m','resourceByPath']};}};
        })(Module$meta$declaration.$$.prototype);
    }
    return Module$meta$declaration;
}
exports.$init$Module$meta$declaration=$init$Module$meta$declaration;
$init$Module$meta$declaration();
function Import$meta$declaration($$import){
    Identifiable($$import);
    Annotated($$import);
}
Import$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:Identifiable},{t:Annotated}],$an:function(){return[doc(String$("Model of an `import` declaration \nwithin a module declaration.",62)),shared()];},d:['ceylon.language.meta.declaration','Import']};};
exports.Import$meta$declaration=Import$meta$declaration;
function $init$Import$meta$declaration(){
    if(Import$meta$declaration.$$===undefined){
        initTypeProtoI(Import$meta$declaration,'ceylon.language.meta.declaration::Import',$init$Identifiable(),$init$Annotated());
        (function($$import){
            $$import.$prop$getName={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Import$meta$declaration,$an:function(){return[doc(String$("The name of the imported module.",32)),shared(),formal()];},d:['ceylon.language.meta.declaration','Import','$at','name']};}};
            $$import.$prop$getVersion={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:Import$meta$declaration,$an:function(){return[doc(String$("The compile-time version of the imported module.",48)),shared(),formal()];},d:['ceylon.language.meta.declaration','Import','$at','version']};}};
            $$import.$prop$getShared={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Import$meta$declaration,$an:function(){return[doc(String$("True if this imported module is shared.",39)),shared(),formal()];},d:['ceylon.language.meta.declaration','Import','$at','shared']};}};
            $$import.$prop$getOptional={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Import$meta$declaration,$an:function(){return[doc(String$("True if this imported module is optional.",41)),shared(),formal()];},d:['ceylon.language.meta.declaration','Import','$at','optional']};}};
            $$import.$prop$getContainer={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:Import$meta$declaration,$an:function(){return[doc(String$("The containing module.",22)),shared(),formal()];},d:['ceylon.language.meta.declaration','Import','$at','container']};}};
        })(Import$meta$declaration.$$.prototype);
    }
    return Import$meta$declaration;
}
exports.$init$Import$meta$declaration=$init$Import$meta$declaration;
$init$Import$meta$declaration();
function Package$meta$declaration($$package){
    Identifiable($$package);
    AnnotatedDeclaration$meta$declaration($$package);
}
Package$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:Identifiable},{t:AnnotatedDeclaration$meta$declaration}],$an:function(){return[doc(String$("Model of a `package` declaration \nfrom a `package.ceylon` compilation unit",74)),shared()];},d:['ceylon.language.meta.declaration','Package']};};
exports.Package$meta$declaration=Package$meta$declaration;
function $init$Package$meta$declaration(){
    if(Package$meta$declaration.$$===undefined){
        initTypeProtoI(Package$meta$declaration,'ceylon.language.meta.declaration::Package',$init$Identifiable(),$init$AnnotatedDeclaration$meta$declaration());
        (function($$package){
            $$package.$prop$getContainer={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:Package$meta$declaration,$an:function(){return[doc(String$("The module this package belongs to.",35)),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$at','container']};}};
            $$package.$prop$getShared={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:Package$meta$declaration,$an:function(){return[doc(String$("True if this package is shared.",31)),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$at','shared']};}};
            $$package.members={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind$members'}},$ps:[],$cont:Package$meta$declaration,$tp:{Kind$members:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[doc("Returns the list of member declarations that satisfy the given `Kind` type argument."),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$m','members']};}};$$package.annotatedMembers={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind$annotatedMembers'}},$ps:[],$cont:Package$meta$declaration,$tp:{Kind$annotatedMembers:{'satisfies':[{t:NestableDeclaration$meta$declaration}]},Annotation$annotatedMembers:{}},$an:function(){return[doc("Returns the list of member declarations that satisfy the given `Kind` type argument and\nthat are annotated with the given `Annotation` type argument"),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$m','annotatedMembers']};}};$$package.getMember={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},'Kind$getMember']},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Package$meta$declaration,$tp:{Kind$getMember:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[doc("Looks up a member declaration by name, provided it satisfies the given `Kind` type\nargument. Returns `null` if no such member matches."),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$m','getMember']};}};$$package.getValue={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:ValueDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Package$meta$declaration,$an:function(){return[doc("The value with the given name. Returns `null` if not found."),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$m','getValue']};}};$$package.getClassOrInterface={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:ClassOrInterfaceDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Package$meta$declaration,$an:function(){return[doc("The class or interface with the given name. Returns `null` if not found."),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$m','getClassOrInterface']};}};$$package.getFunction={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:FunctionDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Package$meta$declaration,$an:function(){return[doc("The function with the given name. Returns `null` if not found."),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$m','getFunction']};}};$$package.getAlias={$fml:1,$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:AliasDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:Package$meta$declaration,$an:function(){return[doc("The type alias with the given name. Returns `null` if not found."),shared(),formal()];},d:['ceylon.language.meta.declaration','Package','$m','getAlias']};}};
        })(Package$meta$declaration.$$.prototype);
    }
    return Package$meta$declaration;
}
exports.$init$Package$meta$declaration=$init$Package$meta$declaration;
$init$Package$meta$declaration();
function OpenIntersection$meta$declaration($$openIntersection){
    OpenType$meta$declaration($$openIntersection);
}
OpenIntersection$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:OpenType$meta$declaration}],$an:function(){return[doc(String$("An open intersection type.",26)),shared()];},d:['ceylon.language.meta.declaration','OpenIntersection']};};
exports.OpenIntersection$meta$declaration=OpenIntersection$meta$declaration;
function $init$OpenIntersection$meta$declaration(){
    if(OpenIntersection$meta$declaration.$$===undefined){
        initTypeProtoI(OpenIntersection$meta$declaration,'ceylon.language.meta.declaration::OpenIntersection',$init$OpenType$meta$declaration());
        (function($$openIntersection){
            $$openIntersection.$prop$getSatisfiedTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:OpenIntersection$meta$declaration,$an:function(){return[doc(String$("This intersection\'s list of satisfied open types.",49)),shared(),formal()];},d:['ceylon.language.meta.declaration','OpenIntersection','$at','satisfiedTypes']};}};
        })(OpenIntersection$meta$declaration.$$.prototype);
    }
    return OpenIntersection$meta$declaration;
}
exports.$init$OpenIntersection$meta$declaration=$init$OpenIntersection$meta$declaration;
$init$OpenIntersection$meta$declaration();
function OpenClassOrInterfaceType$meta$declaration($$openClassOrInterfaceType){
    OpenType$meta$declaration($$openClassOrInterfaceType);
}
OpenClassOrInterfaceType$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:OpenType$meta$declaration}],of:[{t:OpenClassType$meta$declaration},{t:OpenInterfaceType$meta$declaration}],$an:function(){return[doc(String$("An open class or interface, with open type arguments.\n\nFor example, `List<T>` is an open interface type, with a type argument which is the\n[[OpenTypeVariable]] `T`.",164)),shared()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType']};};
exports.OpenClassOrInterfaceType$meta$declaration=OpenClassOrInterfaceType$meta$declaration;
function $init$OpenClassOrInterfaceType$meta$declaration(){
    if(OpenClassOrInterfaceType$meta$declaration.$$===undefined){
        initTypeProtoI(OpenClassOrInterfaceType$meta$declaration,'ceylon.language.meta.declaration::OpenClassOrInterfaceType',$init$OpenType$meta$declaration());
        (function($$openClassOrInterfaceType){
            $$openClassOrInterfaceType.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:ClassOrInterfaceDeclaration$meta$declaration},$cont:OpenClassOrInterfaceType$meta$declaration,$an:function(){return[doc(String$("The class or interface declaration for this open type.",54)),shared(),formal()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','declaration']};}};
            $$openClassOrInterfaceType.$prop$getExtendedType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:OpenClassType$meta$declaration}]},$cont:OpenClassOrInterfaceType$meta$declaration,$an:function(){return[doc(String$("The extended type of this open type.",36)),shared(),formal()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','extendedType']};}};
            $$openClassOrInterfaceType.$prop$getSatisfiedTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenInterfaceType$meta$declaration}}},$cont:OpenClassOrInterfaceType$meta$declaration,$an:function(){return[doc(String$("The satisfied types of this open type.",38)),shared(),formal()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','satisfiedTypes']};}};
            $$openClassOrInterfaceType.$prop$getTypeArguments={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Map,a:{Item$Map:{t:OpenType$meta$declaration},Key$Map:{t:TypeParameter$meta$declaration}}},$cont:OpenClassOrInterfaceType$meta$declaration,$an:function(){return[doc(String$("The set of open type arguments.",31)),shared(),formal()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','typeArguments']};}};
        })(OpenClassOrInterfaceType$meta$declaration.$$.prototype);
    }
    return OpenClassOrInterfaceType$meta$declaration;
}
exports.$init$OpenClassOrInterfaceType$meta$declaration=$init$OpenClassOrInterfaceType$meta$declaration;
$init$OpenClassOrInterfaceType$meta$declaration();
defineAttr(OpenClassOrInterfaceType$meta$declaration.$$.prototype,'typeArguments',function(){
  var tps=this.declaration.tipo.$crtmm$.$tp;
  if (tps) {
    var rtps = this.declaration._targs;
    var targs={};
    for (var tpn in tps) {
      var rtp=rtps&&rtps[tpn];
      var otp=OpenTypeParam(this.declaration.tipo,tpn);
      var targ;
      if (rtp===undefined) {
        targ = OpenTvar(otp);
      } else if (typeof(rtp)==='string') {
        targ = OpenTvar(OpenTypeParam(this.declaration.tipo,rtp));
      } else {
        if (rtp.t==='i'||rtp.t==='u') {
          //resolve case types
          var nrtp={t:rtp.t,l:[]};
          for (var i=0;i<rtp.l.length;i++) {
            var _ct=rtp.l[i];
            nrtp.l.push(typeof(_ct)==='string'?OpenTvar(OpenTypeParam(this.declaration.tipo,_ct)):_ct);
          }
          rtp=nrtp;
        }
        targ = _openTypeFromTarg(rtp);
      }
      targs[otp]=targ;
    }
    return Mapita(targs,{K$Mapita:{t:TypeParameter$meta$declaration},V$Mapita:{t:OpenType$meta$declaration}});
  }
  return getEmpty();
},undefined,function(){return{mod:$CCMM$,$t:{t:Map,a:{Key:{t:TypeParameter$meta$declaration},Item:{t:OpenType$meta$declaration}}},$cont:OpenClassOrInterfaceType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','typeArguments']};});
defineAttr(OpenClassOrInterfaceType$meta$declaration.$$.prototype,'extendedType',function(){
  return this.declaration.extendedType;
},undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:OpenClassType$meta$declaration}]},$cont:OpenClassOrInterfaceType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','extendedType']};});
defineAttr(OpenClassOrInterfaceType$meta$declaration.$$.prototype,'declaration',function(){return this._decl;},undefined,function(){return{mod:$CCMM$,$t:{t:ClassDeclaration$meta$declaration},$cont:OpenClassOrInterfaceType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','declaration']};});
defineAttr(OpenClassOrInterfaceType$meta$declaration.$$.prototype,'satisfiedTypes',function(){
  return this.declaration.satisfiedTypes;
},undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenInterfaceType$meta$declaration}}},$cont:OpenClassOrInterfaceType$meta$declaration,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenClassOrInterfaceType','$at','satisfiedTypes']};});
defineAttr(OpenClassOrInterfaceType$meta$declaration.$$.prototype,'string',function(){
  var s=this.declaration.string;
  var tps=this.declaration.tipo.$crtmm$.$tp;
  if (tps) {
    var rtps=this.declaration._targs;
    s+="<";
    var first=true;
    for (var t in tps) {
      var rtp=rtps&&rtps[t];
      if (first)first=false;else s+=",";
      if (rtp===undefined) {
        s+=t;
      } else {
        s+=_openTypeFromTarg(rtp).string;
      }
    }
    s+=">";
  }
  return s;
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
function OpenClassType$meta$declaration($$openClassType){
    OpenClassOrInterfaceType$meta$declaration($$openClassType);
}
OpenClassType$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:OpenClassOrInterfaceType$meta$declaration}],$an:function(){return[doc(String$("An open class type.",19)),shared()];},d:['ceylon.language.meta.declaration','OpenClassType']};};
exports.OpenClassType$meta$declaration=OpenClassType$meta$declaration;
function $init$OpenClassType$meta$declaration(){
    if(OpenClassType$meta$declaration.$$===undefined){
        initTypeProtoI(OpenClassType$meta$declaration,'ceylon.language.meta.declaration::OpenClassType',$init$OpenClassOrInterfaceType$meta$declaration());
        (function($$openClassType){
            $$openClassType.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:ClassDeclaration$meta$declaration},$cont:OpenClassType$meta$declaration,$an:function(){return[doc(String$("This class declaration.",23)),shared(),actual(),formal()];},d:['ceylon.language.meta.declaration','OpenClassType','$at','declaration']};}};
        })(OpenClassType$meta$declaration.$$.prototype);
    }
    return OpenClassType$meta$declaration;
}
exports.$init$OpenClassType$meta$declaration=$init$OpenClassType$meta$declaration;
$init$OpenClassType$meta$declaration();
function OpenInterfaceType$meta$declaration($$openInterfaceType){
    OpenClassOrInterfaceType$meta$declaration($$openInterfaceType);
}
OpenInterfaceType$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:OpenClassOrInterfaceType$meta$declaration}],$an:function(){return[doc(String$("An open interface type.",23)),shared()];},d:['ceylon.language.meta.declaration','OpenInterfaceType']};};
exports.OpenInterfaceType$meta$declaration=OpenInterfaceType$meta$declaration;
function $init$OpenInterfaceType$meta$declaration(){
    if(OpenInterfaceType$meta$declaration.$$===undefined){
        initTypeProtoI(OpenInterfaceType$meta$declaration,'ceylon.language.meta.declaration::OpenInterfaceType',$init$OpenClassOrInterfaceType$meta$declaration());
        (function($$openInterfaceType){
            $$openInterfaceType.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:InterfaceDeclaration$meta$declaration},$cont:OpenInterfaceType$meta$declaration,$an:function(){return[doc(String$("This declaration\'s package container.",37)),shared(),actual(),formal()];},d:['ceylon.language.meta.declaration','OpenInterfaceType','$at','declaration']};}};
        })(OpenInterfaceType$meta$declaration.$$.prototype);
    }
    return OpenInterfaceType$meta$declaration;
}
exports.$init$OpenInterfaceType$meta$declaration=$init$OpenInterfaceType$meta$declaration;
$init$OpenInterfaceType$meta$declaration();
function OpenType$meta$declaration($$openType){
}
OpenType$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,of:[{t:nothingType$991$meta$declaration},{t:OpenClassOrInterfaceType$meta$declaration},{t:OpenTypeVariable$meta$declaration},{t:OpenUnion$meta$declaration},{t:OpenIntersection$meta$declaration}],$an:function(){return[doc(String$("An open type.\n\nAn open type is a type which may contain unbound type variables, such as `List<T>`.",98)),shared()];},d:['ceylon.language.meta.declaration','OpenType']};};
exports.OpenType$meta$declaration=OpenType$meta$declaration;
function $init$OpenType$meta$declaration(){
    if(OpenType$meta$declaration.$$===undefined){
        initTypeProtoI(OpenType$meta$declaration,'ceylon.language.meta.declaration::OpenType');
    }
    return OpenType$meta$declaration;
}
exports.$init$OpenType$meta$declaration=$init$OpenType$meta$declaration;
$init$OpenType$meta$declaration();
function OpenTypeVariable$meta$declaration($$openTypeVariable){
    OpenType$meta$declaration($$openTypeVariable);
}
OpenTypeVariable$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:OpenType$meta$declaration}],$an:function(){return[doc(String$("An open type variable.",22)),shared()];},d:['ceylon.language.meta.declaration','OpenTypeVariable']};};
exports.OpenTypeVariable$meta$declaration=OpenTypeVariable$meta$declaration;
function $init$OpenTypeVariable$meta$declaration(){
    if(OpenTypeVariable$meta$declaration.$$===undefined){
        initTypeProtoI(OpenTypeVariable$meta$declaration,'ceylon.language.meta.declaration::OpenTypeVariable',$init$OpenType$meta$declaration());
        (function($$openTypeVariable){
            $$openTypeVariable.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:TypeParameter$meta$declaration},$cont:OpenTypeVariable$meta$declaration,$an:function(){return[doc(String$("This type variable\'s type parameter declaration.",48)),shared(),formal()];},d:['ceylon.language.meta.declaration','OpenTypeVariable','$at','declaration']};}};
        })(OpenTypeVariable$meta$declaration.$$.prototype);
    }
    return OpenTypeVariable$meta$declaration;
}
exports.$init$OpenTypeVariable$meta$declaration=$init$OpenTypeVariable$meta$declaration;
$init$OpenTypeVariable$meta$declaration();
function OpenUnion$meta$declaration($$openUnion){
    OpenType$meta$declaration($$openUnion);
}
OpenUnion$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:OpenType$meta$declaration}],$an:function(){return[doc(String$("An open union type.",19)),shared()];},d:['ceylon.language.meta.declaration','OpenUnion']};};
exports.OpenUnion$meta$declaration=OpenUnion$meta$declaration;
function $init$OpenUnion$meta$declaration(){
    if(OpenUnion$meta$declaration.$$===undefined){
        initTypeProtoI(OpenUnion$meta$declaration,'ceylon.language.meta.declaration::OpenUnion',$init$OpenType$meta$declaration());
        (function($$openUnion){
            $$openUnion.$prop$getCaseTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:OpenUnion$meta$declaration,$an:function(){return[doc(String$("The list of case types for this open union type.",48)),shared(),formal()];},d:['ceylon.language.meta.declaration','OpenUnion','$at','caseTypes']};}};
        })(OpenUnion$meta$declaration.$$.prototype);
    }
    return OpenUnion$meta$declaration;
}
exports.$init$OpenUnion$meta$declaration=$init$OpenUnion$meta$declaration;
$init$OpenUnion$meta$declaration();
function SetterDeclaration$meta$declaration($$setterDeclaration){
    Annotated($$setterDeclaration);
}
SetterDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:Annotated}],$an:function(){return[doc(String$("A setter declaration for a variable `ValueDeclaration`.",55)),shared()];},d:['ceylon.language.meta.declaration','SetterDeclaration']};};
exports.SetterDeclaration$meta$declaration=SetterDeclaration$meta$declaration;
function $init$SetterDeclaration$meta$declaration(){
    if(SetterDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(SetterDeclaration$meta$declaration,'ceylon.language.meta.declaration::SetterDeclaration',$init$Annotated());
        (function($$setterDeclaration){
            $$setterDeclaration.$prop$getVariable={$crtmm$:function(){return{mod:$CCMM$,$t:{t:ValueDeclaration$meta$declaration},$cont:SetterDeclaration$meta$declaration,$an:function(){return[doc(String$("The variable value this setter is for.",38)),shared(),formal()];},d:['ceylon.language.meta.declaration','SetterDeclaration','$at','variable']};}};
        })(SetterDeclaration$meta$declaration.$$.prototype);
    }
    return SetterDeclaration$meta$declaration;
}
exports.$init$SetterDeclaration$meta$declaration=$init$SetterDeclaration$meta$declaration;
$init$SetterDeclaration$meta$declaration();
function TypeParameter$meta$declaration($$typeParameter){
    Declaration$meta$declaration($$typeParameter);
}
TypeParameter$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:Declaration$meta$declaration}],$an:function(){return[doc(String$("A type parameter declaration.",29)),shared()];},d:['ceylon.language.meta.declaration','TypeParameter']};};
exports.TypeParameter$meta$declaration=TypeParameter$meta$declaration;
function $init$TypeParameter$meta$declaration(){
    if(TypeParameter$meta$declaration.$$===undefined){
        initTypeProtoI(TypeParameter$meta$declaration,'ceylon.language.meta.declaration::TypeParameter',$init$Declaration$meta$declaration());
        (function($$typeParameter){
            $$typeParameter.$prop$getContainer={$crtmm$:function(){return{mod:$CCMM$,$t:{t:NestableDeclaration$meta$declaration},$cont:TypeParameter$meta$declaration,$an:function(){return[doc(String$("The declaration that declared this type parameter. This is either a [[ClassOrInterfaceDeclaration]] or a\n[[FunctionDeclaration]].",129)),shared(),formal()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','container']};}};
            $$typeParameter.$prop$getDefaulted={$crtmm$:function(){return{mod:$CCMM$,$t:{t:$Boolean},$cont:TypeParameter$meta$declaration,$an:function(){return[doc(String$("True if this type parameter has a default type argument and can be omitted.",75)),shared(),formal()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','defaulted']};}};
            $$typeParameter.$prop$getDefaultTypeArgument={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:OpenType$meta$declaration}]},$cont:TypeParameter$meta$declaration,$an:function(){return[doc(String$("This type parameter\'s default type argument, if it has one.",59)),shared(),formal()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','defaultTypeArgument']};}};
            $$typeParameter.$prop$getVariance={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Variance$meta$declaration},$cont:TypeParameter$meta$declaration,$an:function(){return[doc(String$("This type parameter\'s variance, as defined by `in` or `out` keywords.",69)),shared(),formal()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','variance']};}};
            $$typeParameter.$prop$getSatisfiedTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenType$meta$declaration}}},$cont:TypeParameter$meta$declaration,$an:function(){return[doc(String$("The `satisfies` upper bounds for this type parameter.",53)),shared(),formal()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','satisfiedTypes']};}};
            $$typeParameter.$prop$getCaseTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenType$meta$declaration}}},$cont:TypeParameter$meta$declaration,$an:function(){return[doc(String$("The `of` enumerated bounds for this type parameter.",51)),shared(),formal()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','caseTypes']};}};
        })(TypeParameter$meta$declaration.$$.prototype);
    }
    return TypeParameter$meta$declaration;
}
exports.$init$TypeParameter$meta$declaration=$init$TypeParameter$meta$declaration;
$init$TypeParameter$meta$declaration();
function TypedDeclaration$meta$declaration($$typedDeclaration){
}
TypedDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,$an:function(){return[doc(String$("Declaration which has an open type.",35)),shared()];},d:['ceylon.language.meta.declaration','TypedDeclaration']};};
exports.TypedDeclaration$meta$declaration=TypedDeclaration$meta$declaration;
function $init$TypedDeclaration$meta$declaration(){
    if(TypedDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(TypedDeclaration$meta$declaration,'ceylon.language.meta.declaration::TypedDeclaration');
        (function($$typedDeclaration){
            $$typedDeclaration.$prop$getOpenType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:TypedDeclaration$meta$declaration,$an:function(){return[doc(String$("The open type for this declaration. For example, the open type for `List<T> f<T>()` is `List<T>`.",97)),shared(),formal()];},d:['ceylon.language.meta.declaration','TypedDeclaration','$at','openType']};}};
        })(TypedDeclaration$meta$declaration.$$.prototype);
    }
    return TypedDeclaration$meta$declaration;
}
exports.$init$TypedDeclaration$meta$declaration=$init$TypedDeclaration$meta$declaration;
$init$TypedDeclaration$meta$declaration();
function nothingType$991$meta$declaration(){
    var $$nothingType=new nothingType$991$meta$declaration.$$;
    OpenType$meta$declaration($$nothingType);
    return $$nothingType;
};nothingType$991$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:OpenType$meta$declaration}],$an:function(){return[doc("The singleton open type for [[Nothing|ceylon.language::nothing]]."),shared()];},d:['ceylon.language.meta.declaration','nothingType']};};
function $init$nothingType$991$meta$declaration(){
    if(nothingType$991$meta$declaration.$$===undefined){
        initTypeProto(nothingType$991$meta$declaration,'ceylon.language.meta.declaration::nothingType',Basic,$init$OpenType$meta$declaration());
        (function($$nothingType){
            defineAttr($$nothingType,'string',function(){
                var $$nothingType=this;
                return String$("Nothing",7);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:nothingType$991$meta$declaration,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','nothingType','$at','string']};});
        })(nothingType$991$meta$declaration.$$.prototype);
    }
    return nothingType$991$meta$declaration;
}
exports.$init$nothingType$991$meta$declaration=$init$nothingType$991$meta$declaration;
$init$nothingType$991$meta$declaration();
var nothingType$992$meta$declaration;
function getNothingType$meta$declaration(){
    if(nothingType$992$meta$declaration===undefined){nothingType$992$meta$declaration=$init$nothingType$991$meta$declaration()();nothingType$992$meta$declaration.$crtmm$=getNothingType$meta$declaration.$crtmm$;}
    return nothingType$992$meta$declaration;
}
exports.getNothingType$meta$declaration=getNothingType$meta$declaration;
getNothingType$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,$t:{t:nothingType$991$meta$declaration},$an:function(){return[doc(String$("The singleton open type for [[Nothing|ceylon.language::nothing]].",65)),shared()];},d:['ceylon.language.meta.declaration','nothingType']};};
$prop$getNothingType$meta$declaration={get:getNothingType$meta$declaration,$crtmm$:getNothingType$meta$declaration.$crtmm$};
exports.$prop$getNothingType$meta$declaration=$prop$getNothingType$meta$declaration;
function AliasDeclaration$meta$declaration($$aliasDeclaration){
    NestableDeclaration$meta$declaration($$aliasDeclaration);
    GenericDeclaration$meta$declaration($$aliasDeclaration);
}
AliasDeclaration$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,satisfies:[{t:NestableDeclaration$meta$declaration},{t:GenericDeclaration$meta$declaration}],$an:function(){return[doc(String$("Type alias declaration. While type aliases are erased (substituted for what they alias is a better term) from every \ndeclaration that uses them during compile-time, the declaration of the type alias is still visible at run-time.",228)),shared()];},d:['ceylon.language.meta.declaration','AliasDeclaration']};};
exports.AliasDeclaration$meta$declaration=AliasDeclaration$meta$declaration;
function $init$AliasDeclaration$meta$declaration(){
    if(AliasDeclaration$meta$declaration.$$===undefined){
        initTypeProtoI(AliasDeclaration$meta$declaration,'ceylon.language.meta.declaration::AliasDeclaration',$init$NestableDeclaration$meta$declaration(),$init$GenericDeclaration$meta$declaration());
        (function($$aliasDeclaration){
            $$aliasDeclaration.$prop$getExtendedType={$crtmm$:function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:AliasDeclaration$meta$declaration,$an:function(){return[doc(String$("The open type that is substituted by this type alias.",53)),shared(),formal()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','extendedType']};}};
        })(AliasDeclaration$meta$declaration.$$.prototype);
    }
    return AliasDeclaration$meta$declaration;
}
exports.$init$AliasDeclaration$meta$declaration=$init$AliasDeclaration$meta$declaration;
$init$AliasDeclaration$meta$declaration();
function Variance$meta$declaration($$variance){
}
Variance$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,of:[{t:invariant$993$meta$declaration},{t:covariant$994$meta$declaration},{t:contravariant$995$meta$declaration}],$an:function(){return[doc(String$("Variance information.",21)),shared()];},d:['ceylon.language.meta.declaration','Variance']};};
exports.Variance$meta$declaration=Variance$meta$declaration;
function $init$Variance$meta$declaration(){
    if(Variance$meta$declaration.$$===undefined){
        initTypeProtoI(Variance$meta$declaration,'ceylon.language.meta.declaration::Variance');
    }
    return Variance$meta$declaration;
}
exports.$init$Variance$meta$declaration=$init$Variance$meta$declaration;
$init$Variance$meta$declaration();
function invariant$993$meta$declaration(){
    var $$invariant=new invariant$993$meta$declaration.$$;
    Variance$meta$declaration($$invariant);
    return $$invariant;
};invariant$993$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Variance$meta$declaration}],$an:function(){return[doc("Invariant means that neither subtype nor supertype can be accepted, the\ntype has to be exactly that which is declared."),shared()];},d:['ceylon.language.meta.declaration','invariant']};};
function $init$invariant$993$meta$declaration(){
    if(invariant$993$meta$declaration.$$===undefined){
        initTypeProto(invariant$993$meta$declaration,'ceylon.language.meta.declaration::invariant',Basic,$init$Variance$meta$declaration());
        (function($$invariant){
            defineAttr($$invariant,'string',function(){
                var $$invariant=this;
                return String$("Invariant",9);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:invariant$993$meta$declaration,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','invariant','$at','string']};});
        })(invariant$993$meta$declaration.$$.prototype);
    }
    return invariant$993$meta$declaration;
}
exports.$init$invariant$993$meta$declaration=$init$invariant$993$meta$declaration;
$init$invariant$993$meta$declaration();
var invariant$996$meta$declaration;
function getInvariant$meta$declaration(){
    if(invariant$996$meta$declaration===undefined){invariant$996$meta$declaration=$init$invariant$993$meta$declaration()();invariant$996$meta$declaration.$crtmm$=getInvariant$meta$declaration.$crtmm$;}
    return invariant$996$meta$declaration;
}
exports.getInvariant$meta$declaration=getInvariant$meta$declaration;
getInvariant$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,$t:{t:invariant$993$meta$declaration},$an:function(){return[doc(String$("Invariant means that neither subtype nor supertype can be accepted, the\ntype has to be exactly that which is declared.",118)),shared()];},d:['ceylon.language.meta.declaration','invariant']};};
$prop$getInvariant$meta$declaration={get:getInvariant$meta$declaration,$crtmm$:getInvariant$meta$declaration.$crtmm$};
exports.$prop$getInvariant$meta$declaration=$prop$getInvariant$meta$declaration;
function covariant$994$meta$declaration(){
    var $$covariant=new covariant$994$meta$declaration.$$;
    Variance$meta$declaration($$covariant);
    return $$covariant;
};covariant$994$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Variance$meta$declaration}],$an:function(){return[doc("Covariant means that subtypes of the given type may be returned."),shared()];},d:['ceylon.language.meta.declaration','covariant']};};
function $init$covariant$994$meta$declaration(){
    if(covariant$994$meta$declaration.$$===undefined){
        initTypeProto(covariant$994$meta$declaration,'ceylon.language.meta.declaration::covariant',Basic,$init$Variance$meta$declaration());
        (function($$covariant){
            defineAttr($$covariant,'string',function(){
                var $$covariant=this;
                return String$("Covariant",9);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:covariant$994$meta$declaration,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','covariant','$at','string']};});
        })(covariant$994$meta$declaration.$$.prototype);
    }
    return covariant$994$meta$declaration;
}
exports.$init$covariant$994$meta$declaration=$init$covariant$994$meta$declaration;
$init$covariant$994$meta$declaration();
var covariant$997$meta$declaration;
function getCovariant$meta$declaration(){
    if(covariant$997$meta$declaration===undefined){covariant$997$meta$declaration=$init$covariant$994$meta$declaration()();covariant$997$meta$declaration.$crtmm$=getCovariant$meta$declaration.$crtmm$;}
    return covariant$997$meta$declaration;
}
exports.getCovariant$meta$declaration=getCovariant$meta$declaration;
getCovariant$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,$t:{t:covariant$994$meta$declaration},$an:function(){return[doc(String$("Covariant means that subtypes of the given type may be returned.",64)),shared()];},d:['ceylon.language.meta.declaration','covariant']};};
$prop$getCovariant$meta$declaration={get:getCovariant$meta$declaration,$crtmm$:getCovariant$meta$declaration.$crtmm$};
exports.$prop$getCovariant$meta$declaration=$prop$getCovariant$meta$declaration;
function contravariant$995$meta$declaration(){
    var $$contravariant=new contravariant$995$meta$declaration.$$;
    Variance$meta$declaration($$contravariant);
    return $$contravariant;
};contravariant$995$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Variance$meta$declaration}],$an:function(){return[doc("Contravariant means that supertypes of the given type may be accepted."),shared()];},d:['ceylon.language.meta.declaration','contravariant']};};
function $init$contravariant$995$meta$declaration(){
    if(contravariant$995$meta$declaration.$$===undefined){
        initTypeProto(contravariant$995$meta$declaration,'ceylon.language.meta.declaration::contravariant',Basic,$init$Variance$meta$declaration());
        (function($$contravariant){
            defineAttr($$contravariant,'string',function(){
                var $$contravariant=this;
                return String$("Contravariant",13);
            },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:contravariant$995$meta$declaration,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','contravariant','$at','string']};});
        })(contravariant$995$meta$declaration.$$.prototype);
    }
    return contravariant$995$meta$declaration;
}
exports.$init$contravariant$995$meta$declaration=$init$contravariant$995$meta$declaration;
$init$contravariant$995$meta$declaration();
var contravariant$998$meta$declaration;
function getContravariant$meta$declaration(){
    if(contravariant$998$meta$declaration===undefined){contravariant$998$meta$declaration=$init$contravariant$995$meta$declaration()();contravariant$998$meta$declaration.$crtmm$=getContravariant$meta$declaration.$crtmm$;}
    return contravariant$998$meta$declaration;
}
exports.getContravariant$meta$declaration=getContravariant$meta$declaration;
getContravariant$meta$declaration.$crtmm$=function(){return{mod:$CCMM$,$t:{t:contravariant$995$meta$declaration},$an:function(){return[doc(String$("Contravariant means that supertypes of the given type may be accepted.",70)),shared()];},d:['ceylon.language.meta.declaration','contravariant']};};
$prop$getContravariant$meta$declaration={get:getContravariant$meta$declaration,$crtmm$:getContravariant$meta$declaration.$crtmm$};
exports.$prop$getContravariant$meta$declaration=$prop$getContravariant$meta$declaration;
function AnnotationAnnotation($$annotationAnnotation){
    $init$AnnotationAnnotation();
    if($$annotationAnnotation===undefined)$$annotationAnnotation=new AnnotationAnnotation.$$;
    $$annotationAnnotation.$$targs$$={Value$OptionalAnnotation:{t:AnnotationAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:AnnotationAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}},$$annotationAnnotation);
    add_type_arg($$annotationAnnotation,'Value$OptionalAnnotation',{t:AnnotationAnnotation});
    return $$annotationAnnotation;
}
AnnotationAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:AnnotationAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:ClassDeclaration$meta$declaration},{t:FunctionDeclaration$meta$declaration}]}}}],$an:function(){return[doc(String$("The annotation class for [[annotation]].",40)),shared(),$final(),annotation()];},d:['ceylon.language','AnnotationAnnotation']};};
exports.AnnotationAnnotation=AnnotationAnnotation;
function $init$AnnotationAnnotation(){
    if(AnnotationAnnotation.$$===undefined){
        initTypeProto(AnnotationAnnotation,'ceylon.language::AnnotationAnnotation',Basic,$init$OptionalAnnotation());
    }
    return AnnotationAnnotation;
}
exports.$init$AnnotationAnnotation=$init$AnnotationAnnotation;
$init$AnnotationAnnotation();
var annotation=function (){
    return AnnotationAnnotation();
};
annotation.$crtmm$=function(){return{mod:$CCMM$,$t:{t:AnnotationAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a class as an *annotation class*, or a \ntop-level function as an *annotation constructor*.",109)),see([$init$OpenInterface()(getModules$meta().find('ceylon.language','1.0.0').findPackage('ceylon.language'),Annotation)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:InterfaceDeclaration$meta$declaration}})),shared(),annotation()];},d:['ceylon.language','annotation']};};
exports.annotation=annotation;
function SharedAnnotation($$sharedAnnotation){
    $init$SharedAnnotation();
    if($$sharedAnnotation===undefined)$$sharedAnnotation=new SharedAnnotation.$$;
    $$sharedAnnotation.$$targs$$={Value$OptionalAnnotation:{t:SharedAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration},{t:Package$meta$declaration},{t:Import$meta$declaration}]}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:SharedAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration},{t:Package$meta$declaration},{t:Import$meta$declaration}]}},$$sharedAnnotation);
    add_type_arg($$sharedAnnotation,'Value$OptionalAnnotation',{t:SharedAnnotation});
    return $$sharedAnnotation;
}
SharedAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:SharedAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration},{t:Package$meta$declaration},{t:Import$meta$declaration}]}}}],$an:function(){return[doc(String$("The annotation class for [[shared]].",36)),shared(),$final(),annotation()];},d:['ceylon.language','SharedAnnotation']};};
exports.SharedAnnotation=SharedAnnotation;
function $init$SharedAnnotation(){
    if(SharedAnnotation.$$===undefined){
        initTypeProto(SharedAnnotation,'ceylon.language::SharedAnnotation',Basic,$init$OptionalAnnotation());
    }
    return SharedAnnotation;
}
exports.$init$SharedAnnotation=$init$SharedAnnotation;
$init$SharedAnnotation();
var shared=function (){
    return SharedAnnotation();
};
shared.$crtmm$=function(){return{mod:$CCMM$,$t:{t:SharedAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a type or member as shared. A `shared` \nmember is visible outside the block of code in which it is \ndeclared.",128)),shared(),annotation()];},d:['ceylon.language','shared']};};
exports.shared=shared;
function VariableAnnotation($$variableAnnotation){
    $init$VariableAnnotation();
    if($$variableAnnotation===undefined)$$variableAnnotation=new VariableAnnotation.$$;
    $$variableAnnotation.$$targs$$={Value$OptionalAnnotation:{t:VariableAnnotation},ProgramElement$OptionalAnnotation:{t:ValueDeclaration$meta$declaration}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:VariableAnnotation},ProgramElement$OptionalAnnotation:{t:ValueDeclaration$meta$declaration}},$$variableAnnotation);
    add_type_arg($$variableAnnotation,'Value$OptionalAnnotation',{t:VariableAnnotation});
    add_type_arg($$variableAnnotation,'ProgramElement$OptionalAnnotation',{t:ValueDeclaration$meta$declaration});
    return $$variableAnnotation;
}
VariableAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:VariableAnnotation},ProgramElement$OptionalAnnotation:{t:ValueDeclaration$meta$declaration}}}],$an:function(){return[doc(String$("The annotation class for [[variable]].",38)),shared(),$final(),annotation()];},d:['ceylon.language','VariableAnnotation']};};
exports.VariableAnnotation=VariableAnnotation;
function $init$VariableAnnotation(){
    if(VariableAnnotation.$$===undefined){
        initTypeProto(VariableAnnotation,'ceylon.language::VariableAnnotation',Basic,$init$OptionalAnnotation());
    }
    return VariableAnnotation;
}
exports.$init$VariableAnnotation=$init$VariableAnnotation;
$init$VariableAnnotation();
var variable=function (){
    return VariableAnnotation();
};
variable.$crtmm$=function(){return{mod:$CCMM$,$t:{t:VariableAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark an value as variable. A `variable` value \nmay be assigned multiple times.",92)),shared(),annotation()];},d:['ceylon.language','variable']};};
exports.variable=variable;
function AbstractAnnotation($$abstractAnnotation){
    $init$AbstractAnnotation();
    if($$abstractAnnotation===undefined)$$abstractAnnotation=new AbstractAnnotation.$$;
    $$abstractAnnotation.$$targs$$={Value$OptionalAnnotation:{t:AbstractAnnotation},ProgramElement$OptionalAnnotation:{t:ClassDeclaration$meta$declaration}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:AbstractAnnotation},ProgramElement$OptionalAnnotation:{t:ClassDeclaration$meta$declaration}},$$abstractAnnotation);
    add_type_arg($$abstractAnnotation,'Value$OptionalAnnotation',{t:AbstractAnnotation});
    add_type_arg($$abstractAnnotation,'ProgramElement$OptionalAnnotation',{t:ClassDeclaration$meta$declaration});
    return $$abstractAnnotation;
}
AbstractAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:AbstractAnnotation},ProgramElement$OptionalAnnotation:{t:ClassDeclaration$meta$declaration}}}],$an:function(){return[doc(String$("The annotation class for [[abstract]].",38)),shared(),$final(),annotation()];},d:['ceylon.language','AbstractAnnotation']};};
exports.AbstractAnnotation=AbstractAnnotation;
function $init$AbstractAnnotation(){
    if(AbstractAnnotation.$$===undefined){
        initTypeProto(AbstractAnnotation,'ceylon.language::AbstractAnnotation',Basic,$init$OptionalAnnotation());
    }
    return AbstractAnnotation;
}
exports.$init$AbstractAnnotation=$init$AbstractAnnotation;
$init$AbstractAnnotation();
var abstract=function (){
    return AbstractAnnotation();
};
abstract.$crtmm$=function(){return{mod:$CCMM$,$t:{t:AbstractAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a class as abstract. An `abstract` class \nmay not be directly instantiated. An `abstract` class may \nhave enumerated cases.",142)),shared(),annotation()];},d:['ceylon.language','abstract']};};
exports.abstract=abstract;
function FinalAnnotation($$finalAnnotation){
    $init$FinalAnnotation();
    if($$finalAnnotation===undefined)$$finalAnnotation=new FinalAnnotation.$$;
    $$finalAnnotation.$$targs$$={Value$OptionalAnnotation:{t:FinalAnnotation},ProgramElement$OptionalAnnotation:{t:ClassDeclaration$meta$declaration}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:FinalAnnotation},ProgramElement$OptionalAnnotation:{t:ClassDeclaration$meta$declaration}},$$finalAnnotation);
    add_type_arg($$finalAnnotation,'Value$OptionalAnnotation',{t:FinalAnnotation});
    add_type_arg($$finalAnnotation,'ProgramElement$OptionalAnnotation',{t:ClassDeclaration$meta$declaration});
    return $$finalAnnotation;
}
FinalAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:FinalAnnotation},ProgramElement$OptionalAnnotation:{t:ClassDeclaration$meta$declaration}}}],$an:function(){return[doc(String$("The annotation class for [[final]].",35)),shared(),$final(),annotation()];},d:['ceylon.language','FinalAnnotation']};};
exports.FinalAnnotation=FinalAnnotation;
function $init$FinalAnnotation(){
    if(FinalAnnotation.$$===undefined){
        initTypeProto(FinalAnnotation,'ceylon.language::FinalAnnotation',Basic,$init$OptionalAnnotation());
    }
    return FinalAnnotation;
}
exports.$init$FinalAnnotation=$init$FinalAnnotation;
$init$FinalAnnotation();
var $final=function (){
    return FinalAnnotation();
};
$final.$crtmm$=function(){return{mod:$CCMM$,$t:{t:FinalAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a class as final. A `final` class may \nnot be extended. Marking a class as final affects disjoint\ntype analysis.",131)),shared(),annotation()];},d:['ceylon.language','final']};};
exports.$final=$final;
function ActualAnnotation($$actualAnnotation){
    $init$ActualAnnotation();
    if($$actualAnnotation===undefined)$$actualAnnotation=new ActualAnnotation.$$;
    $$actualAnnotation.$$targs$$={Value$OptionalAnnotation:{t:ActualAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:ActualAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}},$$actualAnnotation);
    add_type_arg($$actualAnnotation,'Value$OptionalAnnotation',{t:ActualAnnotation});
    return $$actualAnnotation;
}
ActualAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:ActualAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}}}],$an:function(){return[doc(String$("The annotation class for [[actual]].",36)),shared(),$final(),annotation()];},d:['ceylon.language','ActualAnnotation']};};
exports.ActualAnnotation=ActualAnnotation;
function $init$ActualAnnotation(){
    if(ActualAnnotation.$$===undefined){
        initTypeProto(ActualAnnotation,'ceylon.language::ActualAnnotation',Basic,$init$OptionalAnnotation());
    }
    return ActualAnnotation;
}
exports.$init$ActualAnnotation=$init$ActualAnnotation;
$init$ActualAnnotation();
var actual=function (){
    return ActualAnnotation();
};
actual.$crtmm$=function(){return{mod:$CCMM$,$t:{t:ActualAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a member of a type as refining a member \nof a supertype.",75)),shared(),annotation()];},d:['ceylon.language','actual']};};
exports.actual=actual;
function FormalAnnotation($$formalAnnotation){
    $init$FormalAnnotation();
    if($$formalAnnotation===undefined)$$formalAnnotation=new FormalAnnotation.$$;
    $$formalAnnotation.$$targs$$={Value$OptionalAnnotation:{t:FormalAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:FormalAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}},$$formalAnnotation);
    add_type_arg($$formalAnnotation,'Value$OptionalAnnotation',{t:FormalAnnotation});
    return $$formalAnnotation;
}
FormalAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:FormalAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}}}],$an:function(){return[doc(String$("The annotation class for [[formal]].",36)),shared(),$final(),annotation()];},d:['ceylon.language','FormalAnnotation']};};
exports.FormalAnnotation=FormalAnnotation;
function $init$FormalAnnotation(){
    if(FormalAnnotation.$$===undefined){
        initTypeProto(FormalAnnotation,'ceylon.language::FormalAnnotation',Basic,$init$OptionalAnnotation());
    }
    return FormalAnnotation;
}
exports.$init$FormalAnnotation=$init$FormalAnnotation;
$init$FormalAnnotation();
var formal=function (){
    return FormalAnnotation();
};
formal.$crtmm$=function(){return{mod:$CCMM$,$t:{t:FormalAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a member whose implementation must be \nprovided by subtypes.",79)),shared(),annotation()];},d:['ceylon.language','formal']};};
exports.formal=formal;
function DefaultAnnotation($$defaultAnnotation){
    $init$DefaultAnnotation();
    if($$defaultAnnotation===undefined)$$defaultAnnotation=new DefaultAnnotation.$$;
    $$defaultAnnotation.$$targs$$={Value$OptionalAnnotation:{t:DefaultAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:DefaultAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}},$$defaultAnnotation);
    add_type_arg($$defaultAnnotation,'Value$OptionalAnnotation',{t:DefaultAnnotation});
    return $$defaultAnnotation;
}
DefaultAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:DefaultAnnotation},ProgramElement$OptionalAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassOrInterfaceDeclaration$meta$declaration}]}}}],$an:function(){return[doc(String$("The annotation class for [[default]].",37)),shared(),$final(),annotation()];},d:['ceylon.language','DefaultAnnotation']};};
exports.DefaultAnnotation=DefaultAnnotation;
function $init$DefaultAnnotation(){
    if(DefaultAnnotation.$$===undefined){
        initTypeProto(DefaultAnnotation,'ceylon.language::DefaultAnnotation',Basic,$init$OptionalAnnotation());
    }
    return DefaultAnnotation;
}
exports.$init$DefaultAnnotation=$init$DefaultAnnotation;
$init$DefaultAnnotation();
var $default=function (){
    return DefaultAnnotation();
};
$default.$crtmm$=function(){return{mod:$CCMM$,$t:{t:DefaultAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a member whose implementation may be \nrefined by subtypes. Non-`default` declarations may not be \nrefined.",125)),shared(),annotation()];},d:['ceylon.language','default']};};
exports.$default=$default;
function LateAnnotation($$lateAnnotation){
    $init$LateAnnotation();
    if($$lateAnnotation===undefined)$$lateAnnotation=new LateAnnotation.$$;
    $$lateAnnotation.$$targs$$={Value$OptionalAnnotation:{t:LateAnnotation},ProgramElement$OptionalAnnotation:{t:ValueDeclaration$meta$declaration}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:LateAnnotation},ProgramElement$OptionalAnnotation:{t:ValueDeclaration$meta$declaration}},$$lateAnnotation);
    add_type_arg($$lateAnnotation,'Value$OptionalAnnotation',{t:LateAnnotation});
    add_type_arg($$lateAnnotation,'ProgramElement$OptionalAnnotation',{t:ValueDeclaration$meta$declaration});
    return $$lateAnnotation;
}
LateAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:LateAnnotation},ProgramElement$OptionalAnnotation:{t:ValueDeclaration$meta$declaration}}}],$an:function(){return[doc(String$("The annotation class for [[late]].",34)),shared(),$final(),annotation()];},d:['ceylon.language','LateAnnotation']};};
exports.LateAnnotation=LateAnnotation;
function $init$LateAnnotation(){
    if(LateAnnotation.$$===undefined){
        initTypeProto(LateAnnotation,'ceylon.language::LateAnnotation',Basic,$init$OptionalAnnotation());
    }
    return LateAnnotation;
}
exports.$init$LateAnnotation=$init$LateAnnotation;
$init$LateAnnotation();
var late=function (){
    return LateAnnotation();
};
late.$crtmm$=function(){return{mod:$CCMM$,$t:{t:LateAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to disable definite initialization analysis for \na reference.",72)),shared(),annotation()];},d:['ceylon.language','late']};};
exports.late=late;
function NativeAnnotation($$nativeAnnotation){
    $init$NativeAnnotation();
    if($$nativeAnnotation===undefined)$$nativeAnnotation=new NativeAnnotation.$$;
    $$nativeAnnotation.$$targs$$={Value$OptionalAnnotation:{t:NativeAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:NativeAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}},$$nativeAnnotation);
    add_type_arg($$nativeAnnotation,'Value$OptionalAnnotation',{t:NativeAnnotation});
    add_type_arg($$nativeAnnotation,'ProgramElement$OptionalAnnotation',{t:Annotated});
    return $$nativeAnnotation;
}
NativeAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:NativeAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}}}],$an:function(){return[doc(String$("The annotation class for [[native]].",36)),shared(),$final(),annotation()];},d:['ceylon.language','NativeAnnotation']};};
exports.NativeAnnotation=NativeAnnotation;
function $init$NativeAnnotation(){
    if(NativeAnnotation.$$===undefined){
        initTypeProto(NativeAnnotation,'ceylon.language::NativeAnnotation',Basic,$init$OptionalAnnotation());
    }
    return NativeAnnotation;
}
exports.$init$NativeAnnotation=$init$NativeAnnotation;
$init$NativeAnnotation();
var $native=function (){
    return NativeAnnotation();
};
$native.$crtmm$=function(){return{mod:$CCMM$,$t:{t:NativeAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to mark a member whose implementation is defined \nin platform-native code.",85)),shared(),annotation()];},d:['ceylon.language','native']};};
exports.$native=$native;
function DocAnnotation(description,$$docAnnotation){
    $init$DocAnnotation();
    if($$docAnnotation===undefined)$$docAnnotation=new DocAnnotation.$$;
    $$docAnnotation.$$targs$$={Value$OptionalAnnotation:{t:DocAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}};
    $$docAnnotation.description_=description;
    OptionalAnnotation({Value$OptionalAnnotation:{t:DocAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}},$$docAnnotation);
    add_type_arg($$docAnnotation,'Value$OptionalAnnotation',{t:DocAnnotation});
    add_type_arg($$docAnnotation,'ProgramElement$OptionalAnnotation',{t:Annotated});
    return $$docAnnotation;
}
DocAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'description',$mt:'prm',$t:{t:String$},$an:function(){return[doc("Documentation, in Markdown syntax, about the annotated element"),shared()];}}],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:DocAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}}}],$an:function(){return[doc(String$("The annotation class for the [[doc]] annotation.",48)),shared(),$final(),annotation()];},d:['ceylon.language','DocAnnotation']};};
exports.DocAnnotation=DocAnnotation;
function $init$DocAnnotation(){
    if(DocAnnotation.$$===undefined){
        initTypeProto(DocAnnotation,'ceylon.language::DocAnnotation',Basic,$init$OptionalAnnotation());
        (function($$docAnnotation){
            defineAttr($$docAnnotation,'description',function(){return this.description_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:DocAnnotation,$an:function(){return[doc("Documentation, in Markdown syntax, about the annotated element"),shared()];},d:['ceylon.language','DocAnnotation','$at','description']};});
        })(DocAnnotation.$$.prototype);
    }
    return DocAnnotation;
}
exports.$init$DocAnnotation=$init$DocAnnotation;
$init$DocAnnotation();
var doc=function (description$999){
    return DocAnnotation(description$999);
};
doc.$crtmm$=function(){return{mod:$CCMM$,$t:{t:DocAnnotation},$ps:[{$nm:'description',$mt:'prm',$t:{t:String$},$an:function(){return[doc("Documentation, in Markdown syntax, about the annotated element")];}}],$an:function(){return[doc(String$("Annotation to specify API documentation of a program\nelement.",61)),shared(),annotation()];},d:['ceylon.language','doc']};};
exports.doc=doc;
function SeeAnnotation(programElements,$$seeAnnotation){
    $init$SeeAnnotation();
    if($$seeAnnotation===undefined)$$seeAnnotation=new SeeAnnotation.$$;
    $$seeAnnotation.$$targs$$={Value$SequencedAnnotation:{t:SeeAnnotation},ProgramElement$SequencedAnnotation:{t:Annotated}};
    if(programElements===undefined){programElements=getEmpty();}
    $$seeAnnotation.programElements_=programElements;
    SequencedAnnotation({Value$SequencedAnnotation:{t:SeeAnnotation},ProgramElement$SequencedAnnotation:{t:Annotated}},$$seeAnnotation);
    add_type_arg($$seeAnnotation,'Value$SequencedAnnotation',{t:SeeAnnotation});
    add_type_arg($$seeAnnotation,'ProgramElement$SequencedAnnotation',{t:Annotated});
    return $$seeAnnotation;
}
SeeAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'programElements',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Declaration$meta$declaration}}},$an:function(){return[doc("The program elements being referred to."),shared()];}}],satisfies:[{t:SequencedAnnotation,a:{Value$SequencedAnnotation:{t:SeeAnnotation},ProgramElement$SequencedAnnotation:{t:Annotated}}}],$an:function(){return[doc(String$("The annotation class for [[see]].",33)),shared(),$final(),annotation()];},d:['ceylon.language','SeeAnnotation']};};
exports.SeeAnnotation=SeeAnnotation;
function $init$SeeAnnotation(){
    if(SeeAnnotation.$$===undefined){
        initTypeProto(SeeAnnotation,'ceylon.language::SeeAnnotation',Basic,$init$SequencedAnnotation());
        (function($$seeAnnotation){
            defineAttr($$seeAnnotation,'programElements',function(){return this.programElements_;},undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Declaration$meta$declaration}}},$cont:SeeAnnotation,$an:function(){return[doc("The program elements being referred to."),shared()];},d:['ceylon.language','SeeAnnotation','$at','programElements']};});
        })(SeeAnnotation.$$.prototype);
    }
    return SeeAnnotation;
}
exports.$init$SeeAnnotation=$init$SeeAnnotation;
$init$SeeAnnotation();
var see=function (programElements$1000){
    if(programElements$1000===undefined){programElements$1000=getEmpty();}
    return SeeAnnotation(programElements$1000);
};
see.$crtmm$=function(){return{mod:$CCMM$,$t:{t:SeeAnnotation},$ps:[{$nm:'programElements',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Declaration$meta$declaration}}},$an:function(){return[doc("The program elements being referred to.")];}}],$an:function(){return[doc(String$("Annotation to specify API references to other related \nprogram elements.",72)),shared(),annotation()];},d:['ceylon.language','see']};};
exports.see=see;
function AuthorsAnnotation(authors,$$authorsAnnotation){
    $init$AuthorsAnnotation();
    if($$authorsAnnotation===undefined)$$authorsAnnotation=new AuthorsAnnotation.$$;
    $$authorsAnnotation.$$targs$$={Value$OptionalAnnotation:{t:AuthorsAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}};
    if(authors===undefined){authors=getEmpty();}
    $$authorsAnnotation.authors_=authors;
    OptionalAnnotation({Value$OptionalAnnotation:{t:AuthorsAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}},$$authorsAnnotation);
    add_type_arg($$authorsAnnotation,'Value$OptionalAnnotation',{t:AuthorsAnnotation});
    add_type_arg($$authorsAnnotation,'ProgramElement$OptionalAnnotation',{t:Annotated});
    return $$authorsAnnotation;
}
AuthorsAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'authors',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:String$}}},$an:function(){return[doc("The authors, in Markdown syntax, of the annotated element"),shared()];}}],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:AuthorsAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}}}],$an:function(){return[doc(String$("The annotation class for [[by]].",32)),shared(),$final(),annotation()];},d:['ceylon.language','AuthorsAnnotation']};};
exports.AuthorsAnnotation=AuthorsAnnotation;
function $init$AuthorsAnnotation(){
    if(AuthorsAnnotation.$$===undefined){
        initTypeProto(AuthorsAnnotation,'ceylon.language::AuthorsAnnotation',Basic,$init$OptionalAnnotation());
        (function($$authorsAnnotation){
            defineAttr($$authorsAnnotation,'authors',function(){return this.authors_;},undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:String$}}},$cont:AuthorsAnnotation,$an:function(){return[doc("The authors, in Markdown syntax, of the annotated element"),shared()];},d:['ceylon.language','AuthorsAnnotation','$at','authors']};});
        })(AuthorsAnnotation.$$.prototype);
    }
    return AuthorsAnnotation;
}
exports.$init$AuthorsAnnotation=$init$AuthorsAnnotation;
$init$AuthorsAnnotation();
var by=function (authors$1001){
    if(authors$1001===undefined){authors$1001=getEmpty();}
    return AuthorsAnnotation(authors$1001);
};
by.$crtmm$=function(){return{mod:$CCMM$,$t:{t:AuthorsAnnotation},$ps:[{$nm:'authors',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:String$}}},$an:function(){return[doc("The authors, in Markdown syntax, of the annotated element")];}}],$an:function(){return[doc(String$("Annotation to specify API authors.",34)),shared(),annotation()];},d:['ceylon.language','by']};};
exports.by=by;
function ThrownExceptionAnnotation(type,when,$$thrownExceptionAnnotation){
    $init$ThrownExceptionAnnotation();
    if($$thrownExceptionAnnotation===undefined)$$thrownExceptionAnnotation=new ThrownExceptionAnnotation.$$;
    $$thrownExceptionAnnotation.$$targs$$={Value$SequencedAnnotation:{t:ThrownExceptionAnnotation},ProgramElement$SequencedAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassDeclaration$meta$declaration}]}};
    $$thrownExceptionAnnotation.type_=type;
    $$thrownExceptionAnnotation.when_=when;
    SequencedAnnotation({Value$SequencedAnnotation:{t:ThrownExceptionAnnotation},ProgramElement$SequencedAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassDeclaration$meta$declaration}]}},$$thrownExceptionAnnotation);
    add_type_arg($$thrownExceptionAnnotation,'Value$SequencedAnnotation',{t:ThrownExceptionAnnotation});
    return $$thrownExceptionAnnotation;
}
ThrownExceptionAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'type',$mt:'prm',$t:{t:Declaration$meta$declaration},$an:function(){return[doc("The [[Exception]] type that this thrown."),shared()];}},{$nm:'when',$mt:'prm',$t:{t:String$},$an:function(){return[doc("A description, in Markdown syntax, of the circumstances \nthat cause this exception to be thrown."),shared()];}}],satisfies:[{t:SequencedAnnotation,a:{Value$SequencedAnnotation:{t:ThrownExceptionAnnotation},ProgramElement$SequencedAnnotation:{t:'u', l:[{t:FunctionOrValueDeclaration$meta$declaration},{t:ClassDeclaration$meta$declaration}]}}}],$an:function(){return[doc(String$("The annotation class for [[throws]].",36)),shared(),$final(),annotation()];},d:['ceylon.language','ThrownExceptionAnnotation']};};
exports.ThrownExceptionAnnotation=ThrownExceptionAnnotation;
function $init$ThrownExceptionAnnotation(){
    if(ThrownExceptionAnnotation.$$===undefined){
        initTypeProto(ThrownExceptionAnnotation,'ceylon.language::ThrownExceptionAnnotation',Basic,$init$SequencedAnnotation());
        (function($$thrownExceptionAnnotation){
            defineAttr($$thrownExceptionAnnotation,'type',function(){return this.type_;},undefined,function(){return{mod:$CCMM$,$t:{t:Declaration$meta$declaration},$cont:ThrownExceptionAnnotation,$an:function(){return[doc("The [[Exception]] type that this thrown."),shared()];},d:['ceylon.language','ThrownExceptionAnnotation','$at','type']};});
            defineAttr($$thrownExceptionAnnotation,'when',function(){return this.when_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:ThrownExceptionAnnotation,$an:function(){return[doc("A description, in Markdown syntax, of the circumstances \nthat cause this exception to be thrown."),shared()];},d:['ceylon.language','ThrownExceptionAnnotation','$at','when']};});
        })(ThrownExceptionAnnotation.$$.prototype);
    }
    return ThrownExceptionAnnotation;
}
exports.$init$ThrownExceptionAnnotation=$init$ThrownExceptionAnnotation;
$init$ThrownExceptionAnnotation();
var $throws=function (type$1002,when$1003){
    if(when$1003===undefined){when$1003=String$("",0);}
    return ThrownExceptionAnnotation(type$1002,when$1003);
};
$throws.$crtmm$=function(){return{mod:$CCMM$,$t:{t:ThrownExceptionAnnotation},$ps:[{$nm:'type',$mt:'prm',$t:{t:Declaration$meta$declaration},$an:function(){return[doc("The [[Exception]] type that this thrown.")];}},{$nm:'when',$mt:'prm',$def:1,$t:{t:String$},$an:function(){return[doc("A description, in Markdown syntax, of the circumstances \nthat cause this exception to be thrown.")];}}],$an:function(){return[doc(String$("Annotation to mark a program element that throws an \nexception.",63)),shared(),annotation()];},d:['ceylon.language','throws']};};
exports.$throws=$throws;
function DeprecationAnnotation(description,$$deprecationAnnotation){
    $init$DeprecationAnnotation();
    if($$deprecationAnnotation===undefined)$$deprecationAnnotation=new DeprecationAnnotation.$$;
    $$deprecationAnnotation.$$targs$$={Value$OptionalAnnotation:{t:DeprecationAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}};
    $$deprecationAnnotation.description_=description;
    OptionalAnnotation({Value$OptionalAnnotation:{t:DeprecationAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}},$$deprecationAnnotation);
    add_type_arg($$deprecationAnnotation,'Value$OptionalAnnotation',{t:DeprecationAnnotation});
    add_type_arg($$deprecationAnnotation,'ProgramElement$OptionalAnnotation',{t:Annotated});
    $$deprecationAnnotation.$prop$getReason={$crtmm$:function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:String$}]},$cont:DeprecationAnnotation,$an:function(){return[doc(String$("A description, in Markdown syntax, of why the element \nis deprecated, and what alternatives are available, or \nnull.",116)),shared()];},d:['ceylon.language','DeprecationAnnotation','$at','reason']};}};
    $$deprecationAnnotation.$prop$getReason.get=function(){return reason};
    return $$deprecationAnnotation;
}
DeprecationAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'description',$mt:'prm',$t:{t:String$},$an:function(){return[doc("A description, in Markdown syntax, of why the element \nis deprecated, and of what alternatives are available."),shared()];}}],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:DeprecationAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}}}],$an:function(){return[doc(String$("The annotation class for [[deprecated]].",40)),shared(),$final(),annotation()];},d:['ceylon.language','DeprecationAnnotation']};};
exports.DeprecationAnnotation=DeprecationAnnotation;
function $init$DeprecationAnnotation(){
    if(DeprecationAnnotation.$$===undefined){
        initTypeProto(DeprecationAnnotation,'ceylon.language::DeprecationAnnotation',Basic,$init$OptionalAnnotation());
        (function($$deprecationAnnotation){
            defineAttr($$deprecationAnnotation,'reason',function(){
                var $$deprecationAnnotation=this;
                return ((!$$deprecationAnnotation.description.empty)?$$deprecationAnnotation.description:null);
            },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:String$}]},$cont:DeprecationAnnotation,$an:function(){return[doc(String$("A description, in Markdown syntax, of why the element \nis deprecated, and what alternatives are available, or \nnull.",116)),shared()];},d:['ceylon.language','DeprecationAnnotation','$at','reason']};});
            defineAttr($$deprecationAnnotation,'description',function(){return this.description_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:DeprecationAnnotation,$an:function(){return[doc("A description, in Markdown syntax, of why the element \nis deprecated, and of what alternatives are available."),shared()];},d:['ceylon.language','DeprecationAnnotation','$at','description']};});
        })(DeprecationAnnotation.$$.prototype);
    }
    return DeprecationAnnotation;
}
exports.$init$DeprecationAnnotation=$init$DeprecationAnnotation;
$init$DeprecationAnnotation();
var deprecated=function (reason$1004){
    if(reason$1004===undefined){reason$1004=String$("",0);}
    return DeprecationAnnotation(reason$1004);
};
deprecated.$crtmm$=function(){return{mod:$CCMM$,$t:{t:DeprecationAnnotation},$ps:[{$nm:'reason',$mt:'prm',$def:1,$t:{t:String$},$an:function(){return[doc("A description, in Markdown syntax, of why the element \nis deprecated, and what alternatives are available.")];}}],$an:function(){return[doc(String$("Annotation to mark program elements which should not be \nused anymore.",70)),shared(),annotation()];},d:['ceylon.language','deprecated']};};
exports.deprecated=deprecated;
function TagsAnnotation(tags,$$tagsAnnotation){
    $init$TagsAnnotation();
    if($$tagsAnnotation===undefined)$$tagsAnnotation=new TagsAnnotation.$$;
    $$tagsAnnotation.$$targs$$={Value$OptionalAnnotation:{t:TagsAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}};
    if(tags===undefined){tags=getEmpty();}
    $$tagsAnnotation.tags_=tags;
    OptionalAnnotation({Value$OptionalAnnotation:{t:TagsAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}},$$tagsAnnotation);
    add_type_arg($$tagsAnnotation,'Value$OptionalAnnotation',{t:TagsAnnotation});
    add_type_arg($$tagsAnnotation,'ProgramElement$OptionalAnnotation',{t:Annotated});
    return $$tagsAnnotation;
}
TagsAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'tags',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:String$}}},$an:function(){return[doc("The tags, in plain text."),shared()];}}],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:TagsAnnotation},ProgramElement$OptionalAnnotation:{t:Annotated}}}],$an:function(){return[doc(String$("The annotation class for [[tagged]].",36)),shared(),$final(),annotation()];},d:['ceylon.language','TagsAnnotation']};};
exports.TagsAnnotation=TagsAnnotation;
function $init$TagsAnnotation(){
    if(TagsAnnotation.$$===undefined){
        initTypeProto(TagsAnnotation,'ceylon.language::TagsAnnotation',Basic,$init$OptionalAnnotation());
        (function($$tagsAnnotation){
            defineAttr($$tagsAnnotation,'tags',function(){return this.tags_;},undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:String$}}},$cont:TagsAnnotation,$an:function(){return[doc("The tags, in plain text."),shared()];},d:['ceylon.language','TagsAnnotation','$at','tags']};});
        })(TagsAnnotation.$$.prototype);
    }
    return TagsAnnotation;
}
exports.$init$TagsAnnotation=$init$TagsAnnotation;
$init$TagsAnnotation();
var tagged=function (tags$1005){
    if(tags$1005===undefined){tags$1005=getEmpty();}
    return TagsAnnotation(tags$1005);
};
tagged.$crtmm$=function(){return{mod:$CCMM$,$t:{t:TagsAnnotation},$ps:[{$nm:'tags',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:String$}}},$an:function(){return[doc("The tags, in plain text.")];}}],$an:function(){return[doc(String$("Annotation to categorize the API by tag.",40)),shared(),annotation()];},d:['ceylon.language','tagged']};};
exports.tagged=tagged;
function LicenseAnnotation(description,$$licenseAnnotation){
    $init$LicenseAnnotation();
    if($$licenseAnnotation===undefined)$$licenseAnnotation=new LicenseAnnotation.$$;
    $$licenseAnnotation.$$targs$$={Value$OptionalAnnotation:{t:LicenseAnnotation},ProgramElement$OptionalAnnotation:{t:Module$meta$declaration}};
    $$licenseAnnotation.description_=description;
    OptionalAnnotation({Value$OptionalAnnotation:{t:LicenseAnnotation},ProgramElement$OptionalAnnotation:{t:Module$meta$declaration}},$$licenseAnnotation);
    add_type_arg($$licenseAnnotation,'Value$OptionalAnnotation',{t:LicenseAnnotation});
    add_type_arg($$licenseAnnotation,'ProgramElement$OptionalAnnotation',{t:Module$meta$declaration});
    return $$licenseAnnotation;
}
LicenseAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'description',$mt:'prm',$t:{t:String$},$an:function(){return[doc("The name, text, or URL of the license."),shared()];}}],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:LicenseAnnotation},ProgramElement$OptionalAnnotation:{t:Module$meta$declaration}}}],$an:function(){return[doc(String$("The annotation class for [[license]].",37)),shared(),$final(),annotation()];},d:['ceylon.language','LicenseAnnotation']};};
exports.LicenseAnnotation=LicenseAnnotation;
function $init$LicenseAnnotation(){
    if(LicenseAnnotation.$$===undefined){
        initTypeProto(LicenseAnnotation,'ceylon.language::LicenseAnnotation',Basic,$init$OptionalAnnotation());
        (function($$licenseAnnotation){
            defineAttr($$licenseAnnotation,'description',function(){return this.description_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:LicenseAnnotation,$an:function(){return[doc("The name, text, or URL of the license."),shared()];},d:['ceylon.language','LicenseAnnotation','$at','description']};});
        })(LicenseAnnotation.$$.prototype);
    }
    return LicenseAnnotation;
}
exports.$init$LicenseAnnotation=$init$LicenseAnnotation;
$init$LicenseAnnotation();
var license=function (description$1006){
    return LicenseAnnotation(description$1006);
};
license.$crtmm$=function(){return{mod:$CCMM$,$t:{t:LicenseAnnotation},$ps:[{$nm:'description',$mt:'prm',$t:{t:String$},$an:function(){return[doc("The name, text, or URL of the license.")];}}],$an:function(){return[doc(String$("Annotation to specify the URL of the license of a module or \npackage.",69)),shared(),annotation()];},d:['ceylon.language','license']};};
exports.license=license;
function OptionalImportAnnotation($$optionalImportAnnotation){
    $init$OptionalImportAnnotation();
    if($$optionalImportAnnotation===undefined)$$optionalImportAnnotation=new OptionalImportAnnotation.$$;
    $$optionalImportAnnotation.$$targs$$={Value$OptionalAnnotation:{t:OptionalImportAnnotation},ProgramElement$OptionalAnnotation:{t:Import$meta$declaration}};
    OptionalAnnotation({Value$OptionalAnnotation:{t:OptionalImportAnnotation},ProgramElement$OptionalAnnotation:{t:Import$meta$declaration}},$$optionalImportAnnotation);
    add_type_arg($$optionalImportAnnotation,'Value$OptionalAnnotation',{t:OptionalImportAnnotation});
    add_type_arg($$optionalImportAnnotation,'ProgramElement$OptionalAnnotation',{t:Import$meta$declaration});
    return $$optionalImportAnnotation;
}
OptionalImportAnnotation.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:OptionalAnnotation,a:{Value$OptionalAnnotation:{t:OptionalImportAnnotation},ProgramElement$OptionalAnnotation:{t:Import$meta$declaration}}}],$an:function(){return[doc(String$("The annotation class for [[optional]].",38)),shared(),$final(),annotation()];},d:['ceylon.language','OptionalImportAnnotation']};};
exports.OptionalImportAnnotation=OptionalImportAnnotation;
function $init$OptionalImportAnnotation(){
    if(OptionalImportAnnotation.$$===undefined){
        initTypeProto(OptionalImportAnnotation,'ceylon.language::OptionalImportAnnotation',Basic,$init$OptionalAnnotation());
    }
    return OptionalImportAnnotation;
}
exports.$init$OptionalImportAnnotation=$init$OptionalImportAnnotation;
$init$OptionalImportAnnotation();
var optional=function (){
    return OptionalImportAnnotation();
};
optional.$crtmm$=function(){return{mod:$CCMM$,$t:{t:OptionalImportAnnotation},$ps:[],$an:function(){return[doc(String$("Annotation to specify that a module can be executed even if \nthe annotated dependency is not available.",103)),shared(),annotation()];},d:['ceylon.language','optional']};};
exports.optional=optional;
function Number$(wat) {
    return wat;
}
initType(Number$, 'ceylon.language::Number');
Number$.$crtmm$=function(){return{$an:function(){return[shared()]},mod:$CCMM$,d:['ceylon.language','Number']};}
exports.Number=Number$;
function $init$Number$() {
    if (Number$.$$===undefined) {
        initType(Number$, 'ceylon.language::Number');
    }
    return Number$;
}

var toInt = function(float) {
    return (float >= 0) ? Math.floor(float) : Math.ceil(float);
}

function JSNumber(value) { return Number(value); }
initExistingType(JSNumber, Number, 'ceylon.language::JSNumber');
JSNumber.$crtmm$=function(){return{$nm:'JSNumber',$mt:'cls',$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','Number']};}

var origNumToString = Number.prototype.toString;
inheritProto(JSNumber, Object$, Scalar, $init$Integral(), Exponentiable);

function Integer(value) {
    if (value && value.getT$name && value.getT$name() === 'ceylon.language::Integer') {
        return value;
    }
    return Number(value);
}
initTypeProto(Integer, 'ceylon.language::Integer', Object$, Scalar, 
        $init$Integral(), Exponentiable, Binary);
Integer.$crtmm$=function(){return{$an:function(){return[shared(),native(),final()];},mod:$CCMM$,d:['ceylon.language','Integer']};}

function Float(value) {
    if (value && value.getT$name && value.getT$name() === 'ceylon.language::Float') {
        return value;
    }
    var that = new Number(value);
    that.float$ = true;
    return that;
}
initTypeProto(Float, 'ceylon.language::Float', Object$, Scalar, Exponentiable);
Float.$crtmm$=function(){return{$an:function(){return[shared(),native(),final()];},mod:$CCMM$,d:['ceylon.language','Float']};}

var JSNum$proto = Number.prototype;
JSNum$proto.getT$all = function() {
    return (this.float$ ? Float : Integer).$$.T$all;
}
JSNum$proto.getT$name = function() {
    return (this.float$ ? Float : Integer).$$.T$name;
}
JSNum$proto.toString = origNumToString;
defineAttr(JSNum$proto, 'string', function(){ return String$(this.toString()); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Object$,d:['ceylon.language','Object','$at','string']};});
JSNum$proto.plus = function(other) {
    return (this.float$||other.float$) ? Float(this+other) : (this+other);
}
JSNum$proto.plusInteger = function(other) {
    return this.float$ ? Float(this+other) : (this+other);
}
JSNum$proto.minus = function(other) {
    return (this.float$||other.float$) ? Float(this-other) : (this-other);
}
JSNum$proto.times = function(other) {
    return (this.float$||other.float$) ? Float(this*other) : (this*other);
}
JSNum$proto.timesInteger = function(other) {
    return this.float$ ? Float(this*other) : (this*other);
}
JSNum$proto.divided = function(other) {
    if (this.float$||other.float$) { return Float(this/other); }
    if (other == 0) {
        throw Exception(String$("Division by Zero"));
    }
    return toInt(this/other);
}
JSNum$proto.remainder = function(other) { return this%other; }
JSNum$proto.power = function(exp) {
    if (this.float$||exp.float$) { return Float(Math.pow(this, exp)); }
    if (exp<0 && this!=1 && this!=-1) {
        throw AssertionError(String$("Negative exponent"));
    }
    return toInt(Math.pow(this, exp));
}
defineAttr(JSNum$proto, 'negativeValue', function() {
    return this.float$ ? Float(-this) : -this;
},undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Invertable,d:['ceylon.language','Invertable','$at','negativeValue']};});
defineAttr(JSNum$proto, 'positiveValue', function() {
    return this.float$ ? this : this.valueOf();
},undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Invertable,d:['ceylon.language','Invertable','$at','positiveValue']};});
defineAttr(JSNum$proto, 'negative', function(){
  return this.float$ ? this < 0.0 : this.valueOf() < 0;
},undefined,function(){return{$t:{t:Boolean$},$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','negative']};});
defineAttr(JSNum$proto, 'positive', function(){
  return this.float$ ? this > 0.0 : this.valueOf() > 0;
},undefined,function(){return{$t:{t:Boolean$},$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','positive']};});
JSNum$proto.equals = function(other) { return (typeof(other)==='number' || other.constructor===Number) && other==this.valueOf(); }
JSNum$proto.compare = function(other) {
    var value = this.valueOf();
    return value==other ? equal : (value<other ? smaller:larger);
}
defineAttr(JSNum$proto, '$float', function(){ return Float(this.valueOf()); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','float']};});
defineAttr(JSNum$proto, 'integer', function(){ return toInt(this); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','integer']};});
defineAttr(JSNum$proto, 'integerValue', function(){ return toInt(this); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Ordinal,d:['ceylon.language','Ordinal','$at','integerValue']};});
defineAttr(JSNum$proto, 'character', function(){ return Character(this.valueOf()); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Integer,d:['ceylon.language','Integer','$at','character']};});
defineAttr(JSNum$proto, 'successor', function(){ return this+1; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Ordinal,d:['ceylon.language','Ordinal','$at','successor']};});
defineAttr(JSNum$proto, 'predecessor', function(){ return this-1; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Ordinal,d:['ceylon.language','Ordinal','$at','predecessor']};});
defineAttr(JSNum$proto, 'unit', function(){ return this == 1; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Integral,d:['ceylon.language','Integral','$at','unit']};});
defineAttr(JSNum$proto, 'zero', function(){ return this == 0; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Integral,d:['ceylon.language','Integral','$at','zero']};});
defineAttr(JSNum$proto, 'fractionalPart', function() {
    if (!this.float$) { return 0; }
    return Float(this - (this>=0 ? Math.floor(this) : Math.ceil(this)));
},undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','fractionalPart']};});
defineAttr(JSNum$proto, 'wholePart', function() {
    if (!this.float$) { return this.valueOf(); }
    return Float(this>=0 ? Math.floor(this) : Math.ceil(this));
},undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','wholePart']};});
defineAttr(JSNum$proto, 'sign', function(){ return this > 0 ? 1 : this < 0 ? -1 : 0; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','sign']};});
defineAttr(JSNum$proto, 'hash', function() {
    return this.float$ ? String$(this.toPrecision()).hash : this.valueOf();
},undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Object$,d:['ceylon.language','Object','$at','hash']};});
JSNum$proto.distanceFrom = function(other) {
    return (this.float$ ? this.wholePart : this) - other;
}
//Binary interface
defineAttr(JSNum$proto, 'not', function(){ return ~this; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Binary,d:['ceylon.language','Binary','$at','not']};});
JSNum$proto.leftLogicalShift = function(i) { return this << i; }
JSNum$proto.rightLogicalShift = function(i) { return this >> i; }
JSNum$proto.rightArithmeticShift = function(i) { return this >>> i; }
JSNum$proto.and = function(x) { return this & x; }
JSNum$proto.or = function(x) { return this | x; }
JSNum$proto.xor = function(x) { return this ^ x; }
JSNum$proto.$get = function(idx) {
    var mask = 1 << idx;
    return (this & mask) != 0 ? $true : $false;
}
JSNum$proto.set = function(idx,bit) {
    if (bit === undefined) { bit = $true; }
        var mask = idx > 1 ? 1 << idx : 1;
    return (bit === $true) ? this | mask : this & ~mask;
}
JSNum$proto.flip = function(idx) {
    var mask = 1 << idx;
    return this ^ mask;
}
JSNum$proto.clear = function(index) {
    return this.set(index, false);
}
defineAttr(JSNum$proto, 'size', function(){ return 53; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Binary,d:['ceylon.language','Binary','$at','size']};});
defineAttr(JSNum$proto, 'magnitude', function(){ return Math.abs(this); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Number$,d:['ceylon.language','Number','$at','magnitude']};});

function $parseFloat(s) { return Float(parseFloat(s)); }
$parseFloat.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u',l:[{t:Null},{t:Float}]},$ps:[{$nm:'string',$t:{t:String$}}],d:['ceylon.language','parseFloat']};}

defineAttr(JSNum$proto, 'undefined', function(){ return isNaN(this); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Float,d:['ceylon.language','Float','$at','undefined']};});
defineAttr(JSNum$proto, 'finite', function(){ return this!=Infinity && this!=-Infinity && !isNaN(this); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Float,d:['ceylon.language','Float','$at','finite']};});
defineAttr(JSNum$proto, 'infinite', function(){ return this==Infinity || this==-Infinity; },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Float,d:['ceylon.language','Float','$at','infinite']};});
defineAttr(JSNum$proto, 'strictlyPositive', function(){ return this>0 || (this==0 && (1/this==Infinity)); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Float,d:['ceylon.language','Float','$at','strictlyPositive']};});
defineAttr(JSNum$proto, 'strictlyNegative', function() { return this<0 || (this==0 && (1/this==-Infinity)); },
  undefined,function(){return{$an:function(){return[shared(),actual()]},mod:$CCMM$,$cont:Float,d:['ceylon.language','Float','$at','strictlyNegative']};});

var $infinity = Float(Infinity);
function getInfinity() { return $infinity; }
exports.$prop$getInfinity={get:getInfinity,$crtmm$:function(){return{mod:$CCMM$,$t:{t:Float},d:['ceylon.language','infinity']};}};

exports.Integer=Integer;
exports.Float=Float;
exports.getInfinity=getInfinity;
exports.parseFloat=$parseFloat;
function getNull() { return null }
exports.$prop$getNull={get:getNull,$crtmm$:function(){return{mod:$CCMM$,d:['ceylon.language','null'],$t:{t:Null}};}};
function Boolean$(value) {return Boolean(value)}
initExistingTypeProto(Boolean$, Boolean, 'ceylon.language::Boolean');
Boolean$.$crtmm$={$ps:[],$an:function(){return[shared(),abstract()]},mod:$CCMM$,d:['ceylon.language','Boolean']};
var $Boolean=Boolean$;
function trueClass() {}
initType(trueClass, "ceylon.language::true", Boolean$);
function falseClass() {}
initType(falseClass, "ceylon.language::false", Boolean$);
Boolean.prototype.getT$name = function() {
    return (this.valueOf()?trueClass:falseClass).$$.T$name;
}
Boolean.prototype.getT$all = function() {
    return (this.valueOf()?trueClass:falseClass).$$.T$all;
}
Boolean.prototype.equals = function(other) {return other.constructor===Boolean && other==this;}
defineAttr(Boolean.prototype, 'hash', function(){ return this.valueOf()?1:0; },
  undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','hash']});
var trueString = String$("true", 4);
var falseString = String$("false", 5);
defineAttr(Boolean.prototype, 'string', function(){ return this.valueOf()?trueString:falseString; },
  undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});
function getTrue() {return true;}
function getFalse() {return false;}
exports.$prop$getTrue={get:getTrue,$crtmm$:function(){return{mod:$CCMM$,d:['ceylon.language','true'],$t:{t:Boolean$}};}};
exports.$prop$getFalse={get:getFalse,$crtmm$:function(){return{mod:$CCMM$,d:['ceylon.language','false'],$t:{t:Boolean$}};}};
var $true = true;
var $false = false;

function Comparison(name) {
    var that = new Comparison.$$;
    that.name = String$(name);
    return that;
}
initTypeProto(Comparison, 'ceylon.language::Comparison', $init$Basic());
Comparison.$crtmm$={$ps:[{t:String$}],$an:function(){return[shared(),abstract()]},mod:$CCMM$,d:['ceylon.language','Comparison']};
var Comparison$proto = Comparison.$$.prototype;
defineAttr(Comparison$proto, 'string', function(){ return this.name; },
  undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});









function Mapita(o,$$targs$$,$$mapita){
    $init$Mapita();
    if($$mapita===undefined)$$mapita=new Mapita.$$;
    set_type_args($$mapita,$$targs$$);
    Map({Item$Map:$$targs$$.V$Mapita,Key$Map:$$targs$$.K$Mapita},$$mapita);
    $$mapita.o=o;
    
    //AttributeDecl hash at caca.ceylon (6:2-6:56)
    $$mapita.$prop$getHash={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Mapita,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$at','hash']};}};
    $$mapita.$prop$getHash.get=function(){return hash};
    return $$mapita;
}
Mapita.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],$tp:{K$Mapita:{'var':'out','satisfies':[{t:Object$}]},V$Mapita:{'var':'out','satisfies':[{t:Object$}]}},satisfies:[{t:Map,a:{Item$Map:'V$Mapita',Key$Map:'K$Mapita'}}],$an:function(){return[shared()];},d:['','Mapita']};};
exports.Mapita=Mapita;
function $init$Mapita(){
    if(Mapita.$$===undefined){
        initTypeProto(Mapita,'Mapita',Basic,$init$Map());
        (function($$mapita){
            
            //MethodDecl equals at caca.ceylon (5:2-5:81)
            $$mapita.equals=function (other$2){
                var $$mapita=this;
                return $$mapita.getT$all()['ceylon.language::Map'].$$.prototype.equals.call(this,other$2);
            };
            $$mapita.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},$ps:[{$nm:'other',$mt:'prm',$t:{t:Object$},$an:function(){return[];}}],$cont:Mapita,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$m','equals']};};
            
            //AttributeDecl hash at caca.ceylon (6:2-6:56)
            defineAttr($$mapita,'hash',function(){
                var $$mapita=this;
                return attrGetter($$mapita.getT$all()['ceylon.language::Map'],'hash').call(this);
            },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:Mapita,$an:function(){return[shared(),actual()];},d:['ceylon.language','Map','$at','hash']};});
            
            //MethodDecl clone at caca.ceylon (7:2-7:43)
            $$mapita.clone=function (){
                return this;
            };
            $$mapita.clone.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Mapita,a:{V$Mapita:'V$Mapita',K$Mapita:'K$Mapita'}},$ps:[],$cont:Mapita,$an:function(){return[shared(),actual()];},d:['','Mapita','$m','clone']};};
            
            //MethodDef iterator at caca.ceylon (8:2-10:2)
            $$mapita.iterator=function iterator(){
                var $$mapita=this;

                function miter$3($$targs$$){
                    var $$miter$3=new miter$3.$$;
                    $$miter$3.$$targs$$=$$targs$$;
                    Iterator({Element$Iterator:{t:Entry,a:{Item$Entry:$$targs$$.V$Mapita,Key$Entry:$$targs$$.K$Mapita}}},$$miter$3);
                    add_type_arg($$miter$3,'Element$Iterator',{t:Entry,a:{Item$Entry:$$mapita.$$targs$$.V$Mapita,Key$Entry:$$mapita.$$targs$$.K$Mapita}});
                    
                    //AttributeDecl keys at caca.ceylon (10:6-10:33)
                    $$miter$3.keys=[];
                    for (var k in $$mapita.o) $$miter$3.keys.push(k);
                    
                    //AttributeDecl idx at caca.ceylon (11:6-11:27)
                    $$miter$3.idx=-1;
                    return $$miter$3;
                };miter$3.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Iterator,a:{Element$Iterator:{t:Entry,a:{Item$Entry:'V$Mapita',Key$Entry:'K$Mapita'}}}}],d:['','Mapita','$m','iterator','$o','miter']};};
                function $init$miter$3(){
                    if(miter$3.$$===undefined){
                        initTypeProto(miter$3,'Mapita.iterator.miter',Basic,Iterator);
                        (function($$miter$3){
                            //MethodDef next at caca.ceylon (12:6-18:6)
                            $$miter$3.next=function next(){
                                var $$miter=this;
                                $$miter.idx++;
                                if ($$miter.idx>=$$miter.keys.length)return getFinished();
                                var k$8=$$miter.keys[$$miter.idx];
                                var v$8=$$mapita.o[k$8]||null;
                                return Entry(k$8,v$8,{Key$Entry:$$mapita.$$targs$$.K$Mapita,Item$Entry:$$mapita.$$targs$$.V$mapita});
                            };$$miter$3.next.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Entry,a:{Item$Entry:'V$Mapita',Key$Entry:'K$Mapita'}},{t:Finished}]},$ps:[],$cont:miter$3,$an:function(){return[shared(),actual()];},d:['','Mapita','$m','iterator','$o','miter','$m','next']};};
                        })(miter$3.$$.prototype);
                    }
                    return miter$3;
                }
                $init$miter$3();
                var miter$9;
                function getMiter$9(){
                    if(miter$9===undefined){miter$9=$init$miter$3()({Element$Iterator:{t:Entry,a:{Item$Entry:$$mapita.$$targs$$.V$Mapita,Key$Entry:$$mapita.$$targs$$.K$Mapita}}});miter$9.$crtmm$=getMiter$9.$crtmm$;}
                    return miter$9;
                }
                getMiter$9.$crtmm$=function(){return{mod:$CCMM$,$t:{t:miter$3},d:['','Mapita','$m','iterator','$o','miter']};};
                $prop$getMiter$9={get:getMiter$9,$crtmm$:getMiter$9.$crtmm$};
                return getMiter$9();
            };$$mapita.iterator.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Iterator,a:{Element$Iterator:{t:Entry,a:{Item$Entry:'V$Mapita',Key$Entry:'K$Mapita'}}}},$ps:[],$cont:Mapita,$an:function(){return[shared(),actual()];},d:['','Mapita','$m','iterator']};};
            
            //MethodDef get at caca.ceylon (11:2-13:2)
            $$mapita.$get=function $get(k$3){
              var v=this.o[k$3];
              return v||null;
            };$$mapita.$get.$crtmm$=function(){return{mod:$CCMM$,$t:'V$Mapita',$ps:[{$nm:'k',$mt:'prm',$t:{t:Object$},$an:function(){return[];}}],$cont:Mapita,$an:function(){return[shared(),actual()];},d:['','Mapita','$m','get']};};
        })(Mapita.$$.prototype);
    }
    return Mapita;
}
exports.$init$Mapita=$init$Mapita;
$init$Mapita();
var larger = Comparison("larger");
function getLarger() { return larger }
var smaller = Comparison("smaller");
function getSmaller() { return smaller }
var equal = Comparison("equal");
function getEqual() { return equal }

exports.getLarger=getLarger;
exports.getSmaller=getSmaller;
exports.getEqual=getEqual;
exports.$prop$getLarger={get:getLarger,$crtmm$:function(){return{mod:$CCMM$,d:['ceylon.language','larger'],$t:{t:Comparison}};}};
exports.$prop$getSmaller={get:getSmaller,$crtmm$:function(){return{mod:$CCMM$,d:['ceylon.language','smaller'],$t:{t:Comparison}};}};
exports.$prop$getEqual={get:getEqual,$crtmm$:function(){return{mod:$CCMM$,d:['ceylon.language','equal'],$t:{t:Comparison}};}};

//These are operators for handling nulls
function exists(value) {
  return value !== null && value !== undefined;
}
function nonempty(value) {
  return value !== null && value !== undefined && !value.empty;
}

function isOfType(obj, type) {
  if (type && type.t) {
    if (type.t==='i' || type.t==='u') {
      return isOfTypes(obj, type);
    } else if (type.t==='T') {
      type=$retuple(type);
    }
    if (obj===null || obj===undefined) {
      return type.t===Null || type.t===Anything;
    }
    if (obj.getT$all === undefined) {
      if (obj.$crtmm$) {
        var _mm = getrtmm$$(obj);
        //We can navigate the metamodel
        if (_mm.d['$mt'] === 'mthd') {
          if (type.t === Callable) { //It's a callable reference
            if (type.a && type.a.Return$Callable && _mm['$t']) {
              //Check if return type matches
              if (extendsType(_mm['$t'], type.a.Return$Callable)) {
                if (type.a.Arguments$Callable && _mm['$ps'] !== undefined) {
                  var metaparams = _mm['$ps'];
                  if (metaparams.length == 0) {
                    return type.a.Arguments$Callable.t === Empty;
                  } else {
                    //check if arguments match
                    var comptype = type.a.Arguments$Callable;
                    for (var i=0; i < metaparams.length; i++) {
                      if (comptype.t !== Tuple || !extendsType(metaparams[i]['$t'], comptype.a.First$Tuple)) {
                        return false;
                      }
                      comptype = comptype.a.Rest$Tuple;
                    }
                  }
                }
                return true;
              }
            }
          }
        }
      }
      return false;
    }
    if (type.t.$$.T$name in obj.getT$all()) {
      if (type.t==Callable && !obj.$$targs$$ && getrtmm$$(obj) && obj.$crtmm$.$t && obj.$crtmm$.$ps!==undefined) {
        //Callable with no $$targs$$, we can build them from metamodel
        obj.$$targs$$={Return$Callable:obj.$crtmm$.$t,Arguments$Callable:{t:'T',l:[]}};
        for (var i=0; i < obj.$crtmm$.$ps.length; i++) {
          obj.$$targs$$.Arguments$Callable.l.push(obj.$crtmm$.$ps[i].$t);
        }
      }
      if (type.a && obj.$$targs$$) {
        for (var i in type.a) {
          var cmptype = type.a[i];
          var tmpobj = obj;
          var iance = null;
          var _mm = getrtmm$$(type.t);
          if (_mm && _mm.$tp && _mm.$tp[i]) iance=_mm.$tp[i]['var'];
          if (iance===null) {//null means no i in _mm.$tp
            //Type parameter may be in the outer type
            while (iance===null && tmpobj.$$outer !== undefined) {
              tmpobj=tmpobj.$$outer;
              var _tmpf = tmpobj.constructor.T$all[tmpobj.constructor.T$name];
              var _mmf = getrtmm$$(_tmpf);
              if (_mmf && _mmf.$tp && _mmf.$tp[i]) {
                iance=_mmf.$tp[i]['var'];
              }
            }
          }
          if (iance === 'out') {
            if (!extendsType(tmpobj.$$targs$$[i], cmptype)) {
              return false;
            }
          } else if (iance === 'in') {
            if (!extendsType(cmptype, tmpobj.$$targs$$[i])) {
              return false;
            }
          } else if (iance === undefined) {
            var _targ=tmpobj.$$targs$$[i];
            if (!(_targ && _targ.t && (_targ.t.$$ || _targ.t==='i' || _targ.t==='u')))return false;
            if (_targ.t.$$) {
              if (cmptype && cmptype.t && cmptype.t.$$) {
                if (!(cmptype.t.$$.T$name && _targ.t.$$.T$name === cmptype.t.$$.T$name))return false;
              } else if (cmptype && cmptype.t && cmptype.t==='i') {
                //_targ must satisfy all types in cmptype
                if (cmptype.t!==_targ.t || !cmptype.l || cmptype.l.length!==_targ.l.length)return false;
                for (var i=0; i<_targ.l.length;i++) {
                  if (!extendsType(_targ.l[i],cmptype))return false;
                }
              } else if (cmptype && cmptype.t && cmptype.t==='u') {
                //_targ must satisfy at least one type in cmptype
                if (cmptype.t!==_targ.t || !cmptype.l || cmptype.l.length!==_targ.l.length)return false;
                for (var i=0; i<_targ.l.length;i++) {
                  if (!extendsType(_targ.l[i],cmptype))return false;
                }
              }
            } else {
              if (cmptype.t!==_targ.t || !cmptype.l || cmptype.l.length!==_targ.l.length)return false;
              for (var i=0; i<_targ.l.length;i++) {
                if (!extendsType(_targ.l[i],cmptype))return false;
              }
            }
          } else if (iance === null) {
            console.log("Possible missing metamodel for " + type.t.$$.T$name + "<" + i + ">");
          } else {
            console.log("Don't know what to do about variance '" + iance + "'");
          }
        }
      }
      return true;
    }
  }
  return false;
}
function isOfTypes(obj, types) {
  if (obj===null) {
    for (var i=0; i < types.l.length; i++) {
      if(types.l[i].t===Null || types.l[i].t===Anything) return true;
      else if (types.l[i].t==='u') {
        if (isOfTypes(null, types.l[i])) return true;
      }
    }
    return false;
  }
  if (obj === undefined || obj.getT$all === undefined) { return false; }
  var unions = false;
  var inters = true;
  var _ints=false;
  var objTypes = obj.getT$all();
  for (var i = 0; i < types.l.length; i++) {
    var t = types.l[i];
    var partial = isOfType(obj, t);
    if (types.t==='u') {
      unions = partial || unions;
    } else {
      inters = partial && inters;
      _ints=true;
    }
  }
  return _ints ? inters||unions : unions;
}
function extendsType(t1, t2) { //true if t1 is subtype of t2
    if (t1 === undefined || t1.t === undefined || t1.t === Nothing || t2 === undefined || t2.t === undefined) {
      return true;//t2 === undefined;
    } else if (t2 && t2.t === Anything) {
      return true;
    } else if (t1 === null) {
      return t2.t === Null || t2.t === Anything;
    }
    if (t1.t === 'u' || t1.t === 'i') {
        if (t1.t==='i')removeSupertypes(t1.l);
        var unions = false;
        var inters = true;
        var _ints = false;
        for (var i = 0; i < t1.l.length; i++) {
            var partial = extendsType(t1.l[i], t2);
            if (t1.t==='i') {
                unions = partial||unions;
            } else {
                inters = partial&&inters;
                _ints=true;
            }
        }
        return _ints ? inters||unions : unions;
    }
    if (t2.t === 'u' || t2.t === 'i') {
        if (t2.t==='i')removeSupertypes(t2.l);
        var unions = false;
        var inters = true;
        var _ints = false;
        for (var i = 0; i < t2.l.length; i++) {
            var partial = extendsType(t1, t2.l[i]);
            if (t2.t==='u') {
                unions = partial||unions;
            } else {
                inters = partial&&inters;
                _ints=true;
            }
        }
        return _ints ? inters||unions : unions;
    }
    if (t1.t==='T') {
      if (t2.t==='T') {
        if (t1.l.length>=t2.l.length) {
          for (var i=0; i < t2.l.length;i++) {
            if (!extendsType(t1.l[i],t2.l[i]))return false;
          }
          return true;
        } else return false;
      } else {
        t1=$retuple(t1);
      }
    } else if (t2.t==='T') {
      t2=$retuple(t2);
    }
    for (t in t1.t.$$.T$all) {
        if (t === t2.t.$$.T$name || t === 'ceylon.language::Nothing') {
            if (t1.a && t2.a) {
                //Compare type arguments
                for (ta in t1.a) {
                    if (!extendsType(t1.a[ta], t2.a[ta])) return false;
                }
            }
            return true;
        }
    }
    return false;
}
function removeSupertypes(list) {
    for (var i=0; i < list.length; i++) {
        for (var j=i; i < list.length; i++) {
            if (i!==j) {
                if (extendsType(list[i],list[j])) {
                    list[j]=list[i];
                } else if (extendsType(list[j],list[i])) {
                    list[i]=list[j];
                }
            }
        }
    }
}

function className(obj) {
    function _typename(t) {
        if (t.t==='i' || t.t==='u') {
            var _sep = t.t==='i'?'&':'|';
            var ct = '';
            for (var i=0; i < t.l.length; i++) {
                if (i>0) { ct+=_sep; }
                ct += _typename(t.l[i]);
            }
            return String$(ct);
        } else {
            var tn = t.t.$$.T$name;
            if (t.a) {
                tn += '<';
                for (var i = 0; i < t.a.length; i++) {
                    if (i>0) { tn += ','; }
                    tn += _typename(t.a[i]);
                }
                tn += '>';
            }
            return tn;
        }
    }
    if (obj === null) return String$('ceylon.language::Null');
    if (obj === undefined) return String$("JavaScript UNDEFINED");
    var tn = obj.getT$name === undefined ? 'UNKNOWN' : obj.getT$name();
    if (tn === 'UNKNOWN') {
        if (typeof obj === 'function') {
            tn = 'ceylon.language::Callable';
        }
    }
    else if (obj.$$targs$$) {
        /*tn += '<';
        for (var i=0; i < obj.$$targs$$.length; i++) {
            if (i>0) { tn += ','; }
            tn += _typename(obj.$$targs$$[i]);
        }
        tn += '>';*/
    }
    return String$(tn);
}
className.$crtmm$={$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','className']};

function identityHash(obj) {
    return obj.BasicID;
}
identityHash.$crtmm$={$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','identityHash']};

function set_type_args(obj, targs) {
    if (obj===undefined)return;
    if (obj.$$targs$$ === undefined) {
        obj.$$targs$$={};
    }
    for (x in targs) {
        obj.$$targs$$[x] = targs[x];
    }
}
function add_type_arg(obj, name, type) {
    if (obj===undefined)return;
    if (obj.$$targs$$ === undefined) {
        obj.$$targs$$={};
    }
    obj.$$targs$$[name]=type;
}
function wrapexc(e,loc,file) {
  if (loc !== undefined) e.$loc=loc;
  if (file !== undefined) e.$file=file;
  return e;
}
function throwexc(e,loc,file) {
  if (loc !== undefined) e.$loc=loc;
  if (file !== undefined) e.$file=file;
  throw e;
}
exports.set_type_args=set_type_args;
exports.add_type_arg=add_type_arg;
exports.exists=exists;
exports.nonempty=nonempty;
exports.isOfType=isOfType;
exports.className=className;
exports.identityHash=identityHash;
exports.throwexc=throwexc;
exports.wrapexc=wrapexc;
function internalSort(comp, elems, $$$mptypes) {
    if (elems===undefined) {return getEmpty();}
    var arr = [];
    var it = elems.iterator();
    var e;
    while ((e=it.next()) !== getFinished()) {arr.push(e);}
    if (arr.length === 0) {return getEmpty();}
    arr.sort(function(a, b) {
        var cmp = comp(a,b);
        return (cmp===larger) ? 1 : ((cmp===smaller) ? -1 : 0);
    });
    return ArraySequence(arr, {Element$Iterable:$$$mptypes.Element$internalSort});
}
internalSort.$crtmm$=function(){return{
  $an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','internalSort'],
  $ps:[{$nm:'comparing',$t:{t:Callable,a:{Return$Callable:{t:Comparison},Arguments$Callable:{t:'T',l:['Element$internalSort','Element$internalSort']}}},$mt:'prm'},{$nm:'elements',$t:{t:Iterable,a:{Absent$Iterable:{t:Null},Element$Iterable:'Element$internalSort'}},$mt:'prm'}],
  $tp:{Element$internalSort:{}}, $t:{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:'Element$internalSort'}}
}};

function flatten(tf, $$$mptypes) {
  function rf() {
    var t = getEmpty();
    var e = null;
    var argc = arguments.length;
    var last = argc>0 ? arguments[argc-1] : undefined;
    if (typeof(last) === 'object' && typeof(last.Args$flatten) === 'object' && (last.Args$flatten.t==='T'||typeof(last.Args$flatten.t) === 'function')) {
      argc--;
    }
    for (var i=argc-1; i>=0; i--) {
      var c = arguments[i]===null ? Null :
        arguments[i] === undefined ? Empty :
        arguments[i].getT$all ? arguments[i].getT$all() :
        Anything;
      if (e === null) {
        e = c;
      } else if (e.t === 'u' && e.l.length > 0) {
        var l = [c];
        for (var j=0; j < e.l.length; j++) {
          l[j+1] = e.l[j];
        }
      } else {
        e = {t:'u', l:[e, c]};
      }
      var rest;
      if (t === getEmpty()) {
        rest={t:Empty};
      } else {
        rest={t:Tuple, a:t.$$targs$$};
      }
      t = Tuple(arguments[i], t, {First$Tuple:c, Element$Tuple:e, Rest$Tuple:rest});
    }
    return tf(t, t.$$targs$$);
  };
  rf.$$targs$$={Return$Callable:$$$mptypes.Return$flatten,Arguments$Callable:$$$mptypes.Args$flatten};
  return rf;
}
flatten.$crtmm$=function(){return{
  $an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','flatten'],
  $tp:{Return$flatten:{},Args$flatten:{'satisfies':[{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Anything}}}]}},
  $t:{t:Callable,a:{Return$Callable:'Return',Arguments$Callable:{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Anything}}}}},
  $p:[{$nm:'tupleFunction',$t:{t:Callable,a:{Return$Callable:'Return$flatten',Arguments$Callable:{t:'T',l:[{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Anything}}}]}}},$mt:'prm'}]
}};

function unflatten(ff, $$$mptypes) {
  if (getrtmm$$(ff) && ff.$crtmm$.$ps) {
    var ru=function ru(seq,$mptypes) {
      if (seq===undefined || seq.size === 0) { return ff(); }
      var pmeta = ff.$crtmm$.$ps;
      var _lim=Math.max(pmeta.length,seq.size);
      var a = [];
      for (var i = 0; i < _lim; i++) {
        if (pmeta[i]&&pmeta[i]['seq']) {
          a.push(seq.skipping(i).sequence);
          break;//we're done
        } else if (seq.size > i) {
          a.push(seq.$get(i));
        }
      }
      if ($mptypes && ff.$crtmm$.$tp)a.push($mptypes);
      return ff.apply(ru, a);
    }
  } else {
    var ru=function ru(seq) {
      if (seq===undefined || seq.size === 0) { return ff(); }
      var a = [];
      for (var i = 0; i < seq.size; i++) {
        a[i] = seq.$get(i);
      }
      a[i]=ru.$$targs$$;
      return ff.apply(ru, a);
    }
  }
  ru.$$targs$$={Return$Callable:$$$mptypes.Return$unflatten,Arguments$Callable:{t:'T',l:[$$$mptypes.Args$unflatten]}};
  return ru;
}
unflatten.$crtmm$=function(){return{
  $an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','unflatten'],
  $tp:{Return$unflatten:{},Args$unflatten:{'satisfies':[{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Anything}}}]}},
  $ps:[{$nm:'flatFunction',$t:{t:Callable,a:{Return$Callable:'Return$unflatten',Arguments$Callable:{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Anything}}}}},$mt:'prm'}],
  $t:{t:Callable,a:{Return$Callable:'Return$unflatten',Arguments$Callable:{t:'T',l:[{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Anything}}}]}}}
}};
exports.flatten=flatten;
exports.unflatten=unflatten;

//internal
function toTuple(iterable) {
  var seq = iterable.sequence;
  return Tuple(seq.first, seq.rest.sequence,
    {First$Tuple:seq.$$targs$$.Element$Iterable, Element$Tuple:seq.$$targs$$.Element$Iterable, Rest$Tuple:{t:Sequential, a:seq.$$targs$$}});
}
exports.toTuple=toTuple;
// implementation of object "process" in ceylon.language
function languageClass() {
    var lang = new languageClass.$$;
    Basic(lang);
    return lang;
}
languageClass.$crtmm$={$nm:'languageClass',$mt:'cls',$ps:[],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','language']};
initTypeProto(languageClass, "ceylon.language::language", $init$Basic());
var lang$proto=languageClass.$$.prototype;
defineAttr(lang$proto, 'version', function() {
    return String$("1.0.0",3);
},undefined,{$t:{t:String$}, $cont:lang$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','language','$at','version']});
defineAttr(lang$proto, 'majorVersion', function(){ return 1; },undefined,
  {$t:{t:Integer}, $cont:lang$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','language','$at','majorVersion']});
defineAttr(lang$proto, 'minorVersion', function(){ return 0; },undefined,
  {$t:{t:Integer}, $cont:lang$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','language','$at','minorVersion']});
defineAttr(lang$proto, 'releaseVersion', function(){ return 0; },undefined,
  {$t:{t:Integer}, $cont:lang$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','language','$at','releaseVersion']});
defineAttr(lang$proto, 'versionName', function(){ return String$("No More Mr Nice Guy",19); },undefined,
  {$t:{t:String$}, $cont:lang$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','language','$at','versionName']});
defineAttr(lang$proto, 'majorVersionBinary', function(){ return 6; },undefined,
  {$t:{t:Integer}, $cont:lang$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','language','$at','majorVersionBinary']});
defineAttr(lang$proto, 'minorVersionBinary', function(){ return 0; },undefined,
  {$t:{t:Integer}, $cont:lang$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','language','$at','minorVersionBinary']});
var languageString = String$("language", 8);
defineAttr(lang$proto, 'string', function() {
    return languageString;
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});

var language$ = languageClass();
function getLanguage() { return language$; }
exports.getLanguage=getLanguage;
exports.$prop$getLanguage={get:getLanguage,$crtmm$:function(){
  return {mod:$CCMM$,d:['ceylon.language','language'],$t:{t:languageClass}};
}};
function processClass() {
    var proc = new processClass.$$;
    Basic(proc);
    return proc;
}
processClass.$crtmm$={$nm:'processClass',$mt:'cls',$ps:[],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','process']};
initTypeProto(processClass, "ceylon.language::process", $init$Basic());
var process$proto = processClass.$$.prototype;

var argv = getEmpty();
var namedArgs = {};
if ((typeof process !== "undefined") && (process.argv !== undefined)) {
    // parse command line arguments
    if (process.argv.length > 1) {
        var args = process.argv.slice(1);
        for (var i=0; i<args.length; ++i) {
            var arg = args[i];
            if (arg.charAt(0) == '-') {
                var pos = 1;
                if (arg.charAt(1) == '-') { pos = 2; }
                arg = arg.substr(pos);
                pos = arg.indexOf('=');
                if (pos >= 0) {
                    namedArgs[arg.substr(0, pos)] = String$(arg.substr(pos+1));
                } else {
                    var value = args[i+1];
                    if ((value !== undefined) && (value.charAt(0) != '-')) {
                        namedArgs[arg] = String$(value);
                        ++i;
                    } else {
                        namedArgs[arg] = null;
                    }
                }
            }
            args[i] = String$(args[i]);
        }
        argv = ArraySequence(args, {Element$Iterable:{t:String$}});
    }
} else if (typeof window !== "undefined") {
    // parse URL parameters
    var parts = window.location.search.substr(1).replace('+', ' ').split('&');
    if ((parts.length > 1) || ((parts.length > 0) && (parts[0].length > 0))) {
        var argStrings = new Array(parts.length);
        //can't do "for (i in parts)" anymore because of the added stuff to arrays
        var i;
        for (i=0; i<parts.length; i++) { argStrings[i] = String$(parts[i]); }
        argv = ArraySequence(argStrings, {Element$Iterable:{t:String$}});
        
        for (i=0; i < parts.length; i++) {
            var part = parts[i];
            var pos = part.indexOf('=');
            if (pos >= 0) {
                var value = decodeURIComponent(part.substr(pos+1));
                namedArgs[part.substr(0, pos)] = String$(value);
            } else {
                namedArgs[part] = null;
            }
        }
    }
}
defineAttr(process$proto, 'arguments', function(){ return argv; },undefined,
  {$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','process','$at','arguments']});
process$proto.namedArgumentPresent = function(name) {
    return (name in namedArgs);
}
process$proto.namedArgumentValue = function(name) {
    var value = namedArgs[name];
    return (value !== undefined) ? value : null;
}

var properties = {};
if (typeof navigator !== "undefined") {
    if (navigator.language !== undefined) {
        properties["user.language"] = String$(navigator.language);
    }
    if (navigator.platform !== undefined) {
        properties["os.name"] = String$(navigator.platform);
    }
    if (navigator.userLanguage||navigator.browserLanguage||navigator.language) {
        properties["user.locale"]=String$(navigator.userLanguage||navigator.browserLanguage||navigator.language);
    }
}
if (typeof process !== "undefined") {
    if (process.platform !== undefined) {
        properties["os.name"] = String$(process.platform);
    }
    if (process.arch !== undefined) {
        properties["os.arch"] = String$(process.arch);
    }
}
if (typeof document !== "undefined") {
    if (document.defaultCharset !== undefined) {
        properties["file.encoding"] = String$(document.defaultCharset);
    }
}

var linesep = String$('\n', 1);
var filesep = String$('/', 1);
var pathsep = String$(':', 1);
var osname = properties["os.name"];
if ((osname !== undefined) && (osname.search(/windows/i) >= 0)) {
    linesep = String$("\r\n", 2);
    filesep = String$('\\', 1);
    pathsep = String$(';', 1);
}
properties["line.separator"] = linesep;
properties["file.separator"] = filesep;
properties["path.separator"] = pathsep;

process$proto.propertyValue = function(name) {
    var value = properties[name];
    return (value !== undefined) ? value : null;
}

if ((typeof process !== "undefined") && (process.stdout !== undefined)) {
    process$proto.write = function(string) {
        if(string)process.stdout.write(string.valueOf());
    }
    process$proto.writeLine = function(line) {
        if(line)process$proto.write(line.valueOf());
        process$proto.write(linesep.valueOf());
    }
} else if ((typeof console !== "undefined") && (console.log !== undefined)) {
    process$proto.writeLine = function(line) {
        console.log(line?line.valueOf():'');
    }
    process$proto.write = process$proto.writeLine;
} else {
    process$proto.write = function() {};
    process$proto.writeLine = function() {};    
}

if ((typeof process !== "undefined") && (process.stderr !== undefined)) {
    process$proto.writeError = function(string) {
        if(string)process.stderr.write(string.valueOf());
    }
    process$proto.writeErrorLine = function(line) {
        if(line)process$proto.writeError(line.valueOf());
        process$proto.writeError(linesep.valueOf());
    }
} else if ((typeof console !== "undefined") && (console.error !== undefined)) {
    process$proto.writeErrorLine = function(line) {
        console.error(line?line.valueOf():'');
    }
    process$proto.writeError = process$proto.writeErrorLine;
} else {
    process$proto.writeError = process$proto.write;
    process$proto.writeErrorLine = process$proto.writeLine;    
}

process$proto.flush = function(){}
process$proto.flushError=function(){}
process$proto.readLine = function() {
    return String$("", 0);//TODO
}

if ((typeof process !== "undefined") && (process.exit !== undefined)) {
    process$proto.exit = function(code) {
        process.exit(code);
    }
} else {
    process$proto.exit = function() {}
}

var processString = String$("process", 7);
defineAttr(process$proto, 'string', function() {
    return processString;
},undefined,{$t:{t:String$},$cont:process$proto,$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});


var process$ = processClass();
function getProcess() { return process$; }
getProcess.$crtmm$=function(){return{
  mod:$CCMM$,$t:{t:processClass},$an:function(){return[shared(),native()];},d:['ceylon.language','process']};
}
exports.getProcess=getProcess;
exports.$prop$getProcess={get:getProcess,$crtmm$:function(){return{mod:$CCMM$,d:['ceylon.language','process'],$t:{t:processClass}
}}};
// system

function systemClass() {
    var proc = new systemClass.$$;
    Basic(proc);
    return proc;
}
systemClass.$crtmm$={$nm:'systemClass',$mt:'cls',$ps:[],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','system']};
initTypeProto(systemClass, "ceylon.language::system", $init$Basic());
var system$proto = systemClass.$$.prototype;

defineAttr(system$proto, 'milliseconds', function() {
    return Date.now();
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','system','$at','milliseconds']});
defineAttr(system$proto, 'nanoseconds', function() {
    return Date.now()*1000000;
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','system','$at','nanoseconds']});
defineAttr(system$proto, 'timezoneOffset', function(){
  return new Date().getTimezoneOffset()*60000;
},undefined,{$t:{t:Integer}, $cont:system$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','system','$at','timezoneOffset']});
defineAttr(system$proto, 'locale', function(){
  return properties["user.locale"] || String$("Unknown",7);
},undefined,{$t:{t:String$}, $cont:system$proto, $an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','system','$at','locale']});
var systemString = String$("system", 7);
defineAttr(system$proto, 'string', function() {
    return systemString;
},undefined,{$t:{t:String$},$cont:system$proto,$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});

var system$ = systemClass();
function getSystem() { return system$; }
exports.getSystem=getSystem;
exports.$prop$getSystem={get:getSystem,$crtmm$:function(){return{
  mod:$CCMM$,d:['ceylon.language','system'],$t:{t:systemClass}
};}};
// runtime

function runtimeClass() {
    var proc = new runtimeClass.$$;
    Basic(proc);
    return proc;
}
runtimeClass.$crtmm$={$nm:'runtimeClass',$mt:'cls',$ps:[],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','runtime']};
initTypeProto(runtimeClass, "ceylon.language::runtime", $init$Basic());
var runtime$proto = runtimeClass.$$.prototype;

defineAttr(runtime$proto, 'name', function() {
    if (typeof process !== "undefined" && process.execPath && process.execPath.match(/node(js)?(\.exe)?$/)) {
        return String$("node.js", 7);
    } else if (typeof window === 'object') {
        return String$("Browser", 7);
    }
    return String$("Unknown JavaScript environment", 30);
},undefined,{$t:{t:String$},$cont:runtime$proto,$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','runtime','$at','name']});
defineAttr(runtime$proto, 'version', function() {
    if (typeof process !== "undefined" && typeof process.version === 'string') {
        return String$(process.version);
    }
    return String$("Unknown");
},undefined,{$t:{t:String$},$cont:runtime$proto,$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','runtime','$at','version']});
defineAttr(runtime$proto, 'integerSize', function() {
    return 53;
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','runtime','$at','integerSize']});
var $minIntegerValue = Integer(-9007199254740991); //-(2^53-1)
defineAttr(runtime$proto, 'minIntegerValue', function() {
    return $minIntegerValue;
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','runtime','$at','minIntegerValue']});
var $maxIntegerValue = Integer(9007199254740989); //(2^53-3) => ((2^53)-2 is NaN)
defineAttr(runtime$proto, 'maxIntegerValue', function() {
    return $maxIntegerValue;
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','runtime','$at','maxIntegerValue']});
var $maxArraySize = Integer(4294967295); //(2^32-1)
defineAttr(runtime$proto, 'maxArraySize', function() {
    return $maxArraySize;
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','runtime','$at','maxArraySize']});
var runtimeString = String$("runtime", 7);
defineAttr(runtime$proto, 'string', function() {
    return runtimeString;
},undefined,{$t:{t:String$},$cont:runtime$proto,$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});

var runtime$ = runtimeClass();
function getRuntime() { return runtime$; }
exports.getRuntime=getRuntime;
exports.$prop$getRuntime={get:getRuntime,$crtmm$:function(){
  return{mod:$CCMM$,d:['ceylon.language','runtime'],$t:{t:runtimeClass}};}};
// operatingSystem

function operatingSystemClass() {
    var proc = new operatingSystemClass.$$;
    Basic(proc);
    return proc;
}
operatingSystemClass.$crtmm$={$nm:'operatingSystemClass',$mt:'cls',$ps:[],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','operatingSystem']};
initTypeProto(operatingSystemClass, "ceylon.language::operatingSystem", $init$Basic());
var operatingSystem$proto = operatingSystemClass.$$.prototype;

defineAttr(operatingSystem$proto, 'name',function() {
    if (typeof process !== "undefined" && typeof process.platform === 'string') {
        return String$(process.platform);
    }
    return String$("Unknown");
},undefined,{$t:{t:String$},$cont:operatingSystem$proto,$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','operatingSystem','$at','name']});
defineAttr(operatingSystem$proto, 'version', function() {
    return String$("Unknown");
},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','operatingSystem','$at','version']});
defineAttr(operatingSystem$proto, 'newline', function(){ return linesep; },undefined,
  {$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','operatingSystem','$at','newline']});
defineAttr(operatingSystem$proto, 'fileSeparator', function(){ return filesep; },undefined,
  {$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','operatingSystem','$at','fileSeparator']});
defineAttr(operatingSystem$proto, 'pathSeparator', function(){ return pathsep; },undefined,
  {$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','operatingSystem','$at','pathSeparator']});
var operatingSystemString = String$("operatingSystem", 7);
defineAttr(operatingSystem$proto, 'string', function() {
    return operatingSystemString;
},undefined,{$t:{t:String$},$cont:operatingSystem$proto,$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});

var operatingSystem$ = operatingSystemClass();
function getOperatingSystem() { return operatingSystem$; }
exports.getOperatingSystem=getOperatingSystem;
exports.$prop$getOperatingSystem={get:getOperatingSystem,$crtmm$:function(){
  return {mod:$CCMM$,d:['ceylon.language','operatingSystem'],$t:{t:operatingSystemClass}};
}};
function addSuppressedException(/*Exception*/sup,/*Exception*/e) {
    if (e.$sups$===undefined) {
        e.$sups$=[];
    }
    if (sup.getT$name === undefined) sup = NativeException(sup);
    e.$sups$.push(sup);
}
exports.addSuppressedException=addSuppressedException;
function suppressedExceptions(/*Exception*/e) {
    return e.$sups$===undefined?getEmpty():e.$sups$;
}
suppressedExceptions.$crtmm$=function(){
  return {mod:$CCMM$,d:['ceylon.language','suppressedExceptions'],$t:{t:Sequential,a:{Absent$Iterable:{t:Null},Element$Iterable:{t:Exception}}},$ps:[{$nm:'exception',$mt:'prm',$t:{t:Exception}}]};
}
exports.suppressedExceptions=suppressedExceptions;

function $retuple(t) { //receives {t:'T',l:[...]}
  if (t.t!=='T')return t;
  var e;
  var r={t:Empty};
  for (var i=t.l.length-1;i>=0;i--){
    var f=$retuple(t.l[i]);
    var e=(r.a&&r.a.Element$Tuple)||f;
    if (r.a&&r.a.Element$Tuple){
      if (e.l) {
        var l2=[];for(var j=0;j<e.l.length;j++)l2.push(e.l[j]);
        l2.unshift(f);
        e={t:'u',l:l2};
      } else {
        e = {t:'u',l:[f,e]};
      }
    }
    r={t:Tuple,a:{First$Tuple:f,Element$Tuple:e,Rest$Tuple:r}};
  }
  return r;
}
function validate$params(ps,t,msg) {
  if (t.t===Nothing)return;
  if (!ps || ps.length==0) {
    if (t.t===Empty)return;
  } else if (t.t==='T') {
    if (ps.length==t.l.length) {
      //TODO check each parameter
      for (var i=0;i<ps.length;i++)
        if (!extendsType(t.l[i],ps[i].$t))throw IncompatibleTypeException$meta$model(msg);
      return;
    }
  } else { //it's already a tuple, navigate it
    console.log("TODO!!!! validate$params with Tuple type");
  }
  throw IncompatibleTypeException$meta$model(msg);
}
function validate$typeparams(t,tparms,types) {
  if (tparms) {
    if (types===undefined||types.size<1)
      throw TypeApplicationException$meta$model(String$("Missing type arguments"));
    var i=0;
    t.a={};
    for (var tp in tparms) {
      var _type=types.$get(i);
      if (_type===undefined)
        throw TypeApplicationException$meta$model(String$("Missing type argument for " + tp));
      var _tp = tparms[tp];
      var _ta = _type.tipo;
      t.a[tp]= _ta.t ? _ta : {t:_type.tipo};
      if ((_tp.satisfies && _tp.satisfies.length>0) || (_tp.of && _tp.of.length > 0)) {
        var restraints=(_tp.satisfies && _tp.satisfies.length>0)?_tp.satisfies:_tp.of;
        for (var j=0; j<restraints.length;j++) {
          if (!extendsType(t.a[tp],restraints[j]))
            throw TypeApplicationException$meta$model(String$("Type argument for " + tp + " violates type parameter constraints"));
        }
      }
      i++;
    }
  }
}
function tupleize$params(ps,aux) {
  if (!ps || ps.length==0)return {t:Empty};
  var tupa={t:'T',l:[]};
  for (var i=ps.length-1; i>=ps.length;i--) {
    var e=ps[i].$t;
    if (typeof(e)==='string'&&aux&&aux[e])e=aux[e];
    if (tupa.t==='T') {//tuple
      tupa.l.unshift(e);
    } else { //union
      tupa={t:'T',l:[e,tupa]};
    }
    if (ps[i].$def) {
      tupa={t:'u',l:[{t:Empty},tupa]};
    }
  }
  return tupa;
}
function $qname(mm) {
  if (mm.t) {
    mm=mm.t;
  }
  if (mm.$crtmm$)mm=getrtmm$$(mm);
  if (!mm.d)return "[unnamed type]";
  var qn=mm.d[0];
  if (qn==='$')qn='ceylon.language';
  for (var i=1; i<mm.d.length; i++)if(mm.d[i][0]!=='$')qn+=(i==1?"::":".")+mm.d[i];
  return qn;
}
function resolve$typearg(ta,mm) {
  var r=mm.$tp?mm.$tp[ta]:undefined;
  while (!r && mm.$cont) {
    mm=mm.$cont;
    if (mm.$tp)r=mm.$tp[ta];
  }
  if (r) {
    if (r.satisfies)
      return r.satisfies.length==1?r.satisfies[0]:{t:'i',l:r.satisfies};
    return {t:Anything};
  }
  console.log("MISSING definition of type argument " + ta + " in " + $qname(mm));
  return {t:Anything};
}

function convert$params(mm,a) {
  var ps=mm.$ps;
  if (ps===undefined || ps.length===0){
    if (a && a.size>0)
      throw InvocationException$meta$model(String$("Passing parameters to no-args callable"));
    return [];
  }
  if (a===undefined)a=[];
  var fa=[];
  var sarg;
  for (var i=0; i<ps.length;i++) { //check def/seq params
    var p=ps[i];
    var val_t=sarg?sarg.$$targs$$.a.Element$Iterable:p.$t,mm;
    if (typeof(val_t)==='string')val_t=resolve$typearg(val_t,mm);
    if (a[i]===undefined) {
      if (p.$def||p.seq)fa.push(undefined);
      else {
        throw InvocationException$meta$model(String$("Wrong number of arguments (should be " + ps.length + ")"));
      }
    } else if (sarg) {
      sarg.push(a[i]);
    } else if (p.seq) {
      sarg=[].reifyCeylonType(p.$t); fa.push(sarg);
      val_t=sarg.$$targs$$.a.Element$Sequential;
      if (typeof(val_t)==='string')val_t=resolve$typearg(val_t,mm);
      for (var j=i; j<a.size;j++){
        if (!isOfType(a[j],val_t))throw IncompatibleTypeException$meta$model("Wrong type for argument " + j + ", expected " + typeLiteral$meta({Type$typeLiteral:val_t}).string + " got " + className(a[j]));
        sarg.push(a[j]);
      }
      i=j;
    } else {
      fa.push(a[i]);
    }
    if (a[i]!==undefined && !isOfType(a[i],val_t))throw IncompatibleTypeException$meta$model("Wrong type for argument " + i + ", expected " + typeLiteral$meta({Type$typeLiteral:val_t}).string + " got " + className(a[i]));
  }
  if (a.size>i)throw InvocationException$meta$model("Too many arguments");
  a = fa;
  return a;
}

function getrtmm$$(x) {
  if (x===undefined||x===null)return undefined;
  if (typeof(x.$crtmm$)==='function')x.$crtmm$=x.$crtmm$();
  return x.$crtmm$;
}
exports.getrtmm$$=getrtmm$$;
/*Native Implementation of annotations() */
function annotations$meta(anntype, progelem, $$$mptypes) {
  if (progelem.tipo)progelem=progelem.tipo;
  var mm = getrtmm$$(progelem);
  if (progelem.$anns)mm={$an:typeof(progelem.$anns)==='function'?progelem.$anns():progelem.$anns};
  if (mm && mm.$an) {
    var anns=mm.$an;
    if (typeof(anns) === 'function') {
      anns=anns();
      mm.$an=anns;
    }
    if (anntype.tipo.$$.T$all['ceylon.language::OptionalAnnotation'] !== undefined) {
      //find the first one and return it
      for (var i=0; i < anns.length; i++) {
        if (isOfType(anns[i], {t:anntype.tipo}))return anns[i];
      }
      return null;
    }
    //gather all annotations of the required type and return them
    var r=[];
    for (var i=0; i < anns.length; i++) {
      if (isOfType(anns[i], {t:anntype.tipo}))r.push(anns[i]);
    }
    return r.length==0?getEmpty():r.reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:ConstrainedAnnotation,
      a:{Value$ConstrainedAnnotation:$$$mptypes.Value$annotations,Values$ConstrainedAnnotation:$$$mptypes.Values$annotations,
      ProgramElement$ConstrainedAnnotation:$$$mptypes.ProgramElement$annotations}}});
  }
  return null;
}
annotations$meta.$crtmm$=function(){return{mod:$CCMM$,$t:'Values$annotations',$ps:[
  {$nm:'annotationType',$mt:'prm',$t:{t:Class$meta$model,a:{Type$Class:{t:ConstrainedAnnotation,a:{Values$ConstrainedAnnotation:'Values$annotations',Value$ConstrainedAnnotation:'Value$annotations',ProgramElement$ConstrainedAnnotation:'ProgramElement$annotations'}}}}},{$nm:'programElement',$mt:'prm',$t:'ProgramElement$annotations'}],
  $tp:{Value$annotations:{'satisfies':[{t:ConstrainedAnnotation$meta$model,a:{Values$ConstrainedAnnotation:'Values$annotations',Value$ConstrainedAnnotation:'Value$annotations',ProgramElement$ConstrainedAnnotation:'ProgramElement$annotations'}}]},Values$annotations:{},ProgramElement$annotations:{'var':'in','satisfies':[{t:Annotated$meta$model}]}},
  $an:function(){return[shared(),$native()];},d:['ceylon.language.meta','annotations']};};
exports.annotations$meta=annotations$meta;
function JsResource(uri,$$jsResource){
  $init$JsResource();
  if($$jsResource===undefined)$$jsResource=new JsResource.$$;
  $$jsResource.uri_=uri;
  Resource($$jsResource);
  $$jsResource.$prop$getUri={$crtmm$:function(){return{mod:$CCMM$,$t:{t:String$},$cont:JsResource,$an:function(){return[shared(),actual()];},d:['ceylon.language','Resource','$at','uri']};}};
  $$jsResource.$prop$getUri.get=function(){return uri};
  $$jsResource.$prop$getSize={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Integer},$cont:JsResource,$an:function(){return[shared(),actual()];},d:['ceylon.language','Resource','$at','size']};}};
  $$jsResource.$prop$getSize.get=function(){return size};
  return $$jsResource;
}
JsResource.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[{$nm:'uri',$mt:'prm',$t:{t:String$},$an:function(){return[shared(),actual()];}}],satisfies:[{t:Resource}],d:['ceylon.language','Resource']};};
function $init$JsResource(){
  if(JsResource.$$===undefined){
    initTypeProto(JsResource,'JsResource',Basic,Resource);
    (function($$jsResource){
      defineAttr($$jsResource,'uri',function(){return this.uri_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:JsResource,$an:function(){return[shared(),actual()];},d:['ceylon.language','Resource','$at','uri']};});
            
      defineAttr($$jsResource,'size',function(){
        var $elf=this;
        if (getRuntime().name === 'node.js') {
          var _fr=require;
          var _fp=$elf.uri;
          if (_fp.substring(0,5)==='file:')_fp=_fp.substring(_fp.indexOf(':')+1);
          return _fr('fs').statSync(_fp).size;
        } else if (getRuntime().name === 'Browser') {
          alert('Resource.size not implemented yet');
        } else {
          print("Resource handling unsupported in this JS platform.");
        }
        return -1;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Integer},$cont:JsResource,$an:function(){return[shared(),actual()];},d:['ceylon.language','Resource','$at','size']};});
            
      $$jsResource.textContent=function textContent(encoding$2){
        var $elf=this;
        if(encoding$2===undefined){encoding$2=$elf.textContent$defs$encoding(encoding$2);}
        if (getRuntime().name === 'node.js') {
          var _fr=require;
          var fs=_fr('fs');
          encoding$2=encoding$2.toLowerCase();
          if(encoding$2.initial(4)==="utf-")encoding$2='utf'+encoding$2.substring(4);
          var _fp=$elf.uri;
          if (_fp.substring(0,5)==='file:')_fp=_fp.substring(_fp.indexOf(':')+1);
          var t = fs.readFileSync(_fp, encoding$2);
          return String$(t);
        } else if (getRuntime().name === 'Browser') {
          alert("Resource.textContent() not implemented yet");
        } else {
          throw Error("Resource handling unsupported in this JS platform");
        }
      };$$jsResource.textContent.$crtmm$=function(){return{mod:$CCMM$,$t:{t:String$},$ps:[{$nm:'encoding',$mt:'prm',$def:1,$t:{t:String$},$an:function(){return[];}}],$cont:JsResource,$an:function(){return[shared(),actual()];},d:['ceylon.language','Resource','$m','textContent']};};
        })(JsResource.$$.prototype);
    }
    return JsResource;
}
$init$JsResource();
/* Metamodel module and package objects */
var $loadedModules$={};
exports.$loadedModules$=$loadedModules$;
function $addmod$(mod, modname) {
  $loadedModules$[modname] = mod;
}
exports.$addmod$=$addmod$;
function modules$2(){
    var $$modules=new modules$2.$$;
    defineAttr($$modules,'list',function(){
        var mods=[];
        for (var m in $loadedModules$) {
          var slashPos = m.lastIndexOf('/');
          mods.push(this.find(m.substring(0,slashPos), m.substring(slashPos+1)));
        }
        return ArraySequence(mods,{Element$Iterable:{t:Module$meta$declaration}});
    },undefined,{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Module$meta$declaration}}},$cont:modules$2,$an:function(){return[shared()];},d:['ceylon.language.meta','modules','$at','list']});
    function find(name,version){
        var modname = name + "/" + (version?version:"unversioned");
        var lm = $loadedModules$[modname];
        if (!lm) {
          var mpath;
          if (name === 'default' && version=='unversioned') {
            mpath = name + "/" + name;
          } else {
            mpath = name.replace(/\./g,'/') + '/' + version + "/" + name + "-" + version;
          }
          try {lm = require(mpath);}catch(e){return null;}
        }
        if (lm && lm.$CCMM$) {
          lm = Modulo(lm);
          $loadedModules$[modname] = lm;
        }
        return lm === undefined ? null : lm;
    }
    $$modules.find=find;
    find.$crtmm$={mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Module$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}},{$nm:'version',$mt:'prm',$t:{t:String$}}],$cont:modules$2,$an:function(){return[shared()];},d:['ceylon.language.meta','modules','$m','find']};
    defineAttr($$modules,'$default',function(){
        return find('default',"unversioned");
    },undefined,{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Module$meta$declaration}]},$cont:modules$2,$an:function(){return[shared()];},d:['ceylon.language.meta','modules','$at','default']});
    return $$modules;
}
function $init$modules$meta(){
    if (modules$2.$$===undefined){
        initTypeProto(modules$2,'ceylon.language.meta::modules',Basic);
    }
    return modules$2;
}
exports.$init$modules$meta=$init$modules$meta;
$init$modules$meta();
var modules$meta=modules$2();
var getModules$meta=function(){
    return modules$meta;
}
exports.getModules$meta=getModules$meta;

function Modulo(meta, $$modulo){
  $init$Modulo();
  if ($$modulo===undefined)$$modulo=new Modulo.$$;
  Module$meta$declaration($$modulo);
  $$modulo.meta=meta;
  $$modulo.$anns=meta.$mod$ans$;
  var mm = meta.$CCMM$;
  if (typeof(mm)==='function') {
    mm=mm();meta.$CCMM$=mm;
  }
  var name=String$(mm['$mod-name']);
  defineAttr($$modulo,'name',function(){return name;},undefined,{mod:$CCMM$,$t:{t:String$},$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$at','name']});
  defineAttr($$modulo,'qualifiedName',function(){return name;},undefined,{mod:$CCMM$,$t:{t:String$},$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$at','qualifiedName']});
  var version=String$(mm['$mod-version']);
  defineAttr($$modulo,'version',function(){return version;},undefined,{mod:$CCMM$,$t:{t:String$},$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$at','version']});
  defineAttr($$modulo,'members',function(){
    if (mm['$pks$'] === undefined) {
      mm['$pks$'] = {};
      for (mem in this.meta.$CCMM$) {
        if (typeof(mem) === 'string' && mem[0]!=='$') {
          mm['$pks$'][mem] = Paquete(mem, this, mm[mem]);
        }
      }
    }
    var m = [];
    for (mem in mm['$pks$']) {
      if (typeof(mem) === 'string') {
        m.push(mm['$pks$'][mem]);
      }
    }
    return ArraySequence(m,{Element$Iterable:{t:Package$meta$declaration}});
  },undefined,{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Package$meta$declaration}}},$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$at','members']});
  defineAttr($$modulo,'dependencies',function(){
    if (typeof(meta.$mod$imps)==='function')meta.$mod$imps=meta.$mod$imps();
    var deps=mm['$mod-deps'];
    if (typeof(deps[0]) === 'string') {
      var _d=[];
      for (var d in meta.$mod$imps) {
        var spos = d.lastIndexOf('/');
        _d.push(Importa(String$(d.substring(0,spos)), String$(d.substring(spos+1)),this,meta.$mod$imps[d]));
      }
      deps = ArraySequence(_d,{Element$Iterable:{t:Import$meta$declaration}});
      mm['$mod-deps'] = deps;
    }
    return deps;
  },undefined,{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:Import$meta$declaration}}},$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$at','dependencies']});
  function findPackage(pknm){
    if (mm['$pks$'] === undefined) this.members;
    if (pknm==='$')pknm='ceylon.language';
    var pk = mm['$pks$'][pknm];
    return pk===undefined ? null : pk;
  }
  $$modulo.findPackage=findPackage;
  findPackage.$crtmm$={mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Package$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$m','findPackage']};
  function findImportedPackage(pknm){
    var pk = this.findPackage(pknm);
    if (pk) return pk;
    var deps=this.dependencies;
    if (pknm.match('^ceylon\\.language')) {
      if (deps===getEmpty())deps=[];
      deps.push(Importa('ceylon.language', $CCMM$['$mod-version']),this);
    }
    for (var i=0; i < deps.length; i++) {
      pk = deps[i].container.findImportedPackage(pknm);
      if (pk)return pk;
    }
    return null;
  }
  $$modulo.findImportedPackage=findImportedPackage;
  findImportedPackage.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Package$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$m','findImportedPackage']};};
  function annotations($$$mptypes){
    var anns = this.meta.$mod$ans$;
    if (typeof(anns) === 'function') {
      anns = anns();
      this.meta.$mod$ans$=anns;
    } else if (anns === undefined) {
      anns = [];
    }
    var r = [];
    for (var i=0; i < anns.length; i++) {
      var an = anns[i];
      if (isOfType(an, $$$mptypes.Annotation$annotations)) r.push(an);
    }
    return r.reifyCeylonType({Element$Iterable:$$$mptypes.Annotation$annotations});
  }
  $$modulo.annotations=annotations;
  defineAttr($$modulo,'string',function(){return String$("module " + this.name+"/" + this.version);},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});

  annotations.$crtmm$={mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Annotation'}},$ps:[],$cont:Modulo,$tp:{Annotation:{'var':'out','satisfies':[{t:Annotation,a:{Value:'Annotation'}}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$m','annotations']};

  function resourceByPath(_path) {
    var mpath;
    var sep = getOperatingSystem().fileSeparator;
    if ($$modulo.name === 'default' && $$modulo.version=='unversioned') {
      mpath = $$modulo.name;
    } else {
      mpath = $$modulo.name.replace(/\./g,sep) + sep + $$modulo.version;
    }
    if (_path[0]===sep) {
      mpath += _path;
    } else {
      mpath += sep + _path;
    }
    if (getRuntime().name === 'node.js') {
      var _fr=require;//this is so that requirejs leaves us the fuck alone
      var pm=_fr('path');
      var mods=process.env.NODE_PATH.split(getOperatingSystem().pathSeparator);
      var fs=_fr('fs');
      for (var i=0; i<mods.length; i++) {
        var fp = pm.resolve(mods[i], mpath);
        if (fs.existsSync(fp)) {
          var f = fs.statSync(fp);
          if (f && f.isFile()) {
            return JsResource('file:'+fp);
          }
        }
      }
    } else if (getRuntime().name === 'Browser') {
      return JsResource(require.toUrl(mpath));
    } else {
      print("Resources unsupported in this environment.");
    }
    return null;
  }
  $$modulo.resourceByPath=resourceByPath;
  resourceByPath.$crtmm$=function(){return {mod:$CCMM$,$t:{t:'u',l:[{t:Null},{t:Resource}]},$ps:[{$nm:'path',$mt:'prm',$t:{t:String$}}],$cont:Modulo,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Module','$m','resourceByPath']};};
  return $$modulo;
}
Modulo.$crtmm$={mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Module$meta$declaration}],$an:function(){return[shared()];},d:['ceylon.language.meta.declaration','Module']};
exports.Modulo=Modulo;
function $init$Modulo(){
    if (Modulo.$$===undefined){
        initTypeProto(Modulo,'Modulo',Basic,Module$meta$declaration);
    }
    return Modulo;
}
exports.$init$Modulo=$init$Modulo;
$init$Modulo();
function Importa(name,version,mod,anns,$$importa){
  $init$Importa();
  if ($$importa===undefined)$$importa=new Importa.$$;
  Import$meta$declaration($$importa);
  $$importa.name=name;
  $$importa.version=version;
  $$importa._cont=mod;
  $$importa.$anns=anns;
  defineAttr($$importa,'name',function(){return name;},undefined,{mod:$CCMM$,$t:{t:String$},$cont:Importa,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Import','$at','name']});
  defineAttr($$importa,'version',function(){return version;},undefined,{mod:$CCMM$,$t:{t:String$},$cont:Importa,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Import','$at','version']});
  defineAttr($$importa,'shared',function(){
    if (typeof(this.$anns)==='function')this.$anns=this.anns();
    if (this.$anns)for (var i=0;i<this.$anns.length;i++) {
      if (this.$anns[i]===shared)return true;
    }
return false;},undefined,{mod:$CCMM$,$t:{t:Boolean$},$cont:Importa,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Import','$at','shared']});
    defineAttr($$importa,'optional',function(){
    if (typeof(this.$anns)==='function')this.$anns=this.$anns();
    if (this.$anns)for (var i=0;i<this.$anns.length;i++) {
      if (this.$anns[i]===optional)return true;
    }
return version;},undefined,{mod:$CCMM$,$t:{t:Boolean$},$cont:Importa,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Import','$at','optional']});
    defineAttr($$importa,'container',function(){
      if (this._cont===undefined) {
          this._cont = getModules$meta().find(this.name,this.version);
      }
      return this._cont;
    },undefined,{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:Importa,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Import','$at','container']});
  defineAttr($$importa,'string',function(){
    return String$("import " + name + "/" + version);
  },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:Importa,d:['ceylon.language','Object','$at','string']};});
    return $$importa;
}
Importa.$crtmm$={mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Import$meta$declaration}],$an:function(){return[shared()];},d:['ceylon.language.meta.declaration','Import']};
exports.Importa=Importa;
function $init$Importa(){
    if (Importa.$$===undefined){
        initTypeProto(Importa,'Importa',Basic,Import$meta$declaration);
    }
    return Importa;
}
exports.$init$Importa=$init$Importa;
$init$Importa();
function Paquete(name, container, pkg, $$paquete){
    $init$Paquete();
    if ($$paquete===undefined)$$paquete=new Paquete.$$;
    Package$meta$declaration($$paquete);
    $$paquete.pkg=pkg;
    var name=name;
    //determine suffix for declarations
    var suffix = '';
    if (name!==container.name) {
      var _s = name.substring(container.name.length);
      suffix = _s.replace(/\./g, '$');
    }
    $$paquete.suffix=suffix;
    defineAttr($$paquete,'name',function(){return name;},undefined,{mod:$CCMM$,$t:{t:String$},$cont:Paquete,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$at','name']});
    defineAttr($$paquete,'qualifiedName',function(){return name;},undefined,{mod:$CCMM$,$t:{t:String$},$cont:Paquete,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$at','qualifiedName']});
    var container=container;
    defineAttr($$paquete,'container',function(){return container;},undefined,{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:Paquete,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$at','container']});
    function members($$$mptypes){
      var filter=[];
      if (extendsType({t:FunctionDeclaration$meta$declaration},$$$mptypes.Kind$members))filter.push('mthd');
      if (extendsType({t:ValueDeclaration$meta$declaration},$$$mptypes.Kind$members))filter.push('attr','gttr','obj');
      if (extendsType({t:ClassDeclaration$meta$declaration},$$$mptypes.Kind$members))filter.push('cls');
      if (extendsType({t:InterfaceDeclaration$meta$declaration},$$$mptypes.Kind$members))filter.push('ifc');
      if (extendsType({t:AliasDeclaration$meta$declaration},$$$mptypes.Kind$members))filter.push('als');
      var r=[];
      for (var mn in this.pkg) {
        var m = this.pkg[mn];
        var mt = m['$mt'];
        if (filter.indexOf(mt)>=0 && m['$an'] && m['$an']['shared']) {
          if (mt === 'mthd') {
            r.push(OpenFunction(this, m));
          } else if (mt==='cls') {
            r.push(OpenClass(this, m));
          } else if (mt==='ifc') {
            r.push(OpenInterface(this, m));
          } else if (mt==='attr'||mt==='gttr'||mt==='obj') {
            r.push(OpenValue(this, m));
          } else if (mt==='als') {
            r.push(OpenAlias(_findTypeFromModel(this,m)));
          }
        }
      }
      return r.reifyCeylonType({Element$Iterable:$$$mptypes.Kind$members});
    }
    $$paquete.members=members;
    members.$crtmm$={mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind'}},$ps:[],$cont:Paquete,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$m','members']};
  function annotatedMembers($$$mptypes){
    var ms=this.members({Kind$members:$$$mptypes.Kind$annotatedMembers});
    if (ms.length>0) {
      var rv=[];
      for (var i=0; i < ms.length; i++) {
        if (ms[i].tipo && ms[i].tipo.$crtmm$) {
          var mm=getrtmm$$(ms[i].tipo);
          var ans=mm.$an;
          if (typeof(ans)==='function'){ans=ans();mm.$an=ans;}
          if (ans) for (var j=0; j<ans.length;j++) {
            if (isOfType(ans[j],$$$mptypes.Annotation$annotatedMembers)) {
              rv.push(ms[i]);
              break;
            }
          }
        }
      }
      return rv.reifyCeylonType({Element$Iterable:$$$mptypes.Kind$annotatedMembers});
    }
    return getEmpty();
  }
  $$paquete.annotatedMembers=annotatedMembers;
  annotatedMembers.$crtmm$={mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Kind'}},$ps:[],$cont:Paquete,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]},Annotation:{}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$m','annotatedMembers']};
    function getMember(name$3,$$$mptypes){
      var m = this.pkg[name$3];
      if (m) {
        var mt = m['$mt'];
        //There's a member alright, but check its type
        if (extendsType({t:ValueDeclaration$meta$declaration}, $$$mptypes.Kind$getMember)) {
          if (mt==='attr'||m==='gttr'||m==='obj') {
            return OpenValue(this, m);
          }
        } else if (extendsType({t:FunctionDeclaration$meta$declaration}, $$$mptypes.Kind$getMember)) {
          if (mt==='mthd') {
            return OpenFunction(this, m);
          }
        } else if (extendsType({t:FunctionOrValueDeclaration$meta$declaration}, $$$mptypes.Kind$getMember)) {
          if (mt==='attr'||m==='gttr'||m==='obj') {
            return OpenValue(this, m);
          } else if (mt==='mthd') {
            return OpenFunction(this, m);
          }
        } else if (extendsType({t:ClassDeclaration$meta$declaration}, $$$mptypes.Kind$getMember)) {
          if (mt==='cls') {
            return OpenClass(this, m);
          }
        } else if (extendsType({t:InterfaceDeclaration$meta$declaration}, $$$mptypes.Kind$getMember)) {
          if (mt==='ifc') {
            return OpenInterface(this, m);
          }
        } else if (extendsType({t:ClassOrInterfaceDeclaration$meta$declaration}, $$$mptypes.Kind$getMember)) {
          if (mt==='ifc') {
            return OpenInterface(this, m);
          } else if (mt==='cls') {
            return OpenClass(this, m);
          }
        } else if (extendsType({t:AliasDeclaration$meta$declaration}, $$$mptypes.Kind$getMember)) {
          if (mt==='als')
          return OpenAlias(_findTypeFromModel(this,m));
        } else {
console.log("WTF do I do with this " + name$3 + " Kind " + className($$$mptypes.Kind$getMember));
        }
      }
      return null;
    }
    $$paquete.getMember=getMember;
    getMember.$crtmm$={mod:$CCMM$,$t:{ t:'u', l:[{t:Null},'Kind']},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:Paquete,$tp:{Kind:{'satisfies':[{t:NestableDeclaration$meta$declaration}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$m','getMember']};
    function getValue(name$4) {
      var m = this.pkg[name$4];
      if (m && (m['$mt']==='attr' || m['$mt']==='gttr' || m['$mt'] === 'obj')) {
        return OpenValue(this, m);
      }
      return null;
    }
    $$paquete.getValue=getValue;
    getValue.$crtmm$={mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:ValueDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:Paquete,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$m','getValue']};
    function getClassOrInterface(name$5){
      var ci = this.pkg[name$5];
      if (ci && ci['$mt']==='cls') {
        return OpenClass(this, ci);
      } else if (ci && ci['$mt']==='ifc') {
        return OpenInterface(this, ci);
      }
      return null;
    }
    $$paquete.getClassOrInterface=getClassOrInterface;
    getClassOrInterface.$crtmm$={mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:ClassOrInterfaceDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:Paquete,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$m','getClassOrInterface']};
  function getAlias(an) {
    var al=this.pkg[an];
    if (al && al.$mt==='als') {
      var rta = _findTypeFromModel(this, al);
      return OpenAlias(rta);
    }
    return null;
  }
  $$paquete.getAlias=getAlias;
  getAlias.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language.meta.declaration','Package','$m','getAlias']};};
    function getFunction(name$6){
      var f = this.pkg[name$6];
      if (f && f['$mt']==='mthd') {
        return OpenFunction(this, f);
      }
      return null;
    }
    $$paquete.getFunction=getFunction;
    getFunction.$crtmm$={mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:FunctionDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:Paquete,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$m','getFunction']};
    function annotations($$$mptypes){
      var _k = '$pkg$ans$' + this.name.replace(/\./g,'$');
      var anns = this.container.meta[_k];
      if (typeof(anns) === 'function') {
        anns = anns();
        this.container.meta[_k]=anns;
      } else if (anns === undefined) {
        anns = [];
      }
      var r = [];
      for (var i=0; i < anns.length; i++) {
        var an = anns[i];
        if (isOfType(an, $$$mptypes.Annotation$annotations)) r.push(an);
      }
      return r.reifyCeylonType({Element$Iterable:$$$mptypes.Annotation$annotations});
    }
    $$paquete.annotations=annotations;
    annotations.$crtmm$={mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:'Annotation'}},$ps:[],$cont:Paquete,$tp:{Annotation:{'var':'out','satisfies':[{t:Annotation,a:{Value:'Annotation'}}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Package','$m','annotations']};
  defineAttr($$paquete,'string',function(){return String$("package " + this.name);},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});
    return $$paquete;
}
Paquete.$crtmm$={mod:$CCMM$,'super':{t:Basic},satisfies:[{t:Package$meta$declaration}],$an:function(){return[shared()];},d:['ceylon.language.meta.declaration','Package']};
exports.Paquete=Paquete;
function $init$Paquete(){
    if (Paquete.$$===undefined){
        initTypeProto(Paquete,'Paquete',Basic,Package$meta$declaration);
    }
    return Paquete;
}
exports.$init$Paquete=$init$Paquete;
$init$Paquete();

function AppliedClass(tipo,$$targs$$,that){
  $init$AppliedClass();
  if (that===undefined){
    var mm = getrtmm$$(tipo);
    if (mm && mm.$cont) {
      that=function(x){/*Class*/
        if (that.$targs) {
          var _a=[];
          for (var i=0;i<arguments.length;i++)_a.push(arguments[i]);
          _a.push(that.$targs);
          return tipo.apply(x,_a);
        }
        return tipo.apply(x,arguments);
      }
    } else {
      that=function(){
        if (that.$targs) {
          var _a=[];
          for (var i=0;i<arguments.length;i++)_a.push(arguments[i]);
          _a.push(that.$targs);
          return tipo.apply(undefined,_a);
        }
        return tipo.apply(undefined,arguments);
      }
    }
    that.$crtmm$=mm;
    var dummy = new AppliedClass.$$;
    that.$$=AppliedClass.$$;
    that.getT$all=function(){return dummy.getT$all();};
    that.getT$name=function(){return dummy.getT$name();};
    that.equals=function(o){
      var eq=isOfType(o,{t:AppliedClass}) && o.tipo===tipo;
      return eq;
    };
    that.$apply=function(x){return AppliedClass.$$.prototype.$apply.call(that,x);};
    that.$apply.$crtmm$=AppliedClass.$$.prototype.$apply.$crtmm$;
    defineAttr(that,'satisfiedTypes',function(){
      return ClassOrInterface$meta$model.$$.prototype.$prop$getSatisfiedTypes.get.call(that);
    },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getExtendedType.$crtmm$);
    defineAttr(that,'container',function(){
      return ClassOrInterface$meta$model.$$.prototype.$prop$getContainer.get.call(that);
    },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getContainer.$crtmm$);
    defineAttr(that,'string',function(){
      return ClassOrInterface$meta$model.$$.prototype.$prop$getString.get.call(that);
    },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getString.$crtmm$);
    defineAttr(that,'hash',function(){
      return ClassOrInterface$meta$model.$$.prototype.$prop$getHash.get.call(that);
    },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getHash.$crtmm$);
    defineAttr(that,'typeArguments',function(){
      return ClassOrInterface$meta$model.$$.prototype.$prop$getTypeArguments.get.call(that);
    },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getTypeArguments.$crtmm$);
    defineAttr(that,'extendedType',function(){
      return ClassOrInterface$meta$model.$$.prototype.$prop$getExtendedType.get.call(that);
    },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getExtendedType.$crtmm$);
    defineAttr(that,'declaration',function(){
      return ClassModel$meta$model.$$.prototype.$prop$getDeclaration.get.call(that);
    },undefined,ClassModel$meta$model.$$.prototype.$prop$getDeclaration.$crtmm$);
    defineAttr(that,'parameterTypes',function(){
      return ClassModel$meta$model.$$.prototype.$prop$getParameterTypes.get.call(that);
    },undefined,ClassModel$meta$model.$$.prototype.$prop$getParameterTypes.$crtmm$);
    defineAttr(that,'declaration',function(){
      return ClassModel$meta$model.$$.prototype.$prop$getDeclaration.get.call(that);
    },undefined,ClassModel$meta$model.$$.prototype.$prop$getDeclaration.$crtmm$);
    that.getMethod=ClassOrInterface$meta$model.$$.prototype.getMethod;
    that.getDeclaredMethod=ClassOrInterface$meta$model.$$.prototype.getDeclaredMethod;
    that.getAttribute=ClassOrInterface$meta$model.$$.prototype.getAttribute;
    that.getDeclaredAttribute=ClassOrInterface$meta$model.$$.prototype.getDeclaredAttribute;
    that.getClassOrInterface=ClassOrInterface$meta$model.$$.prototype.getClassOrInterface;
    that.getDeclaredClassOrInterface=ClassOrInterface$meta$model.$$.prototype.getDeclaredClassOrInterface;
    that.getClass=ClassOrInterface$meta$model.$$.prototype.getClass;
    that.getDeclaredClass=ClassOrInterface$meta$model.$$.prototype.getDeclaredClass;
    that.getInterface=ClassOrInterface$meta$model.$$.prototype.getInterface;
    that.getDeclaredInterface=ClassOrInterface$meta$model.$$.prototype.getDeclaredInterface;
    that.equals=ClassModel$meta$model.$$.prototype.equals;
    that.typeOf=ClassOrInterface$meta$model.$$.prototype.typeOf;
    that.supertypeOf=ClassOrInterface$meta$model.$$.prototype.supertypeOf;
    that.subtypeOf=ClassOrInterface$meta$model.$$.prototype.subtypeOf;
    that.exactly=ClassOrInterface$meta$model.$$.prototype.exactly;
  }
  set_type_args(that,$$targs$$);
  Class$meta$model(that.$$targs$$===undefined?$$targs$$:{Arguments$Class:that.$$targs$$.Arguments$Class,Type$Class:that.$$targs$$.Type$Class},that);
  that.tipo=tipo;
  return that;
}
AppliedClass.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$tp:{Type$Class:{'var':'out','def':{t:Anything}},Arguments$Class:{'var':'in','satisfies':[{t:Sequential,a:{Element$Iterable:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:Class$meta$model,a:{Arguments$Class:'Arguments$Class',Type$Class:'Type$Class'}}],$an:function(){return[shared()];},d:['ceylon.language.meta.model','Class']};};
function $init$AppliedClass(){
  if (AppliedClass.$$===undefined){
    initTypeProto(AppliedClass,'ceylon.language.meta.model::AppliedClass',Basic,Class$meta$model);
    (function($$clase){

      $$clase.$apply=function(a){
        var mdl=get_model(this.tipo.$crtmm$);
        if (mdl&&mdl.$mt==='obj')throw InvocationException$meta$model("Cannot instantiate anonymous class");
        a=convert$params(this.tipo.$crtmm$,a);
        if (this.$targs)a.push(this.$targs);
        return this.tipo.apply(undefined,a);
      };$$clase.$apply.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language.meta.model','Class','$m','apply'],$t:'Type'};};

    })(AppliedClass.$$.prototype);
  }
  return AppliedClass;
}
exports.$init$AppliedClass$meta$model=$init$AppliedClass;
$init$AppliedClass();

function AppliedMemberClass(tipo,$$targs$$,that){
  $init$AppliedMemberClass();
  if (that===undefined) {
    var mm = getrtmm$$(tipo);
    if (mm && mm.$cont) {
      that=function(x){
        var rv=tipo.bind(x);
        rv.$crtmm$=tipo.$crtmm$;
        var nt={t:tipo};
        if (x.$$targs$$) {
          nt.a={};
          for (var nta in x.$$targs$$)nt.a[nta]=x.$$targs$$[nta];
        }
        if (that.$targs) {
          if (!nt.a)nt.a={};
          for (var nta in that.$targs)nt.a[nta]=that.$targs[nta];
        }
        rv=AppliedClass(rv,{Type$Class:nt,Arguments$Class:{t:Sequential,a:{Element$Iterable:{t:Anything},Absent$Iterable:{t:Null}}}});//TODO generate metamodel for Arguments
        if (nt.a)rv.$targs=nt.a;
        rv.$bound=x;
        return rv;
      }
      var dummy = new AppliedMemberClass.$$;
      that.$$=AppliedMemberClass.$$;
      that.getT$all=function(){return dummy.getT$all();};
      that.getT$name=function(){return dummy.getT$name();};
      that.equals=function(o){
        var eq=isOfType(o,{t:AppliedMemberClass}) && o.tipo===tipo;
        if (that.$bound)eq=eq && o.$bound && o.$bound.equals(that.$bound);else eq=eq && o.$bound===undefined;
        return eq;
      };
      defineAttr(that,'parameterTypes',function(){
        return ClassModel$meta$model.$$.prototype.$prop$getParameterTypes.get.call(that);
      },undefined,ClassModel$meta$model.$$.prototype.$prop$getParameterTypes.$crtmm$);
      defineAttr(that,'extendedType',function(){
        return ClassOrInterface$meta$model.$$.prototype.$prop$getExtendedType.get.call(that);
      },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getExtendedType.$crtmm$);
      defineAttr(that,'satisfiedTypes',function(){
        return ClassOrInterface$meta$model.$$.prototype.$prop$getSatisfiedTypes.get.call(that);
      },undefined,ClassOrInterface$meta$model.$$.prototype.$prop$getExtendedType.$crtmm$);
      defineAttr(that,'declaration',function(){
        return ClassModel$meta$model.$$.prototype.$prop$getDeclaration.get.call(that);
      },undefined,ClassModel$meta$model.$$.prototype.$prop$getDeclaration.$crtmm$);
      that.$bind=function(){return AppliedMemberClass.$$.prototype.$bind.apply(that,arguments);}
      defineAttr(that,'string',function(){
        return String$($qname(mm));
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
    } else {
      throw IncompatibleTypeException("Invalid metamodel data for MemberClass");
    }
  }
  set_type_args(that,$$targs$$);
  MemberClass$meta$model(that.$$targs$$===undefined?$$targs$$:{Arguments$MemberClass:that.$$targs$$.Arguments$MemberClass,Type$MemberClass:that.$$targs$$.Type$MemberClass,Container$MemberClass:that.$$targs$$.Container$MemberClass},that);
  that.tipo=tipo;
  return that;
}
AppliedMemberClass.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],$tp:{Container$MemberClass:{'var':'in'},Type$MemberClass:{'var':'out','def':{t:Anything}},Arguments$MemberClass:{'var':'in','satisfies':[{t:Sequential,a:{Element$Iterable:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:MemberClass$meta$model,a:{Arguments$MemberClass:'Arguments$MemberClass',Type$MemberClass:'Type$MemberClass',Container$MemberClass:'Container$MemberClass'}}],$an:function(){return[shared(),abstract()];},d:['','AppliedMemberClass']};};
exports.AppliedMemberClass=AppliedMemberClass;
function $init$AppliedMemberClass(){
  if (AppliedMemberClass.$$===undefined){
    initTypeProto(AppliedMemberClass,'ceylon.language.meta.model::AppliedMemberClass',Basic,MemberClass$meta$model);
    (function($$amc){
      
      //MethodDef bind at caca.ceylon (5:4-5:107)
      $$amc.$bind=function $bind(cont){
        var ot=cont.getT$name ? cont.getT$all()[cont.getT$name()]:throwexc(IncompatibleTypeException$meta$model("Container does not appear to be a Ceylon object"));
        if (!ot)throw IncompatibleTypeException$meta$model("Incompatible Container (has no metamodel information");
        var omm=getrtmm$$(ot);
        var mm=getrtmm$$(this.tipo);
        if (!extendsType({t:ot},{t:mm.$cont}))throw IncompatibleTypeException$meta$model("Incompatible container type");
        return this(cont);
      };$$amc.$bind.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Class$meta$model,a:{Arguments$Class:'Arguments',Type$Class:'Type'}},$ps:[{$nm:'container',$mt:'prm',$t:{t:Object$},$an:function(){return[];}}],$cont:MemberClass$meta$model,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','MemberClass','$m','bind']};};
    })(AppliedMemberClass.$$.prototype);
  }
  return AppliedMemberClass;
}
exports.$init$AppliedMemberClass$meta$model=$init$AppliedMemberClass;
$init$AppliedMemberClass();

function AppliedInterface(tipo,$$targs$$,that) {
  $init$AppliedInterface();
  if (that===undefined){
    var mm = getrtmm$$(tipo);
    if (mm && mm.$cont) {
      that=function(x){
        that.tipo=function(){return tipo.apply(x,arguments);};
        that.$bound=x;
        return that;
      }
      that.tipo$2=tipo;
      var dummy = new AppliedInterface.$$;
      that.$$=AppliedInterface.$$;
      that.getT$all=function(){return dummy.getT$all();};
      that.getT$name=function(){return dummy.getT$name();};
      that.equals=function(o){
        var eq=isOfType(o,{t:AppliedInterface}) && (o.tipo$2||o.tipo)==tipo;
        if (that.$bound)eq=eq && o.$bound && o.$bound.equals(that.$bound);else eq=eq && o.$bound===undefined;
        return eq;
      };
      defineAttr(that,'string',function(){
        return String$($qname(mm));
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
      defineAttr(that,'declaration',function(){
        return InterfaceModel$meta$model.$$.prototype.$prop$getDeclaration.get.call(that);
      },undefined,InterfaceModel$meta$model.$$.prototype.$prop$getDeclaration.$crtmm$);
    } else {
      that=new AppliedInterface.$$;
    }
  }
  set_type_args(that,$$targs$$);
  Interface$meta$model($$targs$$,that);
  that.tipo=tipo;
  return that;
}
AppliedInterface.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$tp:{Type$Interface:{'var':'out','def':{t:Anything}}},satisfies:[{t:Interface$meta$model,a:{Type$Interface:'Type$Interface'}}],$an:function(){return[shared()];},d:['ceylon.language.meta.model','Interface']};};
exports.AppliedInterface=AppliedInterface;

function $init$AppliedInterface(){
  if (AppliedInterface.$$===undefined){
    initTypeProto(AppliedInterface,'ceylon.language.meta.model::AppliedInterface',Basic,Interface$meta$model);
    (function($$appliedInterface){

        })(AppliedInterface.$$.prototype);
    }
    return AppliedInterface;
}
exports.$init$AppliedInterface$meta$model=$init$AppliedInterface;
$init$AppliedInterface();

function AppliedMemberInterface(tipo,$$targs$$,that){
  $init$AppliedMemberInterface();
  if (that===undefined){
    var mm = getrtmm$$(tipo);
    if (mm && mm.$cont) {
      that=function(x){
        var rv=tipo.bind(x);
        rv.$crtmm$=tipo.$crtmm$;
        var nt={t:tipo};
        if (x.$$targs$$) {
          nt.a={};
          for (var nta in x.$$targs$$)nt.a[nta]=x.$$targs$$[nta];
        }
        if (that.$targs) {
          if (!nt.a)nt.a={};
          for (var nta in that.$targs)nt.a[nta]=that.$targs[nta];
        }
        rv=AppliedInterface(rv,{Type$Interface:nt});
        if (nt.a)rv.$targs=nt.a;
        rv.$bound=x;
        return rv;
      }
      that.tipo$2=tipo;
      var dummy = new AppliedMemberInterface.$$;
      that.$$=AppliedMemberInterface.$$;
      that.getT$all=function(){return dummy.getT$all();};
      that.getT$name=function(){return dummy.getT$name();};
      that.equals=function(o){
        var eq=isOfType(o,{t:AppliedMemberInterface}) && (o.tipo$2||o.tipo)==tipo;
        if (that.$bound)eq=eq && o.$bound && o.$bound.equals(that.$bound);else eq=eq && o.$bound===undefined;
        return eq;
      };
      defineAttr(that,'string',function(){
        return String$($qname(mm));
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
      defineAttr(that,'declaration',function(){
        return InterfaceModel$meta$model.$$.prototype.$prop$getDeclaration.get.call(that);
      },undefined,InterfaceModel$meta$model.$$.prototype.$prop$getDeclaration.$crtmm$);
      that.$bind=function(x){return AppliedMemberInterface.$$.prototype.$bind.call(that,x);}
    } else {
      that=new AppliedMemberInterface.$$;
    }
  }
  set_type_args(that,$$targs$$);
  MemberInterface$meta$model(that.$$targs$$===undefined?$$targs$$:{Type$MemberInterface:that.$$targs$$.Type$MemberInterface,
    Container$MemberInterface:that.$$targs$$.Container$MemberInterface},that);
  that.tipo=tipo;
  return that;
}
AppliedMemberInterface.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],$tp:{Container$MemberInterface:{'var':'in'},Type$MemberInterface:{'var':'out','def':{t:Anything}}},satisfies:[{t:MemberInterface$meta$model,a:{Type$MemberInterface:'Type$MemberInterface',Container$MemberInterface:'Container$MemberInterface'}}],$an:function(){return[shared(),abstract()];},d:['ceylon.language.meta.model','MemberInterface']};};
exports.AppliedMemberInterface=AppliedMemberInterface;
function $init$AppliedMemberInterface(){
  if (AppliedMemberInterface.$$===undefined){
    initTypeProto(AppliedMemberInterface,'ceylon.language.meta.model::AppliedMemberInterface',Basic,MemberInterface$meta$model);
    (function($$appliedMemberInterface){
      $$appliedMemberInterface.$bind=function $bind(container$2){
        var $$appliedMemberInterface=this;
        throw Exception(String$("IMPL MemberInterface.bind"));
      };$$appliedMemberInterface.$bind.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Interface$meta$model,a:{Type$Interface:'Type$Interface'}},$ps:[{$nm:'container',$mt:'prm',$t:{t:Object$},$an:function(){return[];}}],$cont:MemberInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','MemberInterface','$m','bind']};};
    })(AppliedMemberInterface.$$.prototype);
  }
  return AppliedMemberInterface;
}
exports.$init$AppliedMemberInterface$meta$model=$init$AppliedMemberInterface;
$init$AppliedMemberInterface();
    

function AppliedUnionType(tipo,types$2, $$targs$$, that) {
    $init$AppliedUnionType();
    if (that===undefined)that=new AppliedUnionType.$$;
    set_type_args(that,$$targs$$);
    UnionType$meta$model(that.$$targs$$===undefined?$$targs$$:{Union$UnionType:that.$$targs$$.Union$UnionType},that);
    that.tipo=tipo;
    that._types=types$2;
    return that;
}
AppliedUnionType.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$tp:{Union:{'var':'out','def':{t:Anything}}},satisfies:[{t:UnionType$meta$model,a:{Union:'Union'}}],$an:function(){return[shared()];},d:['ceylon.language.meta.model','UnionType']};};
function $init$AppliedUnionType(){
  if (AppliedUnionType.$$===undefined){
    initTypeProto(AppliedUnionType,'ceylon.language.meta.model::AppliedUnionType',Basic,UnionType$meta$model);
    (function($$appliedUnionType){

defineAttr($$appliedUnionType,'string',function(){
  var qn="";
  var first=true;
  for (var i=0;i<this._types.length;i++) {
    if (first)first=false;else qn+="|";
    qn+=this._types[i].string;
  }
  return String$(qn);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
defineAttr($$appliedUnionType,'hash',function(){
  var h=this._types.length;
  for (var i=0; i<this._types.length;i++) {
    h+=this._types[i].hash;
  }
  return h;
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Object','$at','hash']};});

      $$appliedUnionType.equals=function(u) {
        if(isOfType(u,{t:AppliedUnionType})) {
          var mine=this._types;
          var his=u.caseTypes;
          if (mine.size==his.size) {
            for (var i=0;i<mine.length;i++) {
              if (!his.contains(mine[i]))return false;
            }
            return true;
          }
        }
        return false;
      }
            
            defineAttr($$appliedUnionType,'caseTypes',function(){
                var $$appliedUnionType=this;
                return $$appliedUnionType._types; //TODO type
            },undefined,function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:Type$meta$model,a:{Type$Type:'Union$UnionType'}}}},$cont:AppliedUnionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','UnionType','$at','caseTypes']};});

      $$appliedUnionType.typeOf=function typeOf(instance$20){
        var tipos=[];
        for (var i=0; i < this._types.length;i++) {
          var _t = this._types[i];
          if (_t.tipo) {
            _t={t:_t.tipo};
          } else if (_t.t===undefined) {
          _t={t:_t};
          }
          tipos.push(_t);
        }
        return isOfType(instance$20,{t:'u',l:tipos});
      };$$appliedUnionType.typeOf.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean},$ps:[{$nm:'instance',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:AppliedUnionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','UnionType','$m','typeOf']};};

            $$appliedUnionType.supertypeOf=function supertypeOf(type$21){
                var $$appliedUnionType=this;
                throw Exception(String$("IMPL AppliedUnionType.supertypeOf"));
            };$$appliedUnionType.supertypeOf.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$an:function(){return[];}}],$cont:AppliedUnionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','UnionType','$m','supertypeOf']};};

      $$appliedUnionType.exactly=function exactly(type$22){
        if (isOfType(type$25, {t:AppliedUnionType})) {
          for (var i=0; i<this._types.length;i++) {
            var myt = this._types[i];
            var was=false;
            for (var j=0; j<type$25._types.length;j++) {
              was |= myt.exactly(type$25._types[j]);
            }
            if (!was)return false;
          }
          //Now the other way around
          for (var i=0; i<type$25._types.length;i++) {
            var myt = type$25._types[i];
            var was=false;
            for (var j=0; j<this._types.length;j++) {
              was |= myt.exactly(this._types[j]);
            }
            if (!was)return false;
          }
          return true;
        }
        return false;
      };$$appliedUnionType.exactly.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$an:function(){return[];}}],$cont:AppliedUnionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','UnionType','$m','exactly']};};

    })(AppliedUnionType.$$.prototype);
  }
  return AppliedUnionType;
}
exports.$init$AppliedUnionType$meta$model=$init$AppliedUnionType;
$init$AppliedUnionType();

function AppliedIntersectionType(tipo,types$3, $$targs$$, that) {
    $init$AppliedIntersectionType();
    if (that===undefined)that=new AppliedIntersectionType.$$;
    set_type_args(that,$$targs$$);
    that._types=types$3;
    IntersectionType$meta$model(that.$$targs$$===undefined?$$targs$$:{Intersection$IntersectionType:that.$$targs$$.Intersection$IntersectionType},that);
    that.tipo=tipo;
    return that;
}
AppliedIntersectionType.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$tp:{Intersection$IntersectionType:{'var':'out','def':{t:Anything}}},satisfies:[{t:IntersectionType$meta$model,a:{Intersection$IntersectionType:'Intersection$IntersectionType'}}],$an:function(){return[shared()];},d:['ceylon.language.meta.model','IntersectionType']};};
function $init$AppliedIntersectionType(){
  if (AppliedIntersectionType.$$===undefined){
    initTypeProto(AppliedIntersectionType,'ceylon.language.meta.model::AppliedIntersectionType',Basic,IntersectionType$meta$model);
    (function($$appliedIntersectionType){

defineAttr($$appliedIntersectionType,'string',function(){
  var qn="";
  var first=true;
  for (var i=0;i<this._types.length;i++) {
    if (first)first=false;else qn+="&";
    qn+=this._types[i].string;
  }
  return String$(qn);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
defineAttr($$appliedIntersectionType,'hash',function(){
  var h=this._types.length;
  for (var i=0; i<this._types.length;i++) {
    h+=this._types[i].hash;
  }
  return h;
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Object','$at','hash']};});
      $$appliedIntersectionType.equals=function(u) {
        if(isOfType(u,{t:AppliedIntersectionType})) {
          var mine=this._types;
          var his=u.satisfiedTypes;
          if (mine.size==his.size) {
            for (var i=0;i<mine.length;i++) {
              if (!his.contains(mine[i]))return false;
            }
            return true;
          }
        }
        return false;
      }
 
            defineAttr($$appliedIntersectionType,'satisfiedTypes',function(){
                var $$appliedIntersectionType=this;
                return $$appliedIntersectionType._types;
            },undefined,function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:Type$meta$model,a:{Type$Type:'Intersection$IntersectionType'}}}},$cont:AppliedIntersectionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','IntersectionType','$at','satisfiedTypes']};});

      $$appliedIntersectionType.typeOf=function typeOf(instance$23){
        var tipos=[];
        for (var i=0; i < this._types.length;i++) {
          var _t = this._types[i];
          if (_t.tipo) {
            _t={t:_t.tipo};
          } else if (_t.t===undefined) {
          _t={t:_t};
          }
          tipos.push(_t);
        }
        return isOfType(instance$23,{t:'i',l:tipos});
      };$$appliedIntersectionType.typeOf.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean},$ps:[{$nm:'instance',$mt:'prm',$t:{t:Anything},$an:function(){return[];}}],$cont:AppliedIntersectionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','IntersectionType','$m','typeOf']};};

            $$appliedIntersectionType.supertypeOf=function supertypeOf(type$24){
                var $$appliedIntersectionType=this;
                throw Exception(String$("IMPL AppliedIntersectionType.supertypeOf"));
            };$$appliedIntersectionType.supertypeOf.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$an:function(){return[];}}],$cont:AppliedIntersectionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','IntersectionType','$m','supertypeOf']};};

      $$appliedIntersectionType.exactly=function exactly(type$25){
        if (isOfType(type$25, {t:AppliedIntersectionType})) {
          for (var i=0; i<this._types.length;i++) {
            var myt = this._types[i];
            var was=false;
            for (var j=0; j<type$25._types.length;j++) {
              was |= myt.exactly(type$25._types[j]);
            }
            if (!was)return false;
          }
          //Now the other way around
          for (var i=0; i<type$25._types.length;i++) {
            var myt = type$25._types[i];
            var was=false;
            for (var j=0; j<this._types.length;j++) {
              was |= myt.exactly(this._types[j]);
            }
            if (!was)return false;
          }
          return true;
        }
        return false;
      };$$appliedIntersectionType.exactly.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean},$ps:[{$nm:'type',$mt:'prm',$t:{t:Type$meta$model,a:{Type$Type:{t:Anything}}},$an:function(){return[];}}],$cont:AppliedIntersectionType,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','IntersectionType','$m','exactly']};};

    })(AppliedIntersectionType.$$.prototype);
  }
  return AppliedIntersectionType;
}
exports.$init$AppliedIntersectionType$meta$model=$init$AppliedIntersectionType;
$init$AppliedIntersectionType();

function AppliedFunction(m,$$targs$$,o,mptypes) {
  var mm=getrtmm$$(m);
  var ttargs;
  if (mm.$tp) {
    if (!mptypes || mptypes.size<1)throw TypeApplicationException$meta$model("Missing type arguments for AppliedFunction");
    var i=0;ttargs={};
    for (var tp in mm.$tp) {
      var _ta=mptypes.$get?mptypes.$get(i):mptypes[i];
      if(_ta&&_ta.tipo)ttargs[tp]={t:_ta.tipo};
      else if (_ta) console.log("TODO assign type arg " + _ta + " to " + tp);
      else if (mptypes[tp])ttargs[tp]=mptypes[tp];
      else throw Error("TODO no more type arguments in AppliedFunction");
      i++;
    }
  }
  var f = o===undefined&&mm.$cont?function(x){
    return AppliedFunction(m,$$targs$$,x,mptypes);
  }:function(){
    var _fu=(o&&o[mm.d[mm.d.length-1]])||m;//Get the object's method if possible
    if (mm.$tp) {
      var _a=[];
      for (var i=0;i<arguments.length;i++)_a.push(arguments[i]);
      _a.push(ttargs);
      return _fu.apply(o,_a);
    }
    return _fu.apply(o,arguments);
  }
  f.$crtmm$={mod:$CCMM$,d:['ceylon.language.model','Function'],$t:mm.$t,$ps:mm.$ps,$an:mm.$an};
  var dummy=new AppliedFunction.$$;
  f.getT$all=function(){return dummy.getT$all();}
  f.getT$name=function(){return dummy.getT$name();}
  if ($$targs$$===undefined) {
    throw TypeApplicationException$meta$model("Missing type arguments for AppliedFunction");
  }
  Function$meta$model($$targs$$,f);
  f.tipo=m;
  f.$targs=ttargs;
  if (o)f.$bound=o;
  defineAttr(f,'typeArguments',function(){
    return FunctionModel$meta$model.$$.prototype.$prop$getTypeArguments.get.call(f);
  },undefined,function(){return{mod:$CCMM$,$t:{t:Map,a:{Key$Map:{t:TypeParameter$meta$declaration},Item$Map:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$cont:AppliedFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Generic','$at','typeArguments']};});
  f.equals=function(oo){
    return isOfType(oo,{t:AppliedFunction}) && oo.tipo===m && oo.typeArguments.equals(this.typeArguments) && (o?o.equals(oo.$bound):oo.$bound===o);
  }
  defineAttr(f,'string',function(){
    return FunctionModel$meta$model.$$.prototype.$prop$getString.get.call(f);
  },undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string'],$cont:AppliedFunction};});
  defineAttr(f,'parameterTypes',function(){
    return FunctionModel$meta$model.$$.prototype.$prop$getParameterTypes.get.call(f);
  },undefined,FunctionModel$meta$model.$$.prototype.$prop$getParameterTypes.$crtmm$);
defineAttr(f,'declaration',function(){
  if (f._decl)return f._decl;
  f._decl = OpenFunction(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), m);
  return f._decl;
},undefined,function(){return{mod:$CCMM$,$t:{t:FunctionDeclaration$meta$declaration},d:['ceylon.language.meta.model','FunctionModel','$at','declaration']};});
  f.$apply=function(a){
    a=convert$params(mm,a);
    if (ttargs) {
      var _a=[];
      for (var i=0;i<a.size;i++)_a.push(a.$get(i));
      _a.push(ttargs);
      a=_a;
    }
    return m.apply(o,a);
  }
  return f;
}
AppliedFunction.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language.meta.model','Function'],satisfies:{t:Function$meta$model,a:{Type$Function:'Type$Function',Arguments$Function:'Arguments$Function'}},$an:function(){return [shared(),actual()];}};};
exports.AppliedFunction$meta$model=AppliedFunction;
initTypeProto(AppliedFunction,'ceylon.language.meta.model::AppliedFunction',Basic,Function$meta$model);

function AppliedValue(obj,attr,$$targs$$,$$appliedValue){
  var mm = getrtmm$$(attr);
  $init$AppliedValue();
  if ($$appliedValue===undefined){
    if (obj||mm.$cont===undefined)$$appliedValue=new AppliedValue.$$;
    else {
      $$appliedValue=function(x){return AppliedValue(x,attr,$$targs$$);};
      $$appliedValue.$$=AppliedValue.$$;
      var dummy=new AppliedValue.$$;
      $$appliedValue.getT$all=function(){return dummy.getT$all();};
      $$appliedValue.getT$name=function(){return dummy.getT$name();};
defineAttr($$appliedValue,'string',function(){
  var qn;
  if ($$targs$$ && $$targs$$.Container$Value) {
    qn = typeLiteral$meta({Type$typeLiteral:$$targs$$.Container$Value}).string + "." + mm.d[mm.d.length-1];
  } else if (mm.$cont) {
    qn = typeLiteral$meta({Type$typeLiteral:{t:mm.$cont}}).string + "." + mm.d[mm.d.length-1];
  } else {
    qn=$qname(mm);
  }
  return String$(qn);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
    }
  }
  set_type_args($$appliedValue,$$targs$$);
  Value$meta$model($$appliedValue.$$targs$$===undefined?$$targs$$:{Get$Value:$$appliedValue.$$targs$$.Get$Value,Set$Value:$$appliedValue.$$targs$$.Set$Value},$$appliedValue);
  if($$targs$$.Container$Value)Attribute$meta$model({Get$Attribute:$$targs$$.Get$Value,
    Set$Attribute:$$targs$$.Set$Value,Container$Attribute:$$targs$$.Container$Value},$$appliedValue);//TODO checar si no es if Container$Attribute
  $$appliedValue.obj=obj;
  $$appliedValue.tipo=attr;
  return $$appliedValue;
}
AppliedValue.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$tp:{Get:{'var':'out'},Set:{'var':'in'}},
  satisfies:[{t:Value$meta$model,a:{Get:'Get',Set:'Set'}}],$an:function(){return[shared()];},d:['ceylon.language.meta.model','Value']};};
exports.AppliedValue$meta$model=AppliedValue;
function $init$AppliedValue(){
  if (AppliedValue.$$===undefined){
    initTypeProto(AppliedValue,'ceylon.language.meta.model::AppliedValue',Basic,Value$meta$model);
    (function($$appliedValue){
defineAttr($$appliedValue,'string',function(){
  return String$($qname(this.tipo));
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
      defineAttr($$appliedValue,'declaration',function(){
        var $$av=this;
        var mm = $$av.tipo.$crtmm$;
        var _pkg = getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]);
        return OpenValue(_pkg, $$av.tipo);
      },undefined,function(){return{mod:$CCMM$,$t:{t:ValueDeclaration$meta$declaration},$cont:AppliedValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Value','$at','declaration']};});

      $$appliedValue.$get=function $get(){
        if (this.obj) {
          var mm=this.tipo.$crtmm$;
          return (mm&&mm.d&&this.obj[mm.d[mm.d.length-1]])||this.tipo.get.call(this.obj);
        }
        return this.tipo.get();
      };$$appliedValue.$get.$crtmm$=function(){return{mod:$CCMM$,$t:'Get',$ps:[],$cont:AppliedValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Value','$m','get']};};
      $$appliedValue.set=function set(newValue$26){
        if (!this.tipo.set)throw MutationException$meta$model("Value is not writable");
        return this.obj?this.tipo.set.call(this.obj,newValue$26):this.tipo.set(newValue$26);
      };$$appliedValue.set.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Anything},$ps:[{$nm:'newValue',$mt:'prm',$t:'Set',$an:function(){return[];}}],$cont:AppliedValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Value','$m','set']};};
 
$$appliedValue.setIfAssignable=function(v) {
  var mm = this.tipo.$crtmm$;
  if (!isOfType(v,mm.$t))throw IncompatibleTypeException$meta$model("The specified value has the wrong type");
  var mdl=get_model(mm);
  if (!(mdl &&mdl['var']))throw MutationException$meta$model("Attempt to modify a value that is not variable");
  this.obj?this.tipo.set.call(this.obj,v):this.tipo.set(v);
};$$appliedValue.setIfAssignable.$crtmm$=function(){return{mod:$CCMM$,$ps:[],$cont:AppliedValue,d:['ceylon.language.meta.model','Value','$m','setIfAssignable']};};

      defineAttr($$appliedValue,'type',function(){
          var $$atr=this;
          var t = $$atr.tipo.$crtmm$;
          return typeLiteral$meta({Type$typeLiteral:t.$t});
      },undefined,function(){return{mod:$CCMM$,$t:{t:Type$meta$model,a:{Type$Type:'Get$Value'}},$cont:AppliedValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Value','$at','type']};});

      defineAttr($$appliedValue,'container',function(){
          if (this.$$targs$$.Container$Value) {//TODO if Container$Attribute?
            return typeLiteral$meta({Type$typeLiteral:this.$$targs$$.Container$Value});
          }
          var mm=this.tipo.$crtmm$;
          if (mm.$cont) {
            return typeLiteral$meta({Type$typeLiteral:{t:mm.$cont}});
          }
          return null;
      },undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:Type$meta$model,a:{Type$Type:{t:Anything}}}]},$cont:AppliedValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Value','$at','container']};});

    })(AppliedValue.$$.prototype);
  }
  return AppliedValue;
}
exports.$init$AppliedValue$meta$model=$init$AppliedValue;
$init$AppliedValue();

//ClassDefinition AppliedMethod at X (10:0-21:0)
function AppliedMethod(tipo,typeArgs,$$targs$$,$$appliedMethod){
  $init$AppliedMethod();
  var mm = getrtmm$$(tipo);
  if (mm.$tp) {
    if (typeArgs===undefined || typeArgs.size<1)
      throw TypeApplicationException$meta$model(String$("Missing type arguments in call to FunctionDeclaration.apply"));
    var _ta={}; var i=0;
    for (var tp in mm.$tp) {
      if (typeArgs.$get(i)===undefined)
        throw TypeApplicationException$meta$model(String$("Missing type argument for "+tp));
      var _tp = mm.$tp[tp];
      var _t = typeArgs.$get(i).tipo;
      _ta[tp]={t:_t};
      if ((_tp.satisfies && _tp.satisfies.length>0) || (_tp.of && _tp.of.length > 0)) {
        var restraints=(_tp.satisfies && _tp.satisfies.length>0)?_tp.satisfies:_tp.of;
        for (var j=0; j<restraints.length;j++) {
          if (!extendsType(_ta[tp],restraints[j]))
            throw TypeApplicationException$meta$model(String$("Type argument for " + tp + " violates type parameter constraints"));
        }
      }
      i++;
    }
  }
  if ($$appliedMethod===undefined){
    $$appliedMethod=function(x){
      return AppliedFunction(tipo,{Type$Function:$$targs$$.Type$Method,Arguments$Function:$$targs$$.Arguments$Method,
        Container$Function:$$targs$$.Container$Method},x,typeArgs);
    }
    var dummy=new AppliedMethod.$$;
    $$appliedMethod.getT$all=function(){return dummy.getT$all();};
    $$appliedMethod.getT$name=function(){return dummy.getT$name();};
  }
  if (_ta)$$appliedMethod.$targs=_ta;
  set_type_args($$appliedMethod,$$targs$$);
  Method$meta$model($$appliedMethod.$$targs$$===undefined?$$targs$$:{Arguments$Method:$$appliedMethod.$$targs$$.Arguments$Method,
    Type$Method:$$appliedMethod.$$targs$$.Type$Method,Container$Method:$$appliedMethod.$$targs$$.Container$Method},$$appliedMethod);
  $$appliedMethod.tipo=tipo;

//This was copied from prototype style
  defineAttr($$appliedMethod,'declaration',function(){
    var _pkg = getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]);
    return OpenFunction(_pkg, $$appliedMethod.tipo);
  },undefined,function(){return{mod:$CCMM$,$t:{t:FunctionDeclaration$meta$declaration},$cont:AppliedMethod,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Method','$at','declaration']};});

  defineAttr($$appliedMethod,'type',function(){
    return typeLiteral$meta({Type$typeLiteral:mm.$t});
  },undefined,function(){return{mod:$CCMM$,$t:{t:Type$meta$model,a:{Type$Type:'Type'}},$cont:AppliedMethod,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Method','$at','type']};});

  defineAttr($$appliedMethod,'typeArguments',function(){
    return FunctionModel$meta$model.$$.prototype.$prop$getTypeArguments.get.call($$appliedMethod);
  },undefined,function(){return{mod:$CCMM$,$t:{t:Map,a:{Key:{t:TypeParameter$meta$declaration},Item:{t:Type$meta$model,a:{Type$Type:{t:Anything}}}}},$cont:AppliedMethod,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Generic','$at','typeArguments']};});
  defineAttr($$appliedMethod,'parameterTypes',function(){
    return FunctionModel$meta$model.$$.prototype.$prop$getParameterTypes.get.call($$appliedMethod);
  },undefined,FunctionModel$meta$model.$$.prototype.$prop$getParameterTypes.$crtmm$);

  $$appliedMethod.equals=function(o){
    return isOfType(o,{t:AppliedMethod}) && o.tipo===tipo && o.typeArguments.equals(this.typeArguments);
  }
  $$appliedMethod.$bind=function(o){
    if (!isOfType(o,{t:mm.$cont}))throw IncompatibleTypeException$meta$model("Cannot bind " + $$appliedMethod.string + " to "+o);
    return $$appliedMethod(o);
  }
  defineAttr($$appliedMethod,'string',function(){
    return FunctionModel$meta$model.$$.prototype.$prop$getString.get.call($$appliedMethod);
  },undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string'],$cont:AppliedMethod};});
  return $$appliedMethod;
}
AppliedMethod.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$tp:{Container$Method:{'var':'in'},Type$Method:{'var':'out','def':{t:Anything}},Arguments$Method:{'var':'in','satisfies':[{t:Sequential,a:{Element$Iterable:{t:Anything}}}],'def':{t:Nothing}}},satisfies:[{t:Method$meta$model,a:{Arguments$Method:'Arguments$Method',Type$Method:'Type$Method',Container$Method:'Container$Method'}}],$an:function(){return[shared()];},d:['ceylon.language.meta.model','Method']};};
exports.AppliedMethod$meta$model=AppliedMethod;
function $init$AppliedMethod(){
    if (AppliedMethod.$$===undefined){
        initTypeProto(AppliedMethod,'ceylon.language.meta.model::AppliedMethod',Basic,Method$meta$model);
        (function($$appliedMethod){
//this area was moved inside AppliedMethod()            
        })(AppliedMethod.$$.prototype);
    }
    return AppliedMethod;
}
exports.$init$AppliedMethod$meta$model=$init$AppliedMethod;
$init$AppliedMethod();

//ClassDefinition AppliedAttribute at X (96:0-101:0)
function AppliedAttribute(pname, atr,$$targs$$,$$appliedAttribute){
  $init$AppliedAttribute();
  if ($$appliedAttribute===undefined) {
    $$appliedAttribute=function(x){return AppliedValue(x,atr, {Get$Value:$$targs$$.Get$Attribute,Set$Value:$$targs$$.Set$Attribute,
      Container$Value:$$targs$$.Container$Attribute});};
    $$appliedAttribute.$$=AppliedAttribute.$$;
    var dummy=new AppliedAttribute.$$;
    $$appliedAttribute.getT$all=function(){return dummy.getT$all();};
    $$appliedAttribute.getT$name=function(){return dummy.getT$name();};
  }
  set_type_args($$appliedAttribute,$$targs$$);
  Attribute$meta$model($$appliedAttribute.$$targs$$===undefined?$$targs$$:{Get$Attribute:$$appliedAttribute.$$targs$$.Get$Attribute,Set$Attribute:$$appliedAttribute.$$targs$$.Set$Attribute,Container$Attribute:$$appliedAttribute.$$targs$$.Container$Attribute},$$appliedAttribute);
  $$appliedAttribute.tipo=atr;
  $$appliedAttribute.pname=pname;
  defineAttr($$appliedAttribute,'type',function(){
    var t = getrtmm$$(atr);
    t=t.$t;
    return typeLiteral$meta({Type$typeLiteral:t});
  },undefined,function(){return{mod:$CCMM$,$t:{t:Type$meta$model,a:{Type$Type:'Get$Attribute'}},$cont:AppliedAttribute,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Attribute','$at','type']};});
  //AttributeGetterDefinition declaration at X (100:4-100:83)
  defineAttr($$appliedAttribute,'declaration',function(){
    var mm = getrtmm$$(atr);
    var pkg = getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]);
    return OpenValue(pkg, atr);
  },undefined,function(){return{mod:$CCMM$,$t:{t:ValueDeclaration$meta$declaration},$cont:AppliedAttribute,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.model','Attribute','$at','declaration']};});
  $$appliedAttribute.$bind=function(cont){
    return AppliedValue(cont,atr,{Get$Value:$$targs$$.Get$Attribute,Set$Value:$$targs$$.Set$Attribute,
      Container$Value:$$targs$$.Container$Attribute});
  }
  defineAttr($$appliedAttribute,'string',function(){
    var c=getrtmm$$(atr).$cont;
    if (typeof(c.$crtmm$)==='function')c.$crtmm$=c.$crtmm$();
    if (!c)return String$($qname(atr));
    c=c.$crtmm$;
    var qn=$qname(c);
    if (c.$tp) {
      qn+="<"; var first=true;
      var cnt=$$targs$$&&$$targs$$.Container$Attribute&&$$targs$$.Container$Attribute.a;
      for (var tp in c.$tp) {
        if (first)first=false;else qn+=",";
        var _ta=cnt&&cnt[tp];
        if (_ta) {
          qn+=$qname(_ta);
        } else qn+=$qname(Anything);
      }
      qn+=">";
    }
    qn+="."+pname;
    return String$(qn);
  },undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
  $$appliedAttribute.equals=function(o) {
    return isOfType(o,{t:AppliedAttribute}) && o.tipo===atr;
  }
  return $$appliedAttribute;
}
AppliedAttribute.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$tp:{Get:{'var':'out','def':{t:Anything}},Set:{'var':'in','def':{t:Nothing}},Container:{'var':'in'}},satisfies:[{t:Attribute$meta$model,a:{Get:'Get',Set:'Set',Container:'Container'}}],$an:function(){return[shared()];},d:['ceylon.language.meta.model','Attribute']};};
exports.AppliedAttribute=AppliedAttribute;
function $init$AppliedAttribute(){
    if (AppliedAttribute.$$===undefined){
        initTypeProto(AppliedAttribute,'ceylon.language.meta.model::AppliedAttribute',Basic,Attribute$meta$model);
        (function($$appliedAttribute){
//moved to initializer            
        })(AppliedAttribute.$$.prototype);
    }
    return AppliedAttribute;
}
exports.$init$AppliedAttribute$meta$model=$init$AppliedAttribute;
$init$AppliedAttribute();

function $findAnnotation(cont,ant) {
  var _m=getrtmm$$(cont);
  if (!(_m && _m.$an))return null;
  if (typeof(_m.$an)==='function')_m.$an=_m.$an();
  for (var i=0; i < _m.$an.length; i++) {
    if (isOfType(_m.$an[i],{t:ant}))return _m.$an[i];
  }
  return null;
}
//Find the real declaration of something from its model definition
function _findTypeFromModel(pkg,mdl,cont) {
  var mod = pkg.container;
  //TODO this is very primitive needs a lot of rules replicated from the JsIdentifierNames
  var nm = mdl.$nm;
  var mt = mdl['$mt'];
  if (mt === 'attr' || mt === 'gttr' || mt === 'obj') {
    nm = '$prop$get' + nm[0].toUpperCase() + nm.substring(1);
  }
  if (cont) {
    var imm=getrtmm$$(cont);
    if (mt==='cls'||mt==='ifc')nm=nm+'$'+imm.d[imm.d.length-1];
  }else {
    nm+=pkg.suffix;
  }
  var out=cont?cont.$$.prototype:mod.meta;
  var rv=out[nm];
  if (rv===undefined)rv=out['$'+nm];
  if (rv===undefined){
    rv=out['$init$'+nm];
    if (typeof(rv)==='function')rv=rv();
  }
  return rv;
}
//Pass a {t:Bla} and get a FreeClass,FreeInterface,etc (OpenType).
function _openTypeFromTarg(targ) {
  if (targ.t==='u' || targ.t==='i') {
    var tl=[];
    for (var i=0; i < targ.l.length; i++) {
      var _ct=targ.l[i];
      tl.push(_ct.t?_openTypeFromTarg(_ct):_ct);
    }
    return (targ.t==='u'?FreeUnion:FreeIntersection)(tl.reifyCeylonType({Element$Iterable:{t:OpenType$meta$declaration}}));
  } else if (targ.t==='T') {
    targ=$retuple(targ);
  }
  var mm=getrtmm$$(targ.t);
  var lit = typeLiteral$meta({Type$typeLiteral:targ.t});
  if (targ.a && lit)lit._targs=targ.a;
  var mdl = get_model(mm);
  if (mdl.$mt==='ifc') {
    return FreeInterface(lit);
  } else if (mdl.$mt==='cls' || mdl.$mt==='obj') {
    return FreeClass(lit);
  }
  console.log("Don't know WTF to return for " + lit + " metatype " + mdl.$mt);
}

//ClassDefinition FreeClass at X (161:0-168:0)
function FreeClass(declaration, $$freeClass){
  $init$FreeClass();
  if ($$freeClass===undefined)$$freeClass=new FreeClass.$$;
  OpenClassType$meta$declaration($$freeClass);
  $$freeClass._decl=declaration;
  $$freeClass.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:ClassDeclaration$meta$declaration},$cont:FreeClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenClassType','$at','declaration']};}};
  $$freeClass.$prop$getDeclaration.get=function(){return declaration};
  return $$freeClass;
}
FreeClass.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:OpenClassType$meta$declaration}],d:['ceylon.language.meta.declaration','OpenClassType']};};
function $init$FreeClass(){
  if (FreeClass.$$===undefined){
   initTypeProto(FreeClass,'ceylon.language.meta.declaration::FreeClass',Basic,OpenClassType$meta$declaration);
   (function($$freeClass){
    $$freeClass.equals=function(other) {
      return isOfType(other,{t:FreeClass}) && other.declaration.equals(this.declaration) && this.typeArguments.equals(other.typeArguments);
    }
   })(FreeClass.$$.prototype);
  }
  return FreeClass;
}
exports.$init$FreeClass=$init$FreeClass;
$init$FreeClass();

//ClassDefinition FreeInterface at X (170:0-177:0)
function FreeInterface(declaration, $$freeInterface){
    $init$FreeInterface();
    if ($$freeInterface===undefined)$$freeInterface=new FreeInterface.$$;
    OpenInterfaceType$meta$declaration($$freeInterface);
    
    //AttributeDeclaration declaration at X (173:4-173:50)
    $$freeInterface._decl=declaration;
    $$freeInterface.$prop$getDeclaration.get=function(){return declaration};
    return $$freeInterface;
}
FreeInterface.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:OpenInterfaceType$meta$declaration}],d:['ceylon.language.meta.declaration','OpenInterfaceType']};};
function $init$FreeInterface(){
  if (FreeInterface.$$===undefined){
    initTypeProto(FreeInterface,'ceylon.language.meta.declaration::FreeInterface',Basic,OpenInterfaceType$meta$declaration);
    (function($$freeInterface){
    $$freeInterface.equals=function(other) {
      return isOfType(other,{t:FreeInterface}) && other.declaration.equals(this.declaration) && this.typeArguments.equals(other.typeArguments);
    }
            
    })(FreeInterface.$$.prototype);
  }
  return FreeInterface;
}
exports.$init$FreeInterface=$init$FreeInterface;
$init$FreeInterface();

//ClassDefinition OpenFunction at X (18:0-36:0)
function OpenFunction(pkg, meta, that){
    $init$OpenFunction();
    if (that===undefined)that=new OpenFunction.$$;
    that._pkg=pkg;
    var _mm=getrtmm$$(meta);
    if (_mm === undefined) {
      //it's a metamodel
      that.meta=meta;
      that.tipo=_findTypeFromModel(pkg,meta);
      _mm=getrtmm$$(that.tipo);
    } else {
      //it's a type
      that.tipo = meta;
      that.meta = get_model(_mm);
    }
    that.name_=(_mm&&_mm.d[_mm.d.length-1])||'?';
    that.toplevel_=_mm===undefined||_mm.$cont===undefined;
    FunctionDeclaration$meta$declaration(that);
    return that;
}
OpenFunction.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:FunctionDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','FunctionDeclaration']};};
function $init$OpenFunction(){
  if (OpenFunction.$$===undefined){
    initTypeProto(OpenFunction,'ceylon.language.meta.declaration::OpenFunction',Basic,FunctionDeclaration$meta$declaration);
    (function($$openFunction){
$$openFunction.equals=function(o) {
  if (isOfType(o,{t:OpenFunction})) {
    return o.tipo === this.tipo;
  }
  return false;
}
$$openFunction.equals.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Boolean$},d:['ceylon.language','Object','$m','equals']};}
defineAttr($$openFunction,'container',function(){
  if (this.$parent)return this.$parent;
  if (this.toplevel)return this.containingPackage;
  return typeLiteral$meta({Type$typeLiteral:this.tipo.$crtmm$.$cont});
},undefined,function(){return{mod:$CCMM$,$t:{t:'u',l:[{t:NestableDeclaration$meta$declaration},{t:Package$meta$declaration}]},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','container']};});
defineAttr($$openFunction,'annotation',function(){
  return $findAnnotation(this.tipo,AnnotationAnnotation)!==null;
},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionalDeclaration','$at','annotation']};});

      $$openFunction.$apply=function $apply(types,$mptypes){
        var mm=this.tipo.$crtmm$;
        var ta={t:this.tipo};
        validate$typeparams(ta,mm.$tp,types);
        validate$params(mm.$ps,$mptypes.Arguments$apply,"Wrong number of arguments when applying function");
        return ta.a?AppliedFunction(this.tipo,{Type:mm.$t,Arguments:tupleize$params(mm.$ps,ta.a)},undefined,ta.a):
          AppliedFunction(this.tipo,{Type:mm.$t,Arguments:tupleize$params(mm.$ps)});
      };$$openFunction.$apply.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Function$meta$model,a:{Arguments:{t:Nothing},Type:{t:Anything}}},$ps:[{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model}}}}],$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','apply']};};

      $$openFunction.memberApply=function memberApply(cont,types,$mptypes){
        var mm=this.tipo.$crtmm$;
        if (!(cont.tipo && extendsType({t:cont.tipo},{t:mm.$cont}))&&cont!==getNothingType$meta$model())
          throw IncompatibleTypeException$meta$model("Incompatible Container type argument");
        if (!extendsType(mm.$t,$mptypes.Return$memberApply))throw IncompatibleTypeException$meta$model("Incompatible Return type argument");
        validate$params(mm.$ps,$mptypes.Arguments$memberApply,"Wrong number of Arguments for memberApply");
        var ta={t:this.tipo};
        validate$typeparams(ta,mm.$tp,types);
        return AppliedMethod(this.tipo,types,{Container$Method:$mptypes.Container$memberApply,
          Type$Method:mm.$t,Arguments$Method:tupleize$params(mm.$ps,ta.a)});
      };$$openFunction.memberApply.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Method$meta$model,a:{Arguments:'Arguments',Type:'MethodType',Container:'Container'}},$ps:[{$nm:'types',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model}}}}],$cont:OpenFunction,$tp:{Container:{},MethodType:{},Arguments:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}]}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','memberApply']};};
            
            //AttributeDeclaration defaulted at X (25:4-25:44)
            defineAttr($$openFunction,'defaulted',function(){
                return false;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','defaulted']};});
            
            //AttributeDeclaration variadic at X (26:4-26:43)
            defineAttr($$openFunction,'variadic',function(){
                var $$openFunction=this;
                return false;
            },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','variadic']};});
    $$openFunction.getParameterDeclaration=function (name$6){
      var pd=this.parameterDeclarations;
      for (var i=0; i < pd.length; i++) {
        if (name$6.equals(pd[i].name))return pd[i];
      }
      return null;
    };
    $$openFunction.getParameterDeclaration.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:FunctionOrValueDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','getParameterDeclaration']};};
            
            //AttributeGetterDefinition openType at X (33:2-33:43)
    defineAttr($$openFunction,'openType',function(){
      var t = this.tipo.$crtmm$.$t;
      if (typeof(t)==='string')return OpenTvar(OpenTypeParam(this.tipo,t));
      return _openTypeFromTarg(t);
    },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','openType']};});
            defineAttr($$openFunction,'name',function(){return this.name_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','name']};});
            defineAttr($$openFunction,'containingPackage',function(){return this._pkg;},undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','containingPackage']};});
            defineAttr($$openFunction,'containingModule',function(){return this._pkg.container;},undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','containingPackage']};});
            defineAttr($$openFunction,'toplevel',function(){return this.toplevel_;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','toplevel']};});

    defineAttr($$openFunction,'string',function(){return String$("function " + this.qualifiedName);},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','string']};});
    defineAttr($$openFunction,'qualifiedName',function(){
       return String$($qname(this.tipo));
    },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenFunction,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','qualifiedName']};});
    })(OpenFunction.$$.prototype);
  }
  return OpenFunction;
}
exports.$init$OpenFunction=$init$OpenFunction;
$init$OpenFunction();

//ClassDefinition OpenValue at X (38:0-45:0)
function OpenValue(pkg, meta, that){
  $init$OpenValue();
  if (that===undefined)that=new OpenValue.$$;
  that._pkg = pkg;
  var _mm=getrtmm$$(meta);
  if (_mm === undefined) {
    //it's a metamodel
    that.meta=meta;
    if (meta['$mt']==='prm') {
      that.tipo={$crtmm$:meta};
      //TODO I think we need to do something else here
    } else {
      that.tipo=_findTypeFromModel(pkg,meta);
    }
    _mm = getrtmm$$(that.tipo);
  } else {
    //it's a type
    that.tipo = meta;
    that.meta = get_model(_mm);
  }
  that.name_=_mm.d===undefined?_mm['$nm']:_mm.d[_mm.d.length-1];
  that.toplevel_=_mm.$cont === undefined;
  ValueDeclaration$meta$declaration(that);
  return that;
}
OpenValue.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:ValueDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','ValueDeclaration']};};
function $init$OpenValue(){
  if (OpenValue.$$===undefined){
    initTypeProto(OpenValue,'ceylon.language.meta.declaration::OpenValue',Basic,ValueDeclaration$meta$declaration);
    (function($$openValue){

defineAttr($$openValue,'container',function(){
  if (this.$parent)return this.$parent;
  if (this.toplevel)return this.containingPackage;
  return typeLiteral$meta({Type$typeLiteral:this.tipo.$crtmm$.$cont});
},undefined,function(){return{mod:$CCMM$,$t:{t:'u',l:[{t:NestableDeclaration$meta$declaration},{t:Package$meta$declaration}]},d:['ceylon.language.meta.declaration','NestableDeclaration','$at','container']};});
            
            //MethodDefinition apply at X (39:4-39:68)
      $$openValue.$apply=function $apply($$$mptypes){
        var mm=getrtmm$$(this.tipo);
        if (!extendsType(mm.$t,$$$mptypes.Get$apply))throw IncompatibleTypeException$meta$model("Incompatible Get type argument");
        if (!extendsType($$$mptypes.Set$apply,this.tipo.set?mm.$t:{t:Nothing}))throw IncompatibleTypeException$meta$model("Incompatible Set type argument");
        return AppliedValue(undefined,this.tipo,{Get$Value:$$$mptypes.Get$apply,Set$Value:$$$mptypes.Set$apply});
      };$$openValue.$apply.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Value$meta$model,a:{Type:{t:Anything}}},$ps:[{$nm:'instance',$mt:'prm',$def:1,$t:{t:Anything}}],$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','apply']};};

      $$openValue.memberApply=function memberApply(cont,$mptypes) {
        var mm=getrtmm$$(this.tipo);
        if (!(cont.tipo && extendsType({t:cont.tipo},{t:mm.$cont}))&&cont!==getNothingType$meta$model())
          throw IncompatibleTypeException$meta$model("Incompatible Container type argument");
        if (!extendsType(mm.$t,$mptypes.Get$memberApply))throw IncompatibleTypeException$meta$model("Incompatible Get type argument");
        if (!extendsType($mptypes.Set$memberApply,this.tipo.set?mm.$t:{t:Nothing}))throw IncompatibleTypeException$meta$model("Incompatible Set type argument");
        return AppliedAttribute(this.meta.$nm,this.tipo,{Get$Attribute:$mptypes.Get$apply,Set$Attribute:$mptypes.Set$apply,
          Container$Attribute:$mptypes.Container$memberApply});
      };$$openValue.memberApply.$crtmm$=function(){return{mod:$CCMM$,d:['ceylon.language.meta.declaration','ValueDeclaration','$m','memberApply']};};
      defineAttr($$openValue,'defaulted',function(){
        return false;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','defaulted']};});
      defineAttr($$openValue,'variadic',function(){
        return false;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','variadic']};});
      defineAttr($$openValue,'variable',function(){
        return $findAnnotation(this.tipo,VariableAnnotation)!==null;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','variadic']};});
            
  defineAttr($$openValue,'openType',function(){
    if (this.tipo) {
      var mm = getrtmm$$(this.tipo);
      if (typeof(mm.$t)==='string') {
        return OpenTypeParam(mm.$cont,mm.$t);
      }
      return _openTypeFromTarg(mm.$t);
    }
    throw Error("OpenValue.openType-we don't have a metamodel!");
  },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','openType']};});

defineAttr($$openValue,'name',function(){return this.name_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','name']};});
defineAttr($$openValue,'containingPackage',function(){return this._pkg;},undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','containingPackage']};});
defineAttr($$openValue,'containingModule',function(){return this._pkg.container;},undefined,function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','containingModule']};});
defineAttr($$openValue,'toplevel',function(){return this.toplevel_;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','toplevel']};});

  $$openValue.equals=function(other) {
    if (isOfType(other, {t:OpenValue}) && other.name.equals(this.name) && other.toplevel===this.toplevel && other.containingPackage.equals(this.containingPackage)) {
      return other.meta==this.meta;
    }
    return false;
  }
  defineAttr($$openValue,'string',function(){return String$("value " + this.qualifiedName);},undefined,{$an:function(){return[shared(),actual()]},mod:$CCMM$,d:['ceylon.language','Object','$at','string']});

    defineAttr($$openValue,'qualifiedName',function(){
      return String$($qname(this.tipo));
    },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','qualifiedName']};});
    $$openValue.memberSet=function(c,v) {
      if (!isOfType(c,{t:this.tipo.$crtmm$.$cont}))throw IncompatibleTypeException$meta$model("Incompatible container type");
      if (!isOfType(v,this.tipo.$crtmm$.$t))throw IncompatibleTypeException$meta$model("Incompatible value type");
      if (!this.tipo.set)throw MutationException$meta$model($qname(this.tipo.$crtmm$)+" is not writable");
      c[this.name]=v;
    };
    defineAttr($$openValue,'setter',function(){
      return OpenSetter(this);
    },undefined,function(){return{mod:$CCMM$,$t:{t:SetterDeclaration$meta$declaration},$cont:OpenValue,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','setter']};});

    })(OpenValue.$$.prototype);
  }
  return OpenValue;
}
exports.$init$OpenValue=$init$OpenValue;
$init$OpenValue();

//ClassDefinition OpenSetter at opentypes.ceylon (63:0-63:90)
function OpenSetter(v, $$openSetter){
  $init$OpenSetter();
  if ($$openSetter===undefined)$$openSetter=new OpenSetter.$$;
  $$openSetter.variable_=v;
  SetterDeclaration$meta$declaration($$openSetter);
  $$openSetter.tipo=v.tipo.set;
  if (v.tipo.set && v.tipo.set.setter$anns) {
    var mm={};
    var omm=getrtmm$$(v.tipo.set)
    for (var k in omm)mm[k]=omm[k];
    mm.$an=v.tipo.set.setter$anns;
    v.tipo.set.$crtmm$=mm;
  }
  return $$openSetter;
}
OpenSetter.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:SetterDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','SetterDeclaration']};};
function $init$OpenSetter(){
    if (OpenSetter.$$===undefined){
        initTypeProto(OpenSetter,'ceylon.language.meta.declaration::OpenSetter',Basic,SetterDeclaration$meta$declaration);
        (function($$openSetter){
            defineAttr($$openSetter,'variable',function(){return this.variable_;},undefined,function(){return{mod:$CCMM$,$t:{t:ValueDeclaration$meta$declaration},$cont:OpenSetter,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','SetterDeclaration','$at','variable']};});
        })(OpenSetter.$$.prototype);
    }
    return OpenSetter;
}
exports.$init$OpenSetter=$init$OpenSetter;
$init$OpenSetter();

//ClassDefinition OpenClass at X (47:0-70:0)
function OpenClass(pkg, meta, that){
    $init$OpenClass();
    if (that===undefined)that=new OpenClass.$$;
    that._pkg = pkg;
    var _mm=getrtmm$$(meta);
    if (_mm === undefined) {
      //it's a metamodel
      that.meta=meta;
      that.tipo=_findTypeFromModel(pkg,meta);
      _mm = getrtmm$$(that.tipo);
    } else {
      //it's a type
      that.tipo = meta;
      that.meta = get_model(_mm);
    }
    that.name_=_mm.d[_mm.d.length-1];
    that.toplevel_=_mm.$cont===undefined;
    ClassDeclaration$meta$declaration(that);
    return that;
}
OpenClass.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:ClassDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','ClassDeclaration']};};
function $init$OpenClass(){
  if (OpenClass.$$===undefined){
    initTypeProto(OpenClass,'ceylon.language.meta.declaration::OpenClass',Basic,ClassDeclaration$meta$declaration);
    (function($$openClass){

$$openClass.classApply=function(targs,$mptypes) {
  var mm=this.tipo.$crtmm$;
  if (mm.$tp) {
    if (!targs)throw TypeApplicationException$meta$model("This class requires type arguments");
    //TODO generate targs
  }
  validate$params(mm.$ps,$mptypes.Arguments$classApply,"Wrong number of Arguments for classApply");
  return this.$apply(targs,$mptypes);//TODO tupleize, targs $apply
}
$$openClass.memberClassApply=function(cont,targs,$mptypes){
  var mm=this.tipo.$crtmm$;
  if (cont!==getNothingType$meta$model() && !extendsType({t:cont.tipo},{t:mm.$cont}))
    throw IncompatibleTypeException$meta$model("Incompatible Container specified");
  if (!extendsType({t:this.tipo},$mptypes.Type$memberClassApply))
    throw IncompatibleTypeException$meta$model("Incompatible Type specified");
  var _t={t:this.tipo};
  validate$typeparams(_t,mm.$tp,targs);
  validate$params(mm.$ps,$mptypes.Arguments$memberClassApply,"Wrong number of Arguments for classApply");
  var rv=AppliedMemberClass(this.tipo,{Container$MemberClass:{t:mm.$cont},Type$MemberClass:_t,Arguments$MemberClass:tupleize$params(mm.$ps)});
  if (_t.a)rv.$targs=_t.a;
  return rv;
}

      defineAttr($$openClass,'string',function(){
        return String$("class " + this.qualifiedName);
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language','Object']};}); 
      defineAttr($$openClass,'anonymous',function(){
        return this.meta.$mt==='obj';
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','anonymous']};});
      defineAttr($$openClass,'abstract',function(){
        return $findAnnotation(this.tipo,AbstractAnnotation)!==null;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','abstract']};});
      defineAttr($$openClass,'$final',function(){
        return $findAnnotation(this.tipo,FinalAnnotation)!==null;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','final']};});
      defineAttr($$openClass,'annotation',function(){
        return $findAnnotation(this.tipo,AnnotationAnnotation)!==null;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionalDeclaration','$at','annotation']};});
           
            //AttributeGetterDefinition openType at X (61:2-61:43)
            defineAttr($$openClass,'openType',function(){
              return FreeClass(this);
            },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','openType']};});
            
            $$openClass.getParameterDeclaration=function (name$15){
      var pd=this.parameterDeclarations;
      for (var i=0; i < pd.length; i++) {
        if (name$6.equals(pd[i].name))return pd[i];
      }
      return null;
            };
            $$openClass.getParameterDeclaration.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:FunctionOrValueDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$}}],$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$m','getParameterDeclaration']};};
            
            //AttributeDeclaration superclassDeclaration at X (68:2-68:86)
            defineAttr($$openClass,'extendedType',function(){
              var sc = this.tipo.$crtmm$['super'];
              if (sc === undefined)return null;
              var mm = getrtmm$$(sc.t);
              var fc=FreeClass(OpenClass(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), sc.t));
              if (sc.a)fc.declaration._targs=sc.a;
              return fc;
            },undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:OpenClassType$meta$declaration}]},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','extendedType']};});
            
            //AttributeDeclaration interfaceDeclarations at X (69:2-69:89)
            defineAttr($$openClass,'satisfiedTypes',function(){
              var ints = this.tipo.$crtmm$['satisfies'];
              if (ints && ints.length) {
                var rv = [];
                for (var i=0; i < ints.length; i++) {
                  var ifc = ints[i];
                  var mm = getrtmm$$(ifc.t);
                  var fi=FreeInterface(OpenInterface(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), ifc.t));
                  if (ifc.a)fi.declaration._targs=ifc.a;
                  rv.push(fi);
                }
                return ArraySequence(rv,{Element$Iterable:{t:OpenInterfaceType$meta$declaration}});
              }
              return getEmpty();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenInterfaceType$meta$declaration}}},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','satisfiedTypes']};});
            defineAttr($$openClass,'name',function(){return this.name_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','name']};});
            defineAttr($$openClass,'containingPackage',function(){return this._pkg;},undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','containingPackage']};});
            defineAttr($$openClass,'containingModule',function(){return this._pkg.container;},undefined,function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','containingModule']};});
            defineAttr($$openClass,'toplevel',function(){return this.toplevel_;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ClassDeclaration','$at','toplevel']};});

    defineAttr($$openClass,'qualifiedName',function(){
      return String$($qname(this.tipo));
    },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenClass,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','qualifiedName']};});

      $$openClass.equals=function(other) {
        return isOfType(other, {t:OpenClass}) && other.tipo===this.tipo;
      }
    })(OpenClass.$$.prototype);
  }
  return OpenClass;
}
exports.$init$OpenClass=$init$OpenClass;
$init$OpenClass();

//ClassDefinition OpenInterface at X (72:0-92:0)
function OpenInterface(pkg, meta, that) {
    $init$OpenInterface();
    if (that===undefined)that=new OpenInterface.$$;
    that._pkg = pkg;
    var _mm=getrtmm$$(meta);
    if (_mm === undefined) {
      //it's a metamodel
      that.meta=meta;
      that.tipo=_findTypeFromModel(pkg,meta);
      _mm = getrtmm$$(that.tipo);
    } else {
      //it's a type
      that.tipo = meta;
      that.meta = get_model(_mm);
    }
    that.name_=_mm.d[_mm.d.length-1];
    that.toplevel_=_mm.$cont === undefined;
    InterfaceDeclaration$meta$declaration(that);
    return that;
}
OpenInterface.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:InterfaceDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','InterfaceDeclaration']};};
function $init$OpenInterface(){
  if (OpenInterface.$$===undefined){
    initTypeProto(OpenInterface,'ceylon.language.meta.declaration::OpenInterface',Basic,InterfaceDeclaration$meta$declaration);
    (function($$openInterface){
      $$openInterface.equals=function(other) {
        return isOfType(other, {t:OpenInterface}) && other.tipo==this.tipo;
      }
$$openInterface.memberInterfaceApply=function(cont,targs,$mptypes){
  var mm=this.tipo.$crtmm$;
  if (cont!==getNothingType$meta$model() && !extendsType({t:cont.tipo},{t:mm.$cont}))
    throw IncompatibleTypeException$meta$model("Incompatible Container specified");
  var _t={t:this.tipo};
  validate$typeparams(_t,mm.$tp,targs);
  var rv=AppliedMemberInterface(this.tipo,{Container$MemberInterface:{t:mm.$cont},Type$MemberInterface:_t});
  if (_t.a)rv.$targs=_t.a;
  return rv;
}
$$openInterface.interfaceApply=function(targs,$mptypes) {
  return this.$apply(targs,$mptypes); //TODO mptypes $apply
}
            
defineAttr($$openInterface,'string',function(){
  return String$("interface " + this.qualifiedName);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language','Object']};}); 
           
            defineAttr($$openInterface,'openType',function(){
              return FreeInterface(this);
            },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$at','openType']};});
            defineAttr($$openInterface,'extendedType',function(){
              var sc = this.tipo.$crtmm$['super'];
              if (sc === undefined)return null;
              var mm = getrtmm$$(sc.t);
              return FreeClass(OpenClass(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), sc.t));
            },undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:OpenClasType$meta$declaration}]},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$at','extendedType']};});
            
            //AttributeDeclaration interfaceDeclarations at X (91:2-91:89)
            defineAttr($$openInterface,'satisfiedTypes',function(){
              var ints = this.tipo.$crtmm$['satisfies'];
              if (ints && ints.length) {
                var rv = [];
                for (var i=0; i < ints.length; i++) {
                  var ifc = ints[i].t;
                  var mm = getrtmm$$(ifc);
                  rv.push(FreeInterface(OpenInterface(getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']).findPackage(mm.d[0]), ifc)));
                }
                return ArraySequence(rv,{Element$Iterable:{t:OpenInterfaceType$meta$declaration}});
              }
              return getEmpty();
            },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenInterfaceType$meta$declaration}}},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$at','satisfiedTypes']};});
            defineAttr($$openInterface,'name',function(){return this.name_;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$at','name']};});
            defineAttr($$openInterface,'containingPackage',function(){return this._pkg;},undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$at','containingPackage']};});
            defineAttr($$openInterface,'containingModule',function(){return this._pkg.container;},undefined,function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$at','containingModule']};});
            defineAttr($$openInterface,'toplevel',function(){return this.toplevel_;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','InterfaceDeclaration','$at','toplevel']};});

    defineAttr($$openInterface,'qualifiedName',function(){
      return String$($qname(this.tipo));
    },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenInterface,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','qualifiedName']};});
        })(OpenInterface.$$.prototype);
    }
    return OpenInterface;
}
exports.$init$OpenInterface=$init$OpenInterface;
$init$OpenInterface();

function OpenAlias(alias, $$openAlias){
  $init$OpenAlias();
  if ($$openAlias===undefined)$$openAlias=new OpenAlias.$$;
  if (typeof(alias)==='function')alias=alias();
  $$openAlias._alias = alias;
  //Get model from path
  var mm=getrtmm$$(alias);
  $$openAlias.meta=get_model(mm);
  AliasDeclaration$meta$declaration($$openAlias);
  return $$openAlias;
}
OpenAlias.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:AliasDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','OpenAlias']};};
function $init$OpenAlias(){
  if (OpenAlias.$$===undefined){
    initTypeProto(OpenAlias,'OpenAlias',Basic,AliasDeclaration$meta$declaration);
    (function($$openAlias){

      defineAttr($$openAlias,'extendedType',function(){
        return _openTypeFromTarg(this._alias);
      },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','extendedType']};});
      defineAttr($$openAlias,'qualifiedName',function(){
        return String$($qname(this._alias.$crtmm$));
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','qualifiedName']};});
      defineAttr($$openAlias,'toplevel',function(){
        return this._alias.$cont===undefined;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','toplevel']};});
      defineAttr($$openAlias,'containingPackage',function(){
        throw Error("IMPL OpenAlias.containingPackage");
      },undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','containingPackage']};});
      defineAttr($$openAlias,'containingModule',function(){
        throw Exception(String$("IMPL OpenAlias.containingModule"));
      },undefined,function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','containingModule']};});
      defineAttr($$openAlias,'container',function(){
        var cont=this.$$targs$$.Container;
        if (cont===undefined) {
          cont=this._alias.$crtmm$.$cont;
          if (cont)cont={t:cont};
        }
        if (cont) {
          return typeLiteral$meta({Type$typeLiteral:cont});
        }
        return null;
      },undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:NestableDeclaration$meta$declaration},{t:Package$meta$declaration}]},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','container']};});
      defineAttr($$openAlias,'openType',function(){
        return this.extendedType;
      },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','openType']};});
      defineAttr($$openAlias,'typeParameterDeclarations',function(){
        var tps=this._alias.$crtmm$.$tp;
        if (tps) {
          var rv=[];
          for (var tp in tps) {
            rv.push(OpenTypeParam(this._alias, tp));
          }
          return ArraySequence(rv,{Element$Iterable:{t:TypeParameter$meta$declaration}});
        }
        return getEmpty();
      },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:TypeParameter$meta$declaration}}},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','typeParameterDeclarations']};});
      $$openAlias.getTypeParameterDeclaration=function getTypeParameterDeclaration(name$2){
        var tp=this._alias.$crtmm$;
        if (tp.$tp) {
          var tpn=undefined;
          for (var ftn in tp.$tp) {
            if (ftn.substring(0,name$2.length+1)==name$2+'$') {
              tpn=ftn;
            }
          }
          tp=tpn;
        } else {
          tp=undefined;
        }
        return tp ? OpenTypeParam(this._alias, tp) : null;
      };$$openAlias.getTypeParameterDeclaration.$crtmm$=function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:TypeParameter$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$m','getTypeParameterDeclaration']};};
      defineAttr($$openAlias,'name',function(){
        return String$(this._alias.$crtmm$.d[this._alias.$crtmm$.d.length-1]);
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','name']};});
      defineAttr($$openAlias,'string',function(){return StringBuilder().append(String$("alias ")).append(this.qualifiedName).string;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenAlias,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','AliasDeclaration','$at','string']};});
  $$openAlias.equals=function equals(o) {
    if (o && isOfType(o, {t:OpenAlias})) {
      if (o._alias.a) {
        return o._alias.a == this._alias.a;
      }
      return o._alias.t === this._alias.t;
    }
    return false;
  }
    })(OpenAlias.$$.prototype);
  }
  return OpenAlias;
}
exports.$init$OpenAlias=$init$OpenAlias;
$init$OpenAlias();

function OpenTypeParam(cont, nom, that){
  $init$OpenTypeParam();
  if (that===undefined)that=new OpenTypeParam.$$;
  that._cont=cont;
  that._fname=nom;
  if (nom.indexOf('$')>0)nom=nom.substring(0,nom.indexOf('$'));
  that._name=nom;
  TypeParameter$meta$declaration(that);
  return that;
}
OpenTypeParam.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:TypeParameter$meta$declaration}],$an:function(){return[shared()];},d:['ceylon.language.meta.declaration','TypeParameter']};};
exports.OpenTypeParam=OpenTypeParam;
function $init$OpenTypeParam(){
  if (OpenTypeParam.$$===undefined){
    initTypeProto(OpenTypeParam,'ceylon.language.meta.declaration::OpenTypeParam',Basic,TypeParameter$meta$declaration);
    (function($$openTypeParam){
      //AttributeGetterDefinition container at caca.ceylon (7:4-7:94)
      defineAttr($$openTypeParam,'container',function(){return this._cont;},undefined,function(){return{mod:$CCMM$,$t:{t:NestableDeclaration$meta$declaration},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','container']};});
      //AttributeGetterDefinition defaulted at caca.ceylon (8:4-8:82)
      defineAttr($$openTypeParam,'defaulted',function(){
        var tp=this._cont.$crtmm$.$tp[this._fname];
        if (tp) {
          return tp['def'] !== undefined;
        }
        throw wrapexc(Exception(String$("TypeParameter.defaulted",23)),'8:38-8:80','caca.ceylon');
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','defaulted']};});
      //AttributeGetterDefinition defaultTypeArgument at caca.ceylon (9:4-9:104)
      defineAttr($$openTypeParam,'defaultTypeArgument',function(){
        var tp=this._cont.$crtmm$.$tp[this._fname];
        if (typeof(tp.def)==='string') {
          return OpenTvar(OpenTypeParam(this._cont, tp.def));
        }
        return tp.def?_openTypeFromTarg(tp.def):null;
      },undefined,function(){return{mod:$CCMM$,$t:{ t:'u', l:[{t:Null},{t:OpenType$meta$declaration}]},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','defaultTypeArgument']};});
      //AttributeGetterDefinition variance at caca.ceylon (10:4-10:81)
      defineAttr($$openTypeParam,'variance',function(){
        var tp=this._cont.$crtmm$.$tp[this._fname];
        if (tp) {
          if (tp['var']==='out')return getCovariant$meta$declaration();
          if (tp['var']=== 'in')return getContravariant$meta$declaration();
          return getInvariant$meta$declaration();
        }
        throw wrapexc(Exception(String$("TypeParameter.variance",22)),'10:38-10:79','caca.ceylon');
      },undefined,function(){return{mod:$CCMM$,$t:{t:Variance$meta$declaration},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','variance']};});
      //AttributeGetterDefinition satisfiedTypes at caca.ceylon (11:4-11:95)
      defineAttr($$openTypeParam,'satisfiedTypes',function(){
        var tp=this._cont.$crtmm$.$tp[this._fname];
        if (tp.satisfies) {
          var a=[];
          for (var i=0;i<tp.satisfies.length;i++) {
            a.push(_openTypeFromTarg(tp.satisfies[i]));
          }
          return ArraySequence(a,{Element$Iterable:{t:OpenType$meta$declaration}});
        }
        return getEmpty();
      },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenType$meta$declaration}}},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','satisfiedTypes']};});
      //AttributeGetterDefinition caseTypes at caca.ceylon (12:4-12:85)
      defineAttr($$openTypeParam,'caseTypes',function(){
        var tp=this._cont.$crtmm$.$tp[this._fname];
        if (tp.of) {
          var a=[];
          for (var i=0;i<tp.of.length;i++) {
            a.push(_openTypeFromTarg(tp.of[i]));
          }
          return ArraySequence(a,{Element$Iterable:{t:OpenType$meta$declaration}});
        }
        return getEmpty();
      },undefined,function(){return{mod:$CCMM$,$t:{t:Sequential,a:{Element$Sequential:{t:OpenType$meta$declaration}}},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','TypeParameter','$at','caseTypes']};});
      //AttributeGetterDefinition name at caca.ceylon (14:4-14:71)
      defineAttr($$openTypeParam,'name',function(){return String$(this._name);},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','name']};});
      //AttributeGetterDefinition qualifiedName at caca.ceylon (15:4-15:81)
      defineAttr($$openTypeParam,'qualifiedName',function(){
        return String$($qname(this._cont)+"."+this._name);
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','qualifiedName']};});
defineAttr($$openTypeParam,'hash',function(){return this.string.hash;},undefined,function(){return {mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Object','$at','hash']};});
      defineAttr($$openTypeParam,'string',function(){return String$("given " + this.qualifiedName);},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenTypeParam,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','Declaration','$at','string']};});
      $$openTypeParam.equals=function(o) {
        return isOfType(o,{t:OpenTypeParam}) && o._cont==this._cont && o._fname==this._fname;
      }
    })(OpenTypeParam.$$.prototype);
  }
  return OpenTypeParam;
}
exports.$init$OpenTypeParam=$init$OpenTypeParam;
$init$OpenTypeParam();

function OpenTvar(p$2, $$openTvar){
    $init$OpenTvar();
    if ($$openTvar===undefined)$$openTvar=new OpenTvar.$$;
    $$openTvar.p$2=p$2;
    OpenTypeVariable$meta$declaration($$openTvar);
    $$openTvar.$prop$getDeclaration={$crtmm$:function(){return{mod:$CCMM$,$t:{t:TypeParameter$meta$declaration},$cont:OpenTvar,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenTvar','$at','declaration']};}};
    $$openTvar.$prop$getDeclaration.get=function(){return declaration};
    return $$openTvar;
}
OpenTvar.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:OpenTypeVariable$meta$declaration}],$an:function(){return[shared()];},d:['ceylon.language.meta.declaration','OpenTvar']};};
exports.OpenTvar=OpenTvar;
function $init$OpenTvar(){
  if (OpenTvar.$$===undefined){
    initTypeProto(OpenTvar,'ceylon.language.meta.declaration::OpenTvar',Basic,$init$OpenTypeVariable$meta$declaration());
    (function($$openTvar){
      defineAttr($$openTvar,'string',function(){return this.p$2.qualifiedName;},undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:OpenTvar,$an:function(){return[shared(),actual()];},d:['ceylon.language','Object','$at','string']};});
            defineAttr($$openTvar,'declaration',function(){
                return this.p$2;
            },undefined,function(){return{mod:$CCMM$,$t:{t:TypeParameter$meta$declaration},$cont:OpenTvar,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenTypeVariable','$at','declaration']};});
$$openTvar.equals=function(o) {
  return isOfType(o, {t:OpenTvar}) && this.p$2.equals(o.p$2);
}
        })(OpenTvar.$$.prototype);
    }
    return OpenTvar;
}
exports.$init$OpenTvar=$init$OpenTvar;
$init$OpenTvar();

function FreeUnion(ts$2, $$freeUnion){
    $init$FreeUnion();
    if ($$freeUnion===undefined)$$freeUnion=new FreeUnion.$$;
    $$freeUnion.ts$2_=ts$2;
    OpenUnion$meta$declaration($$freeUnion);
    $$freeUnion.$prop$getCaseTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:FreeUnion,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenUnion','$at','caseTypes']};}};
    $$freeUnion.$prop$getCaseTypes.get=function(){return caseTypes};
    return $$freeUnion;
}
FreeUnion.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:OpenUnion$meta$declaration}],$an:function(){return[shared()];},d:['ceylon.language.meta.declaration','OpenUnion']};};
exports.FreeUnion=FreeUnion;
function $init$FreeUnion(){
  if (FreeUnion.$$===undefined){
    initTypeProto(FreeUnion,'ceylon.language.meta.declaration::FreeUnion',Basic,OpenUnion$meta$declaration);
    (function($$freeUnion){
      $$freeUnion.equals=function(u) {
        if(isOfType(u,{t:FreeUnion})) {
          var mine=this.caseTypes;
          var his=u.caseTypes;
          if (mine.size==his.size) {
            for (var i=0;i<mine.length;i++) {
              if (!his.contains(mine[i]))return false;
            }
            return true;
          }
        }
        return false;
      }
defineAttr($$freeUnion,'string',function(){
  var s="";
  var first=true;
  for (var i=0;i<this.ts$2.size;i++) {
    if (first)first=false;else s+="|";
    s+=this.ts$2.$get(i).string;
  }
  return String$(s);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
defineAttr($$freeUnion,'hash',function(){
  var s=this.ts$2.size;
  for (var i=0;i<this.ts$2.size;i++) {
    s+=this.ts$2.$get(i).string.hash;
  }
  return s;
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Object','$at','hash']};});
            defineAttr($$freeUnion,'caseTypes',function(){
                var $$freeUnion=this;
                return $$freeUnion.ts$2;
            },undefined,function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:FreeUnion,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenUnion','$at','caseTypes']};});
            defineAttr($$freeUnion,'ts$2',function(){return this.ts$2_;},undefined,function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:FreeUnion,d:['ceylon.language.meta.declaration','OpenUnion','$at','ts']};});
        })(FreeUnion.$$.prototype);
    }
    return FreeUnion;
}
exports.$init$FreeUnion=$init$FreeUnion;
$init$FreeUnion();
function FreeIntersection(ts$3, $$freeIntersection){
    $init$FreeIntersection();
    if ($$freeIntersection===undefined)$$freeIntersection=new FreeIntersection.$$;
    $$freeIntersection.ts$3_=ts$3;
    OpenIntersection$meta$declaration($$freeIntersection);
    $$freeIntersection.$prop$getSatisfiedTypes={$crtmm$:function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:FreeIntersection,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenIntersection','$at','satisfiedTypes']};}};
    $$freeIntersection.$prop$getSatisfiedTypes.get=function(){return satisfiedTypes};
    return $$freeIntersection;
}
FreeIntersection.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},satisfies:[{t:OpenIntersection$meta$declaration}],$an:function(){return[shared()];},d:['ceylon.language.meta.declaration','OpenIntersection']};};
exports.FreeIntersection=FreeIntersection;
function $init$FreeIntersection(){
  if (FreeIntersection.$$===undefined){
    initTypeProto(FreeIntersection,'ceylon.language.meta.declaration::FreeIntersection',Basic,OpenIntersection$meta$declaration);
    (function($$freeIntersection){

$$freeIntersection.equals=function(u) {
  if(isOfType(u,{t:FreeIntersection})) {
    var mine=this.satisfiedTypes;
    var his=u.satisfiedTypes;
    if (mine.size==his.size) {
      for (var i=0;i<mine.length;i++) {
        if (!his.contains(mine[i])){
return false;
}
      }
return true;
    }
  }
return false;
}
defineAttr($$freeIntersection,'string',function(){
  var s="";
  var first=true;
  for (var i=0;i<this.ts$3.size;i++) {
    if (first)first=false;else s+="&";
    s+=this.ts$3.$get(i).string;
  }
  return String$(s);
},undefined,function(){return{mod:$CCMM$,$t:{t:String$},d:['ceylon.language','Object','$at','string']};});
defineAttr($$freeIntersection,'hash',function(){
  var s=this.ts$3.size;
  for (var i=0;i<this.ts$3.size;i++) {
    s+=this.ts$3.$get(i).string.hash;
  }
  return s;
},undefined,function(){return{mod:$CCMM$,$t:{t:Integer},d:['ceylon.language','Object','$at','hash']};});

            defineAttr($$freeIntersection,'satisfiedTypes',function(){
                var $$freeIntersection=this;
                return $$freeIntersection.ts$3;
            },undefined,function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:FreeIntersection,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','OpenIntersection','$at','satisfiedTypes']};});
            defineAttr($$freeIntersection,'ts$3',function(){return this.ts$3_;},undefined,function(){return{mod:$CCMM$,$t:{t:List,a:{Element$List:{t:OpenType$meta$declaration}}},$cont:FreeIntersection,d:['ceylon.language.meta.declaration','OpenIntersection','$at','ts']};});
        })(FreeIntersection.$$.prototype);
    }
    return FreeIntersection;
}
exports.$init$FreeIntersection=$init$FreeIntersection;
$init$FreeIntersection();

function FunParamDecl(cont,param,$$funParamDecl){
  $init$FunParamDecl();
  if ($$funParamDecl===undefined)$$funParamDecl=new FunParamDecl.$$;
  FunctionDeclaration$meta$declaration($$funParamDecl);
  $$funParamDecl.cont=cont;
  $$funParamDecl.param=param;
  $$funParamDecl.tipo={$crtmm$:{$cont:cont.tipo,$t:param.$t,$ps:param.$ps,$mt:'prm',d:cont.tipo.$crtmm$.d,$an:param.$an}};

  $$funParamDecl.$prop$getParameter={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','parameter']};}};
  $$funParamDecl.$prop$getParameter.get=function(){return true;};
  $$funParamDecl.$prop$getAnnotation={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','annotation']};}};
  $$funParamDecl.$prop$getAnnotation.get=function(){return false;};
  $$funParamDecl.$prop$getShared={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','shared']};}};
  $$funParamDecl.$prop$getShared.get=function(){return false;};
  $$funParamDecl.$prop$getToplevel={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','toplevel']};}};
  $$funParamDecl.$prop$getToplevel.get=function(){return false;};
  $$funParamDecl.$prop$getFormal={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','formal']};}};
  $$funParamDecl.$prop$getFormal.get=function(){return false;};
  $$funParamDecl.$prop$getDefault={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','default']};}};
  $$funParamDecl.$prop$getDefault.get=function(){return false};
  $$funParamDecl.$prop$getActual={$crtmm$:function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','actual']};}};
  $$funParamDecl.$prop$getActual.get=function(){return false;};
  return $$funParamDecl;
}
FunParamDecl.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:FunctionDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','FunParamDecl']};};
function $init$FunParamDecl(){
  if (FunParamDecl.$$===undefined){
    initTypeProto(FunParamDecl,'ceylon.language.meta.declaration::FunParamDecl',Basic,FunctionDeclaration$meta$declaration);
    (function($$funParamDecl){

      defineAttr($$funParamDecl,'parameter',function(){return true;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','parameter']};});
      
      //AttributeGetterDef defaulted at caca.ceylon (8:2-8:71)
      defineAttr($$funParamDecl,'defaulted',function(){
        return this.param.$def!==undefined;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','defaulted']};});
      //AttributeGetterDef variadic at caca.ceylon (9:2-9:69)
      defineAttr($$funParamDecl,'variadic',function(){
        return this.param.seq!==undefined;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','variadic']};});
      //AttributeGetterDef container at caca.ceylon (11:2-11:91)
      defineAttr($$funParamDecl,'container',function(){
        return this.cont;
      },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Package$meta$declaration},{t:NestableDeclaration$meta$declaration}]},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','container']};});
      //AttributeGetterDef containingPackage at caca.ceylon (12:2-12:87)
      defineAttr($$funParamDecl,'containingPackage',function(){
        return this.cont.containingPackage;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','containingPackage']};});
      //AttributeGetterDef containingModule at caca.ceylon (13:2-13:84)
      defineAttr($$funParamDecl,'containingModule',function(){
        return this.cont.containingModule;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','containingModule']};});
      //AttributeGetterDef openType at caca.ceylon (14:2-14:70)
      defineAttr($$funParamDecl,'openType',function(){
        var t = this.param.$t;
        if (typeof(t)==='string')return OpenTvar(OpenTypeParam(this.cont,t));
        return _openTypeFromTarg(t);
      },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','openType']};});
      //AttributeDecl annotation at caca.ceylon (15:2-15:40)
      defineAttr($$funParamDecl,'annotation',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','annotation']};});
      defineAttr($$funParamDecl,'shared',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','shared']};});
      defineAttr($$funParamDecl,'toplevel',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','toplevel']};});
      defineAttr($$funParamDecl,'formal',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','formal']};});
      defineAttr($$funParamDecl,'$default',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','default']};});
      defineAttr($$funParamDecl,'actual',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','actual']};});
      defineAttr($$funParamDecl,'qualifiedName',function(){
        return String$($qname(cont.tipo.$crtmm$)+"."+this.param.$nm);
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','qualifiedName']};});
      defineAttr($$funParamDecl,'name',function(){
        return String$(this.param.$nm);
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$at','name']};});
      $$funParamDecl.getParameterDeclaration=function getParameterDeclaration(name$10){
      var pd=this.parameterDeclarations;
      for (var i=0; i < pd.length; i++) {
        if (name$6.equals(pd[i].name))return pd[i];
      }
      return null;
      };$$funParamDecl.getParameterDeclaration.$crtmm$=function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Null},{t:FunctionOrValueDeclaration$meta$declaration}]},$ps:[{$nm:'name',$mt:'prm',$t:{t:String$},$an:function(){return[];}}],$cont:FunParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','getParameterDeclaration']};};
      
      //MethodDef apply at caca.ceylon (31:2-32:74)
      $$funParamDecl.$apply=function $apply(typeArguments$11,$$$mptypes){
          if(typeArguments$11===undefined){typeArguments$11=getEmpty();}
          throw Exception(String$("IMPL FunParamDecl.apply"));
      };$$funParamDecl.$apply.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Function$meta$model,a:{Arguments:'Arguments',Type:'Return'}},$ps:[{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:FunParamDecl,$tp:{Return:{'def':{t:Anything}},Arguments:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','apply']};};
      
      //MethodDef memberApply at caca.ceylon (33:2-34:80)
      $$funParamDecl.memberApply=function memberApply(containerType$12,typeArguments$13,$$$mptypes){
          if(typeArguments$13===undefined){typeArguments$13=getEmpty();}
          throw Exception(String$("IMPL FunParamDecl.memberApply"));
      };$$funParamDecl.memberApply.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Method$meta$model,a:{Arguments:'Arguments',Type:'Return',Container:'Container'}},$ps:[{$nm:'containerType',$mt:'prm',$t:{t:Type$meta$model,a:{Type:'Container'}},$an:function(){return[];}},{$nm:'typeArguments',$mt:'prm',seq:1,$t:{t:Sequential,a:{Element$Sequential:{t:Type$meta$model,a:{Type:{t:Anything}}}}},$an:function(){return[];}}],$cont:FunParamDecl,$tp:{Container:{'def':{t:Nothing}},Return:{'def':{t:Anything}},Arguments:{'satisfies':[{t:Sequential,a:{Element$Sequential:{t:Anything}}}],'def':{t:Nothing}}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','FunctionDeclaration','$m','memberApply']};};
    })(FunParamDecl.$$.prototype);
  }
  return FunParamDecl;
}
exports.$init$FunParamDecl=$init$FunParamDecl;
$init$FunParamDecl();

function ValParamDecl(cont,param,$$valParamDecl){
  $init$ValParamDecl();
  if ($$valParamDecl===undefined)$$valParamDecl=new ValParamDecl.$$;
  ValueDeclaration$meta$declaration($$valParamDecl);
  $$valParamDecl.cont=cont;
  $$valParamDecl.param=param;
  $$valParamDecl.tipo={$crtmm$:{$cont:cont.tipo,$t:param.$t,$mt:'prm',d:cont.tipo.$crtmm$.d,$an:param.$an}};

  $$valParamDecl.$prop$getParameter.get=function(){return true;};
  $$valParamDecl.$prop$getShared.get=function(){return false;};
  $$valParamDecl.$prop$getToplevel.get=function(){return false;};
  $$valParamDecl.$prop$getFormal.get=function(){return false;};
  $$valParamDecl.$prop$getDefault.get=function(){return false;};
  $$valParamDecl.$prop$getActual.get=function(){return false;};
  return $$valParamDecl;
}
ValParamDecl.$crtmm$=function(){return{mod:$CCMM$,'super':{t:Basic},$ps:[],satisfies:[{t:ValueDeclaration$meta$declaration}],d:['ceylon.language.meta.declaration','ValParamDecl']};};
function $init$ValParamDecl(){
  if (ValParamDecl.$$===undefined){
    initTypeProto(ValParamDecl,'ceylon.language.meta.declaration::ValParamDecl',Basic,ValueDeclaration$meta$declaration);
    (function($$valParamDecl){

      defineAttr($$valParamDecl,'parameter',function(){return true;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','parameter']};});
      defineAttr($$valParamDecl,'defaulted',function(){
        return this.param.$def!==undefined;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','defaulted']};});
      defineAttr($$valParamDecl,'variadic',function(){
        return this.param.seq!==undefined;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','variadic']};});
      defineAttr($$valParamDecl,'variable',function(){
        return $findAnnotation(this.param,VariableAnnotation)!==null;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','variable']};});
      defineAttr($$valParamDecl,'container',function(){
        return this.cont;
      },undefined,function(){return{mod:$CCMM$,$t:{t:'u', l:[{t:Package$meta$declaration},{t:NestableDeclaration$meta$declaration}]},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','container']};});
      defineAttr($$valParamDecl,'containingPackage',function(){
        return this.cont.containingPackage;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Package$meta$declaration},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','containingPackage']};});
      defineAttr($$valParamDecl,'containingModule',function(){
        return this.cont.containingModule;
      },undefined,function(){return{mod:$CCMM$,$t:{t:Module$meta$declaration},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','containingModule']};});
      defineAttr($$valParamDecl,'openType',function(){
        var t = this.param.$t;
        if (typeof(t)==='string')return OpenTvar(OpenTypeParam(this.cont,t));
        return _openTypeFromTarg(t);
      },undefined,function(){return{mod:$CCMM$,$t:{t:OpenType$meta$declaration},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','openType']};});
      defineAttr($$valParamDecl,'shared',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','shared']};});
      defineAttr($$valParamDecl,'toplevel',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','toplevel']};});
      defineAttr($$valParamDecl,'formal',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','formal']};});
      defineAttr($$valParamDecl,'$default',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','default']};});
      defineAttr($$valParamDecl,'actual',function(){return false;},undefined,function(){return{mod:$CCMM$,$t:{t:Boolean$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','actual']};});
      defineAttr($$valParamDecl,'qualifiedName',function(){
        return String$($qname(this.cont.tipo.$crtmm$)+"."+this.param.$nm);
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','qualifiedName']};});
      defineAttr($$valParamDecl,'name',function(){
        return String$(this.param.$nm);
      },undefined,function(){return{mod:$CCMM$,$t:{t:String$},$cont:ValParamDecl,$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$at','name']};});
      //MethodDef apply at caca.ceylon (57:2-57:84)
      $$valParamDecl.$apply=function $apply($$$mptypes){
          var $$valParamDecl=this;
          throw Exception(String$("IMPL ValParamDecl.apply"));
      };$$valParamDecl.$apply.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Value$meta$model,a:{Type:'Type'}},$ps:[],$cont:ValParamDecl,$tp:{Type:{'def':{t:Anything}}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','apply']};};
      //MethodDef memberApply at caca.ceylon (58:2-58:166)
      $$valParamDecl.memberApply=function memberApply(containerType$20,$$$mptypes){
          var $$valParamDecl=this;
          throw Exception(String$("IMPL ValParamDecl.memberApply"));
      };$$valParamDecl.memberApply.$crtmm$=function(){return{mod:$CCMM$,$t:{t:Attribute$meta$model,a:{Type:'Type',Container:'Container'}},$ps:[{$nm:'containerType',$mt:'prm',$t:{t:Type$meta$model,a:{Type:'Container'}},$an:function(){return[];}}],$cont:ValParamDecl,$tp:{Container:{'def':{t:Nothing}},Type:{'def':{t:Anything}}},$an:function(){return[shared(),actual()];},d:['ceylon.language.meta.declaration','ValueDeclaration','$m','memberApply']};};
    })(ValParamDecl.$$.prototype);
  }
  return ValParamDecl;
}
exports.$init$ValParamDecl=$init$ValParamDecl;
$init$ValParamDecl();
//From a runtime metamodel, get the model definition by following the path into the module's model.
function get_model(mm) {
  var map=mm.mod;
  var path=mm.d;
  for (var i=0; i < path.length; i++) {
    var _p=path[i];
    if (i===0 && _p==='$')_p='ceylon.language';
    map = map[_p];
  }
  return map;
}

function type$meta(x,$$targs$$) {
  if (x === null || $$targs$$.Type$type.t===Nothing) {
    return getNothingType$meta$model();
  }
  var mm=getrtmm$$(x);
  var _t=$$targs$$.Type$type.t;
  if (mm===undefined) {
    if (x.getT$name && x.getT$all) {
      var mmm=x.getT$all()[x.getT$name()];
      if (mmm){mm=mmm.$crtmm$;_t=mmm;}
      if (typeof(mm)==='function') {
        mm=mm(); mmm.$crtmm$=mm;
      }
    }
  }
  if (mm===undefined&&x.reifyCeylonType)mm=Array$.$crtmm$;
  if (mm===undefined)throw Error("Cannot retrieve metamodel for " + x);
  if (mm.$t) { //it's a value
    if (typeof(x)==='function') { //It's a callable
      if (mm.$cont) {
        return AppliedMethod(x,undefined,{Type$Method:mm.$t,Arguments$Method:{t:Nothing}});
      }
      return AppliedFunction(x,{Type$Function:mm.$t,Arguments$Function:{t:Nothing}});
    }
    return AppliedClass(mm.$t.t, {Type$Class:mm.$t,Arguments$Class:{t:Nothing}});
  }
  var c;
  if ($$targs$$.Type$type.t==='T') {
    var rt=$retuple($$targs$$.Type$type);
    c=AppliedClass(Tuple,{Type$Class:$$targs$$.Type$type, Arguments$Class:{t:'T',l:[$$targs$$.Type$type.l[0],rt.Rest$Tuple]}});
  } else {
    var _ta={T:{t:x.getT$all()[x.getT$name()]}, A:{t:Sequential,a:{Element$Iterable:{t:Anything}}}};
    if (x.$$targs$$)_ta.T.a=x.$$targs$$;
    if (x.$$outer) {
      _ta.C={t:x.$$outer.getT$all()[x.$$outer.getT$name()]};
      if (x.$$outer.$$targs$$)_ta.C.a=x.$$outer.$$targs$$;
    }
    if (mm.$cont) {
      c=AppliedMemberClass(_t, {Type$MemberClass:_ta.T,Arguments$MemberClass:_ta.A,Container$MemberClass:_ta.C});
    } else {
      c=AppliedClass(_t, {Type$Class:_ta.T,Arguments$Class:_ta.A});
    }
  }
  if ($$targs$$.Type$type.a)c.$targs=$$targs$$.Type$type.a;
  return c;
}
type$meta.$crtmm$=function(){return{
  $ps:[{$nm:'instance',$t:'Type'}],$an:function(){return[shared(),native()];},
  $t:{t:ClassModel$meta$model,a:{Type$Class:'Type', Arguments$Class:{t:Nothing}}}, $tp:{Type$type:{satisfies:{t:Anything}}},
  mod:$CCMM$,d:['ceylon.language.meta','type']};}
exports.type$meta=type$meta;

function typeLiteral$meta($$targs$$) {
  if ($$targs$$ === undefined || $$targs$$.Type$typeLiteral === undefined) {
    throw Exception("Missing type argument 'Type' " + /*require('util').inspect(*/$$targs$$);
  } else if ($$targs$$.Type$typeLiteral.$crtmm$ == undefined) {
    //closed type
    var t = $$targs$$.Type$typeLiteral.t
    if (t === undefined) {
      throw Exception("'Type' argument should be an open or closed type");
    } else if (t === 'u' || t === 'i') {
      return t === 'u' ? applyUnionType($$targs$$.Type$typeLiteral) : applyIntersectionType($$targs$$.Type$typeLiteral);
    } else if (t === 'T') {
      //TODO arguments
      var _tt=$retuple($$targs$$.Type$typeLiteral);
      return AppliedClass(Tuple,{Type$Class:$$targs$$.Type$typeLiteral,Arguments$Class:{t:'T',l:[_tt.a.First$Tuple,_tt.a.Rest$Tuple]}});
    } else if (t.$crtmm$ === undefined) {
      throw Exception("JS Interop not supported / incomplete metamodel for " + /*require('util').inspect(*/t);
    } else {
      var mm = getrtmm$$(t);
      var mdl = get_model(mm);
      if (mdl['$mt'] === 'cls') {
        //TODO tupleize Arguments
        var r=AppliedClass(t,{Type$Class:$$targs$$.Type$typeLiteral,Arguments$Class:{t:Sequential,a:{Element$Iterable:{t:Anything}}}});
        if ($$targs$$.Type$typeLiteral.a)r.$targs=$$targs$$.Type$typeLiteral.a;
        return r;
      } else if (mdl['$mt'] === 'ifc') {
        var r=AppliedInterface(t,{Type$Interface:$$targs$$.Type$typeLiteral});
        if ($$targs$$.Type$typeLiteral.a)r.$targs=$$targs$$.Type$typeLiteral.a;
        return r;
      } else if (mdl['$mt'] === 'mthd') {
        return AppliedFunction(t,{Type$Function:$$targs$$.Type$typeLiteral,Arguments$Function:{t:Sequential,a:{Element$Iterable:{t:Anything}}}});
      } else if (mdl['$mt'] === 'attr' || mdl['$mt'] === 'gttr' || mdl['$mt'] === 'obj') {
        return AppliedValue(undefined,t,{Container$Value:{t:mm.$cont},Get$Value:mm.$t,Set$Value:mdl['var']?mm.$t:{t:Nothing}});
      } else {
        console.log("WTF is a metatype " + mdl['$mt'] + " on a closed type???????");
      }
      console.log("typeLiteral<" + t.getT$name() + "> (closed type)");
    }
  } else {
    //open type
    var t = $$targs$$.Type$typeLiteral;
    var mm = getrtmm$$(t);
    var mdl = get_model(mm);
    //We need the module
    var _mod = getModules$meta().find(mm.mod['$mod-name'],mm.mod['$mod-version']);
    var _pkg = _mod.findPackage(mm.d[0]);
    if (mdl.$mt==='cls' || mdl.$mt==='obj') {
      return OpenClass(_pkg, t);
    } else if (mdl['$mt'] === 'ifc') {
      return OpenInterface(_pkg, t);
    } else if (mdl['$mt'] === 'mthd') {
      return OpenFunction(_pkg, t);
    } else if (mdl['$mt'] === 'attr' || mdl['$mt'] === 'gttr') {
      return OpenValue(_pkg, t);
    } else {
      console.log("WTF is a metatype " + mdl['$mt'] + " on an open type???????");
    }
    console.log("typeLiteral<" + t.getT$name() + "> (open type)");
  }
  throw Exception("typeLiteral UNIMPLEMENTED for " + /*require('util').inspect(*/$$targs$$);
}
typeLiteral$meta.$crtmm$={$ps:[],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language.meta','typeLiteral']};
exports.typeLiteral$meta=typeLiteral$meta;

function pushTypes(list, types) {
  for (var i=0; i<types.length; i++) {
    var t = types[i];
    if (t.t === 'u') {
      list.push(applyUnionType(t, t.l));
    } else if (t.t === 'i') {
      list.push(applyIntersectionType(t, t.l));
    } else {
      list.push(typeLiteral$meta({Type$typeLiteral:t}));
    }
  }
  return list;
}

function applyUnionType(ut) { //return AppliedUnionType
  var cases = [];
  pushTypes(cases, ut.l);
  return AppliedUnionType(ut, cases.reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:Type$meta$model}}), {Union$UnionType:{t:Anything}});
}
function applyIntersectionType(it) { //return AppliedIntersectionType
  var sats = [];
  pushTypes(sats, it.l);
  return AppliedIntersectionType(it, sats.reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:Type$meta$model}}), {Intersection$IntersectionType:{t:Anything}});
}
exports.$mod$ans$=function(){return[doc(String$("The Ceylon language module containing the core types \nreferred to in the language specification.",96)),by([String$("Gavin King",10),String$("Tom Bentley",11),String$("Tako Schotanus",14),String$("Stephane Epardaud",17),String$("Enrique Zamudio",15)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),license(String$("http://www.apache.org/licenses/LICENSE-2.0.html",47))];};
exports.$pkg$ans$ceylon$language=function(){return[doc(String$("The Ceylon language package.",28)),by([String$("Gavin King",10),String$("Tom Bentley",11),String$("Tako Schotanus",14),String$("Stephane Epardaud",17),String$("Enrique Zamudio",15)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];};
exports.$pkg$ans$ceylon$language$meta=function(){return[doc(String$("The Ceylon metamodel base package.\n\nThe Ceylon metamodel allows you to: \n\n* dynamically inspect modules, packages, functions, values and types, \n* invoke functions and class initialisers, or read and write values, and\n* inspect the annotations on program elements.\n\n### A little bit of terminology\n\nThere are a few concepts and terms in the Ceylon metamodel API that you should be familiar with:\n\n- A _declaration_ is the definition of a Ceylon construct, such as a module, package, value, function\n  or class. Declarations are singletons: there is only a single instance of a given class declaration,\n  for example. You can inspect declarations to get information about how they were defined by their\n  author. You cannot directly invoke function or class declarations, but you can _apply_ them to get\n  a _model_ that you can invoke.\n- A _model_ is a Ceylon definition that represents a declaration where all the type variables have\n  been bound to _closed type_ values. You can query models for their member models and you can directly\n  invoke models.\n- A _closed type_ is a type which does not contain any unbound type variables.\n- An _open type_ is a type which may contain unbound type variables.\n\nFor example, given the following Ceylon program:\n\n    shared abstract class MyList<T>() satisfies List<T>{}\n\nThe declaration of `MyList` represents the class declaration and contains the information that it is\n`abstract` and that it satisfies the `List<T>` open type. That type is open because it contains an\nunbound type variable `T`, which is not bound when we inspect the `MyList` class declaration.\n\nGiven an particular instance of `MyList`, we can query its (closed) type with the [[type]] function,\nand we obtain a closed type representing (for example) `MyList<Integer>`. Object instances necessarily\nhave a closed type at runtime, since in order to instantiate an object, all type arguments must be\nprovided and known during instantiation, so the type of an object instance at runtime is necessarily\na closed type: they cannot contain unbound type variables.\n\nClosed types that represent class or interfaces are also models. For example, the closed type of our\n`MyList<Integer>` instance is both a closed type and a class model: you can query its satisfied types\nand find that it satisfies `List<Integer>` closed type and model (as opposed to the class declaration\nof `MyList` which satisfies the `List<T>` open type). You can also invoke that model to obtain a new\ninstance of `MyList<Integer>`.\n\n### Model and declaration literals\n\nCeylon supports getting declaration values using either the declaration API or using declaration\nliterals:\n\n- <code>\\`module ceylon.file\\`</code> returns the [[Module|ceylon.language.meta.declaration::Module]] \n  declaration which corresponds to the `ceylon.file` module you imported in your module descriptor.\n- <code>\\`package ceylon.language.meta\\`</code> returns the [[Package|ceylon.language.meta.declaration::Package]]\n  declaration from your current module imports.\n- <code>\\`interface List\\`</code> returns the [[InterfaceDeclaration|ceylon.language.meta.declaration::InterfaceDeclaration]] \n  for the [[List|ceylon.language::List]] type.\n- <code>\\`class Integer\\`</code> returns the [[ClassDeclaration|ceylon.language.meta.declaration::ClassDeclaration]] \n  for the [[Integer|ceylon.language::Integer]] type.\n- <code>\\`function type\\`</code> returns the [[FunctionDeclaration|ceylon.language.meta.declaration::FunctionDeclaration]] \n  for the [[type]] function. Similarly <code>\\`function List.shorterThan\\`</code> for methods.\n- <code>\\`value modules\\`</code> returns the [[ValueDeclaration|ceylon.language.meta.declaration::ValueDeclaration]] \n  for the [[modules]] value. Similarly <code>\\`function List.size\\`</code> for attributes.\n- <code>\\`alias AliasName\\`</code> returns the [[AliasDeclaration|ceylon.language.meta.declaration::AliasDeclaration]]\n  for the `AliasName` type alias. \n- <code>\\`given T\\`</code> returns the [[TypeParameter|ceylon.language.meta.declaration::TypeParameter]] \n  for the `T` type parameter.\n\nNote that declaration literals cannot have type arguments specified on types or methods, as declarations are not types.\n\nYou can also get access to closed types and model using either the model API or using literals: \n\n- <code>\\`List&lt;Integer>\\`</code> returns the [[Interface|ceylon.language.meta.model::Interface]] model and \n  closed type for the [[List|ceylon.language::List]] type applied with the [[Integer|ceylon.language::Integer]] type argument.\n- <code>\\`Integer\\`</code> returns the [[Class|ceylon.language.meta.model::Class]] model and closed type \n  for the [[Integer|ceylon.language::Integer]] type.\n- <code>\\`type&lt;Integer>\\`</code> returns the [[Function|ceylon.language.meta.model::Function]] model \n  for the [[type]] function applied with the [[Integer|ceylon.language::Integer]] type argument.\n  Similarly <code>\\`List&lt;Integer>.shorterThan\\`</code> for method models.\n- <code>\\`modules\\`</code> returns the [[Value|ceylon.language.meta.model::Value]] model \n  for the [[modules]] value. Similarly <code>\\`List&lt;Integer>.size\\`</code> for attribute models.\n- <code>\\`A & B\\`</code> returns a [[IntersectionType|ceylon.language.meta.model::IntersectionType]]\n  for the `A & B` intersection type.\n- <code>\\`A | B\\`</code> returns a [[UnionType|ceylon.language.meta.model::UnionType]]\n  for the `A | B` union type.\n- <code>\\`T\\`</code> returns a [[Type|ceylon.language.meta.model::Type]] representing the runtime type \n  argument value for the `T` type parameter.\n\nNotice that all model and close type literals must be applied with all required type arguments.\n\n### Accessing the metamodel using the API\n\nAside from declaration and model literals there are several ways you can start using the metamodel API:\n\n- The [[modules]] object contains a list of all currently loaded [[Module|ceylon.language.meta.declaration::Module]]\n  declarations. Note that these contain even modules you did not import as it contains all transitive\n  dependencies, and may contain multiple different versions of the same module.\n- The [[type]] function will return the closed type of the given instance, which can only be a\n  [[ClassModel|ceylon.language.meta.model::ClassModel]] since only classes can be instantiated.\n- The [[typeLiteral]] function is the functional equivalent to closed type literals: it turns a type argument\n  value into a metamodel closed type.\n- The [declaration](declaration/index.html) package contains all the declaration and open types.\n- The [model](model/index.html) package contains all the model and closed types.\n\n### Inspecting annotations\n\nConstrained annotations can be inspected using the [[annotations]] \nfunction, like this:\n\n    // Does the process declaration have the Shared annotation?\n    value isShared = annotations(`Shared`, `value process`) exists;\n\nor the related [[optionalAnnotation]] and [[sequencedAnnotations]] functions.\n\nNote that annotations are queried for via their \n[[ceylon.language::Annotation]] type, \nnot by the annotation constructor which was used to annotate \nthe program element.\n",7137)),by([String$("Gavin King",10),String$("Stephane Epardaud",17)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];};
exports.$pkg$ans$ceylon$language$meta$model=function(){return[doc(String$("The Ceylon metamodel closed type and model package.\n\nAs described in the [ceylon.language.meta](../index.html) documentation, this package contains all\nthe types that represent Ceylon closed types and models.\n\n### Usage example\n\nThe following code will list all the value declarations in the `ceylon.language` package and print their\ncurrent value:\n\n    Package languagePackage = `package ceylon.language`;\n    ValueDeclaration[] valueDeclarations = languagePackage.members<ValueDeclaration>();\n    Value<Anything>[] valueModels = valueDeclarations*.apply<Anything>();\n    for(val in valueModels){\n        // skip the nothing value which cannot be read\n        if(val.type != `Nothing`){\n            print(val.get());\n        }\n    }\n\nThe following code will iterate all the class declarations in the `ceylon.language` package that\nare not abstract, anonymous or annotations, and that have no type parameters nor initialiser\nparameters. For each matching class, we will apply it to get a class model which we can then\nuse to instantiate the class and display its instance:\n\n    for(decl in `package ceylon.language`.members<ClassDeclaration>()){\n        if(!decl.abstract \n                && !decl.anonymous \n                && !decl.annotation\n                && decl.parameterDeclarations.empty\n                && decl.typeParameterDeclarations.empty){\n            Class<Object,[]> classModel = decl.classApply<Object,[]>();\n            Object instance = classModel();\n            print(\"Instance of ``decl.name`` is: ``instance``\");\n        }\n    }\n",1552)),by([String$("Gavin King",10),String$("Stephane Epardaud",17)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];};
exports.$pkg$ans$ceylon$language$meta$declaration=function(){return[doc(String$("The Ceylon metamodel open type and declaration package.\n\nAs described in the [ceylon.language.meta](../index.html) documentation, this package contains all\nthe types that represent Ceylon declarations and open types.\n\n### Usage example\n\nThe following code will list all the classes in the `ceylon.language` package and print their\nextended type:\n\n    for(decl in `package ceylon.language`.members<ClassDeclaration>()){\n        if(exists extendedType = decl.extendedType){\n            print(\"Class ``decl.name`` extends: ``extendedType``\");\n        }else{\n            print(\"Class ``decl.name`` does not extend anything\");\n        }\n    }\n\nThe following code will iterate all the class declarations in the `ceylon.language` package that\nare not abstract, anonymous or annotations, and that have no type parameters nor initialiser\nparameters. For each matching class, we will apply it to get a class model which we can then\nuse to instantiate the class and display its instance:\n\n    for(decl in `package ceylon.language`.members<ClassDeclaration>()){\n        if(!decl.abstract \n                && !decl.anonymous \n                && !decl.annotation\n                && decl.parameterDeclarations.empty\n                && decl.typeParameterDeclarations.empty){\n            Class<Object,[]> classModel = decl.classApply<Object,[]>();\n            Object instance = classModel();\n            print(\"Instance of ``decl.name`` is: ``instance``\");\n        }\n    }\n",1456)),by([String$("Gavin King",10),String$("Stephane Epardaud",17)].reifyCeylonType({Absent$Iterable:{t:Null},Element$Iterable:{t:String$}})),shared()];};
//Ends compiled from Ceylon sources
function NativeException(e) {
var that = new NativeException.$$;
var msg;
if (typeof e === 'string') {
msg = String$(e);
} else if (e) {
msg = String$(e.toString());
} else {
msg = String$("Native JavaScript Exception",27);
}
Exception(msg,null,that);
return that;
}
initTypeProto(NativeException, 'ceylon.language::NativeException', $init$Exception());
NativeException.$crtmm$=function(){return{$nm:'NativeException',$mt:'cls',$ps:[{t:Exception}],$an:function(){return[shared()];},mod:$CCMM$,d:['ceylon.language','Exception']};}
exports.Identifiable=Identifiable;
exports.identityHash=$identityHash;
exports.$Object=Object$;
exports.Anything=Anything;
exports.Null=Null;
exports.Nothing=Nothing;
exports.$Boolean=Boolean$;
exports.Comparison=Comparison;
exports.getNull=getNull;
exports.getTrue=getTrue;
exports.getFalse=getFalse;
exports.NativeException=NativeException;
});
}(typeof define==='function' && define.amd ?
define : function (factory) {
if (typeof exports!=='undefined') {
factory(require, exports, module);
} else {
throw "no module loader";
}
}));
